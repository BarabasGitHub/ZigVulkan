pub const ptrdiff_t = c_longlong;
pub const wchar_t = c_ushort;
pub const max_align_t = f64;
pub const int_least64_t = i64;
pub const uint_least64_t = u64;
pub const int_fast64_t = i64;
pub const uint_fast64_t = u64;
pub const int_least32_t = i32;
pub const uint_least32_t = u32;
pub const int_fast32_t = i32;
pub const uint_fast32_t = u32;
pub const int_least16_t = i16;
pub const uint_least16_t = u16;
pub const int_fast16_t = i16;
pub const uint_fast16_t = u16;
pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const intmax_t = c_longlong;
pub const uintmax_t = c_ulonglong;
pub const VkFlags = u32;
pub const VkBool32 = u32;
pub const VkDeviceSize = u64;
pub const VkSampleMask = u32;
pub const struct_VkInstance_T = @OpaqueType();
pub const VkInstance = ?*struct_VkInstance_T;
pub const struct_VkPhysicalDevice_T = @OpaqueType();
pub const VkPhysicalDevice = ?*struct_VkPhysicalDevice_T;
pub const struct_VkDevice_T = @OpaqueType();
pub const VkDevice = ?*struct_VkDevice_T;
pub const struct_VkQueue_T = @OpaqueType();
pub const VkQueue = ?*struct_VkQueue_T;
pub const struct_VkSemaphore_T = @OpaqueType();
pub const VkSemaphore = ?*struct_VkSemaphore_T;
pub const struct_VkCommandBuffer_T = @OpaqueType();
pub const VkCommandBuffer = ?*struct_VkCommandBuffer_T;
pub const struct_VkFence_T = @OpaqueType();
pub const VkFence = ?*struct_VkFence_T;
pub const struct_VkDeviceMemory_T = @OpaqueType();
pub const VkDeviceMemory = ?*struct_VkDeviceMemory_T;
pub const struct_VkBuffer_T = @OpaqueType();
pub const VkBuffer = ?*struct_VkBuffer_T;
pub const struct_VkImage_T = @OpaqueType();
pub const VkImage = ?*struct_VkImage_T;
pub const struct_VkEvent_T = @OpaqueType();
pub const VkEvent = ?*struct_VkEvent_T;
pub const struct_VkQueryPool_T = @OpaqueType();
pub const VkQueryPool = ?*struct_VkQueryPool_T;
pub const struct_VkBufferView_T = @OpaqueType();
pub const VkBufferView = ?*struct_VkBufferView_T;
pub const struct_VkImageView_T = @OpaqueType();
pub const VkImageView = ?*struct_VkImageView_T;
pub const struct_VkShaderModule_T = @OpaqueType();
pub const VkShaderModule = ?*struct_VkShaderModule_T;
pub const struct_VkPipelineCache_T = @OpaqueType();
pub const VkPipelineCache = ?*struct_VkPipelineCache_T;
pub const struct_VkPipelineLayout_T = @OpaqueType();
pub const VkPipelineLayout = ?*struct_VkPipelineLayout_T;
pub const struct_VkRenderPass_T = @OpaqueType();
pub const VkRenderPass = ?*struct_VkRenderPass_T;
pub const struct_VkPipeline_T = @OpaqueType();
pub const VkPipeline = ?*struct_VkPipeline_T;
pub const struct_VkDescriptorSetLayout_T = @OpaqueType();
pub const VkDescriptorSetLayout = ?*struct_VkDescriptorSetLayout_T;
pub const struct_VkSampler_T = @OpaqueType();
pub const VkSampler = ?*struct_VkSampler_T;
pub const struct_VkDescriptorPool_T = @OpaqueType();
pub const VkDescriptorPool = ?*struct_VkDescriptorPool_T;
pub const struct_VkDescriptorSet_T = @OpaqueType();
pub const VkDescriptorSet = ?*struct_VkDescriptorSet_T;
pub const struct_VkFramebuffer_T = @OpaqueType();
pub const VkFramebuffer = ?*struct_VkFramebuffer_T;
pub const struct_VkCommandPool_T = @OpaqueType();
pub const VkCommandPool = ?*struct_VkCommandPool_T;
pub const VK_PIPELINE_CACHE_HEADER_VERSION_ONE = @enumToInt(enum_VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_ONE);
pub const VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE = @enumToInt(enum_VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE);
pub const VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE = @enumToInt(enum_VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE);
pub const VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE = @enumToInt(enum_VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE);
pub const VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = @enumToInt(enum_VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM);
pub const enum_VkPipelineCacheHeaderVersion = extern enum(c_int) {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647,
    _,
};
pub const VkPipelineCacheHeaderVersion = enum_VkPipelineCacheHeaderVersion;
pub const VK_SUCCESS = @enumToInt(enum_VkResult.VK_SUCCESS);
pub const VK_NOT_READY = @enumToInt(enum_VkResult.VK_NOT_READY);
pub const VK_TIMEOUT = @enumToInt(enum_VkResult.VK_TIMEOUT);
pub const VK_EVENT_SET = @enumToInt(enum_VkResult.VK_EVENT_SET);
pub const VK_EVENT_RESET = @enumToInt(enum_VkResult.VK_EVENT_RESET);
pub const VK_INCOMPLETE = @enumToInt(enum_VkResult.VK_INCOMPLETE);
pub const VK_ERROR_OUT_OF_HOST_MEMORY = @enumToInt(enum_VkResult.VK_ERROR_OUT_OF_HOST_MEMORY);
pub const VK_ERROR_OUT_OF_DEVICE_MEMORY = @enumToInt(enum_VkResult.VK_ERROR_OUT_OF_DEVICE_MEMORY);
pub const VK_ERROR_INITIALIZATION_FAILED = @enumToInt(enum_VkResult.VK_ERROR_INITIALIZATION_FAILED);
pub const VK_ERROR_DEVICE_LOST = @enumToInt(enum_VkResult.VK_ERROR_DEVICE_LOST);
pub const VK_ERROR_MEMORY_MAP_FAILED = @enumToInt(enum_VkResult.VK_ERROR_MEMORY_MAP_FAILED);
pub const VK_ERROR_LAYER_NOT_PRESENT = @enumToInt(enum_VkResult.VK_ERROR_LAYER_NOT_PRESENT);
pub const VK_ERROR_EXTENSION_NOT_PRESENT = @enumToInt(enum_VkResult.VK_ERROR_EXTENSION_NOT_PRESENT);
pub const VK_ERROR_FEATURE_NOT_PRESENT = @enumToInt(enum_VkResult.VK_ERROR_FEATURE_NOT_PRESENT);
pub const VK_ERROR_INCOMPATIBLE_DRIVER = @enumToInt(enum_VkResult.VK_ERROR_INCOMPATIBLE_DRIVER);
pub const VK_ERROR_TOO_MANY_OBJECTS = @enumToInt(enum_VkResult.VK_ERROR_TOO_MANY_OBJECTS);
pub const VK_ERROR_FORMAT_NOT_SUPPORTED = @enumToInt(enum_VkResult.VK_ERROR_FORMAT_NOT_SUPPORTED);
pub const VK_ERROR_FRAGMENTED_POOL = @enumToInt(enum_VkResult.VK_ERROR_FRAGMENTED_POOL);
pub const VK_ERROR_OUT_OF_POOL_MEMORY = @enumToInt(enum_VkResult.VK_ERROR_OUT_OF_POOL_MEMORY);
pub const VK_ERROR_INVALID_EXTERNAL_HANDLE = @enumToInt(enum_VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE);
pub const VK_ERROR_SURFACE_LOST_KHR = @enumToInt(enum_VkResult.VK_ERROR_SURFACE_LOST_KHR);
pub const VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = @enumToInt(enum_VkResult.VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
pub const VK_SUBOPTIMAL_KHR = @enumToInt(enum_VkResult.VK_SUBOPTIMAL_KHR);
pub const VK_ERROR_OUT_OF_DATE_KHR = @enumToInt(enum_VkResult.VK_ERROR_OUT_OF_DATE_KHR);
pub const VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = @enumToInt(enum_VkResult.VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
pub const VK_ERROR_VALIDATION_FAILED_EXT = @enumToInt(enum_VkResult.VK_ERROR_VALIDATION_FAILED_EXT);
pub const VK_ERROR_INVALID_SHADER_NV = @enumToInt(enum_VkResult.VK_ERROR_INVALID_SHADER_NV);
pub const VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = @enumToInt(enum_VkResult.VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT);
pub const VK_ERROR_FRAGMENTATION_EXT = @enumToInt(enum_VkResult.VK_ERROR_FRAGMENTATION_EXT);
pub const VK_ERROR_NOT_PERMITTED_EXT = @enumToInt(enum_VkResult.VK_ERROR_NOT_PERMITTED_EXT);
pub const VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = @enumToInt(enum_VkResult.VK_ERROR_INVALID_DEVICE_ADDRESS_EXT);
pub const VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = @enumToInt(enum_VkResult.VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT);
pub const VK_ERROR_OUT_OF_POOL_MEMORY_KHR = @enumToInt(enum_VkResult.VK_ERROR_OUT_OF_POOL_MEMORY_KHR);
pub const VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = @enumToInt(enum_VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR);
pub const VK_RESULT_BEGIN_RANGE = @enumToInt(enum_VkResult.VK_RESULT_BEGIN_RANGE);
pub const VK_RESULT_END_RANGE = @enumToInt(enum_VkResult.VK_RESULT_END_RANGE);
pub const VK_RESULT_RANGE_SIZE = @enumToInt(enum_VkResult.VK_RESULT_RANGE_SIZE);
pub const VK_RESULT_MAX_ENUM = @enumToInt(enum_VkResult.VK_RESULT_MAX_ENUM);
pub const enum_VkResult = extern enum(c_int) {
    VK_SUCCESS = 0,
    VK_NOT_READY = 1,
    VK_TIMEOUT = 2,
    VK_EVENT_SET = 3,
    VK_EVENT_RESET = 4,
    VK_INCOMPLETE = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
    VK_ERROR_INITIALIZATION_FAILED = -3,
    VK_ERROR_DEVICE_LOST = -4,
    VK_ERROR_MEMORY_MAP_FAILED = -5,
    VK_ERROR_LAYER_NOT_PRESENT = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
    VK_ERROR_FEATURE_NOT_PRESENT = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
    VK_ERROR_TOO_MANY_OBJECTS = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
    VK_ERROR_FRAGMENTED_POOL = -12,
    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    VK_SUBOPTIMAL_KHR = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
    VK_ERROR_INVALID_SHADER_NV = -1000012000,
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
    VK_ERROR_FRAGMENTATION_EXT = -1000161000,
    VK_ERROR_NOT_PERMITTED_EXT = -1000174001,
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = -1000244000,
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = -1000072003,
    VK_RESULT_BEGIN_RANGE = -12,
    VK_RESULT_END_RANGE = 5,
    VK_RESULT_RANGE_SIZE = 18,
    VK_RESULT_MAX_ENUM = 2147483647,
    _,
};
pub const VkResult = enum_VkResult;
pub const VK_STRUCTURE_TYPE_APPLICATION_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO);
pub const VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO);
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO);
pub const VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE);
pub const VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_SPARSE_INFO);
pub const VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_FENCE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EVENT_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO);
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET);
pub const VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET);
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO);
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO);
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO);
pub const VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO);
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER);
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER);
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER);
pub const VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES);
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO);
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES);
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS);
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO);
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO);
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO);
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2);
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2);
pub const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2);
pub const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2);
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2);
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2);
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2);
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2);
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES);
pub const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES);
pub const VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES);
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2);
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO);
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO);
pub const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES);
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES);
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO);
pub const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO);
pub const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES);
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO);
pub const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES);
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO);
pub const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES);
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES);
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PRESENT_INFO_KHR);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR);
pub const VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR);
pub const VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR);
pub const VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD);
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT);
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT);
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT);
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX);
pub const VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD);
pub const VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV);
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV);
pub const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV);
pub const VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT);
pub const VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR);
pub const VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR);
pub const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR);
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR);
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR);
pub const VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX);
pub const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX);
pub const VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX);
pub const VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX);
pub const VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX);
pub const VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX);
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT);
pub const VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT);
pub const VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT);
pub const VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT);
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX);
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_HDR_METADATA_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_HDR_METADATA_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR);
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR);
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR);
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR);
pub const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR);
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR);
pub const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR);
pub const VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR);
pub const VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR);
pub const VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR);
pub const VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR);
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR);
pub const VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR);
pub const VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR);
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR);
pub const VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR);
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR);
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR);
pub const VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK);
pub const VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK);
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT);
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT);
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT);
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT);
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID);
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID);
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID);
pub const VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID);
pub const VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID);
pub const VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT);
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT);
pub const VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV);
pub const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT);
pub const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT);
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV);
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_GEOMETRY_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_NV);
pub const VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV);
pub const VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV);
pub const VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV);
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV);
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV);
pub const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT);
pub const VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT);
pub const VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD);
pub const VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD);
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP);
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV);
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL);
pub const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL);
pub const VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL);
pub const VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL);
pub const VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL);
pub const VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL);
pub const VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD);
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD);
pub const VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA);
pub const VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT);
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV);
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV);
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT);
pub const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT);
pub const VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR);
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES);
pub const VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT);
pub const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR);
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR);
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR);
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR);
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR);
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR);
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR);
pub const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR);
pub const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR);
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR);
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR);
pub const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR);
pub const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR);
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR);
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR);
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR);
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR);
pub const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR);
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR);
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR);
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR);
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT);
pub const VK_STRUCTURE_TYPE_BEGIN_RANGE = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_BEGIN_RANGE);
pub const VK_STRUCTURE_TYPE_END_RANGE = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_END_RANGE);
pub const VK_STRUCTURE_TYPE_RANGE_SIZE = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_RANGE_SIZE);
pub const VK_STRUCTURE_TYPE_MAX_ENUM = @enumToInt(enum_VkStructureType.VK_STRUCTURE_TYPE_MAX_ENUM);
pub const enum_VkStructureType = extern enum(c_int) {
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000,
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
    VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX = 1000086000,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = 1000086001,
    VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX = 1000086002,
    VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = 1000086003,
    VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX = 1000086004,
    VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX = 1000086005,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006,
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003,
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000,
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000,
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000,
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = 1000053002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = 1000070001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = 1000090000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = 1000113000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = 1000117003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = 1000120000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = 1000146004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = 1000156005,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = 1000157001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = 1000168000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = 1000168001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 1000244000,
    VK_STRUCTURE_TYPE_BEGIN_RANGE = 0,
    VK_STRUCTURE_TYPE_END_RANGE = 48,
    VK_STRUCTURE_TYPE_RANGE_SIZE = 49,
    VK_STRUCTURE_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const VkStructureType = enum_VkStructureType;
pub const VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = @enumToInt(enum_VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_COMMAND);
pub const VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = @enumToInt(enum_VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
pub const VK_SYSTEM_ALLOCATION_SCOPE_CACHE = @enumToInt(enum_VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_CACHE);
pub const VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = @enumToInt(enum_VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_DEVICE);
pub const VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = @enumToInt(enum_VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE);
pub const VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE = @enumToInt(enum_VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE);
pub const VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE = @enumToInt(enum_VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE);
pub const VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE = @enumToInt(enum_VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE);
pub const VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = @enumToInt(enum_VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM);
pub const enum_VkSystemAllocationScope = extern enum(c_int) {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
    VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE = 4,
    VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE = 5,
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647,
    _,
};
pub const VkSystemAllocationScope = enum_VkSystemAllocationScope;
pub const VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = @enumToInt(enum_VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE);
pub const VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE = @enumToInt(enum_VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE);
pub const VK_INTERNAL_ALLOCATION_TYPE_END_RANGE = @enumToInt(enum_VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_END_RANGE);
pub const VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE = @enumToInt(enum_VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE);
pub const VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = @enumToInt(enum_VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM);
pub const enum_VkInternalAllocationType = extern enum(c_int) {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_END_RANGE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE = 1,
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const VkInternalAllocationType = enum_VkInternalAllocationType;
pub const VK_FORMAT_UNDEFINED = @enumToInt(enum_VkFormat.VK_FORMAT_UNDEFINED);
pub const VK_FORMAT_R4G4_UNORM_PACK8 = @enumToInt(enum_VkFormat.VK_FORMAT_R4G4_UNORM_PACK8);
pub const VK_FORMAT_R4G4B4A4_UNORM_PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_R4G4B4A4_UNORM_PACK16);
pub const VK_FORMAT_B4G4R4A4_UNORM_PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_B4G4R4A4_UNORM_PACK16);
pub const VK_FORMAT_R5G6B5_UNORM_PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_R5G6B5_UNORM_PACK16);
pub const VK_FORMAT_B5G6R5_UNORM_PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_B5G6R5_UNORM_PACK16);
pub const VK_FORMAT_R5G5B5A1_UNORM_PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_R5G5B5A1_UNORM_PACK16);
pub const VK_FORMAT_B5G5R5A1_UNORM_PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_B5G5R5A1_UNORM_PACK16);
pub const VK_FORMAT_A1R5G5B5_UNORM_PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_A1R5G5B5_UNORM_PACK16);
pub const VK_FORMAT_R8_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R8_UNORM);
pub const VK_FORMAT_R8_SNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R8_SNORM);
pub const VK_FORMAT_R8_USCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R8_USCALED);
pub const VK_FORMAT_R8_SSCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R8_SSCALED);
pub const VK_FORMAT_R8_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R8_UINT);
pub const VK_FORMAT_R8_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R8_SINT);
pub const VK_FORMAT_R8_SRGB = @enumToInt(enum_VkFormat.VK_FORMAT_R8_SRGB);
pub const VK_FORMAT_R8G8_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8_UNORM);
pub const VK_FORMAT_R8G8_SNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8_SNORM);
pub const VK_FORMAT_R8G8_USCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8_USCALED);
pub const VK_FORMAT_R8G8_SSCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8_SSCALED);
pub const VK_FORMAT_R8G8_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8_UINT);
pub const VK_FORMAT_R8G8_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8_SINT);
pub const VK_FORMAT_R8G8_SRGB = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8_SRGB);
pub const VK_FORMAT_R8G8B8_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8_UNORM);
pub const VK_FORMAT_R8G8B8_SNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8_SNORM);
pub const VK_FORMAT_R8G8B8_USCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8_USCALED);
pub const VK_FORMAT_R8G8B8_SSCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8_SSCALED);
pub const VK_FORMAT_R8G8B8_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8_UINT);
pub const VK_FORMAT_R8G8B8_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8_SINT);
pub const VK_FORMAT_R8G8B8_SRGB = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8_SRGB);
pub const VK_FORMAT_B8G8R8_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8_UNORM);
pub const VK_FORMAT_B8G8R8_SNORM = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8_SNORM);
pub const VK_FORMAT_B8G8R8_USCALED = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8_USCALED);
pub const VK_FORMAT_B8G8R8_SSCALED = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8_SSCALED);
pub const VK_FORMAT_B8G8R8_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8_UINT);
pub const VK_FORMAT_B8G8R8_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8_SINT);
pub const VK_FORMAT_B8G8R8_SRGB = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8_SRGB);
pub const VK_FORMAT_R8G8B8A8_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8A8_UNORM);
pub const VK_FORMAT_R8G8B8A8_SNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8A8_SNORM);
pub const VK_FORMAT_R8G8B8A8_USCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8A8_USCALED);
pub const VK_FORMAT_R8G8B8A8_SSCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8A8_SSCALED);
pub const VK_FORMAT_R8G8B8A8_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8A8_UINT);
pub const VK_FORMAT_R8G8B8A8_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8A8_SINT);
pub const VK_FORMAT_R8G8B8A8_SRGB = @enumToInt(enum_VkFormat.VK_FORMAT_R8G8B8A8_SRGB);
pub const VK_FORMAT_B8G8R8A8_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8A8_UNORM);
pub const VK_FORMAT_B8G8R8A8_SNORM = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8A8_SNORM);
pub const VK_FORMAT_B8G8R8A8_USCALED = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8A8_USCALED);
pub const VK_FORMAT_B8G8R8A8_SSCALED = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8A8_SSCALED);
pub const VK_FORMAT_B8G8R8A8_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8A8_UINT);
pub const VK_FORMAT_B8G8R8A8_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8A8_SINT);
pub const VK_FORMAT_B8G8R8A8_SRGB = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8A8_SRGB);
pub const VK_FORMAT_A8B8G8R8_UNORM_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A8B8G8R8_UNORM_PACK32);
pub const VK_FORMAT_A8B8G8R8_SNORM_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A8B8G8R8_SNORM_PACK32);
pub const VK_FORMAT_A8B8G8R8_USCALED_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A8B8G8R8_USCALED_PACK32);
pub const VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A8B8G8R8_SSCALED_PACK32);
pub const VK_FORMAT_A8B8G8R8_UINT_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A8B8G8R8_UINT_PACK32);
pub const VK_FORMAT_A8B8G8R8_SINT_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A8B8G8R8_SINT_PACK32);
pub const VK_FORMAT_A8B8G8R8_SRGB_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A8B8G8R8_SRGB_PACK32);
pub const VK_FORMAT_A2R10G10B10_UNORM_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2R10G10B10_UNORM_PACK32);
pub const VK_FORMAT_A2R10G10B10_SNORM_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2R10G10B10_SNORM_PACK32);
pub const VK_FORMAT_A2R10G10B10_USCALED_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2R10G10B10_USCALED_PACK32);
pub const VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2R10G10B10_SSCALED_PACK32);
pub const VK_FORMAT_A2R10G10B10_UINT_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2R10G10B10_UINT_PACK32);
pub const VK_FORMAT_A2R10G10B10_SINT_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2R10G10B10_SINT_PACK32);
pub const VK_FORMAT_A2B10G10R10_UNORM_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2B10G10R10_UNORM_PACK32);
pub const VK_FORMAT_A2B10G10R10_SNORM_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2B10G10R10_SNORM_PACK32);
pub const VK_FORMAT_A2B10G10R10_USCALED_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2B10G10R10_USCALED_PACK32);
pub const VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2B10G10R10_SSCALED_PACK32);
pub const VK_FORMAT_A2B10G10R10_UINT_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2B10G10R10_UINT_PACK32);
pub const VK_FORMAT_A2B10G10R10_SINT_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_A2B10G10R10_SINT_PACK32);
pub const VK_FORMAT_R16_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R16_UNORM);
pub const VK_FORMAT_R16_SNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R16_SNORM);
pub const VK_FORMAT_R16_USCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R16_USCALED);
pub const VK_FORMAT_R16_SSCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R16_SSCALED);
pub const VK_FORMAT_R16_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R16_UINT);
pub const VK_FORMAT_R16_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R16_SINT);
pub const VK_FORMAT_R16_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R16_SFLOAT);
pub const VK_FORMAT_R16G16_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16_UNORM);
pub const VK_FORMAT_R16G16_SNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16_SNORM);
pub const VK_FORMAT_R16G16_USCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16_USCALED);
pub const VK_FORMAT_R16G16_SSCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16_SSCALED);
pub const VK_FORMAT_R16G16_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16_UINT);
pub const VK_FORMAT_R16G16_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16_SINT);
pub const VK_FORMAT_R16G16_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16_SFLOAT);
pub const VK_FORMAT_R16G16B16_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16_UNORM);
pub const VK_FORMAT_R16G16B16_SNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16_SNORM);
pub const VK_FORMAT_R16G16B16_USCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16_USCALED);
pub const VK_FORMAT_R16G16B16_SSCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16_SSCALED);
pub const VK_FORMAT_R16G16B16_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16_UINT);
pub const VK_FORMAT_R16G16B16_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16_SINT);
pub const VK_FORMAT_R16G16B16_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16_SFLOAT);
pub const VK_FORMAT_R16G16B16A16_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16A16_UNORM);
pub const VK_FORMAT_R16G16B16A16_SNORM = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16A16_SNORM);
pub const VK_FORMAT_R16G16B16A16_USCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16A16_USCALED);
pub const VK_FORMAT_R16G16B16A16_SSCALED = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16A16_SSCALED);
pub const VK_FORMAT_R16G16B16A16_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16A16_UINT);
pub const VK_FORMAT_R16G16B16A16_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16A16_SINT);
pub const VK_FORMAT_R16G16B16A16_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R16G16B16A16_SFLOAT);
pub const VK_FORMAT_R32_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R32_UINT);
pub const VK_FORMAT_R32_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R32_SINT);
pub const VK_FORMAT_R32_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R32_SFLOAT);
pub const VK_FORMAT_R32G32_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R32G32_UINT);
pub const VK_FORMAT_R32G32_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R32G32_SINT);
pub const VK_FORMAT_R32G32_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R32G32_SFLOAT);
pub const VK_FORMAT_R32G32B32_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R32G32B32_UINT);
pub const VK_FORMAT_R32G32B32_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R32G32B32_SINT);
pub const VK_FORMAT_R32G32B32_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R32G32B32_SFLOAT);
pub const VK_FORMAT_R32G32B32A32_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R32G32B32A32_UINT);
pub const VK_FORMAT_R32G32B32A32_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R32G32B32A32_SINT);
pub const VK_FORMAT_R32G32B32A32_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R32G32B32A32_SFLOAT);
pub const VK_FORMAT_R64_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R64_UINT);
pub const VK_FORMAT_R64_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R64_SINT);
pub const VK_FORMAT_R64_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R64_SFLOAT);
pub const VK_FORMAT_R64G64_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R64G64_UINT);
pub const VK_FORMAT_R64G64_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R64G64_SINT);
pub const VK_FORMAT_R64G64_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R64G64_SFLOAT);
pub const VK_FORMAT_R64G64B64_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R64G64B64_UINT);
pub const VK_FORMAT_R64G64B64_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R64G64B64_SINT);
pub const VK_FORMAT_R64G64B64_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R64G64B64_SFLOAT);
pub const VK_FORMAT_R64G64B64A64_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_R64G64B64A64_UINT);
pub const VK_FORMAT_R64G64B64A64_SINT = @enumToInt(enum_VkFormat.VK_FORMAT_R64G64B64A64_SINT);
pub const VK_FORMAT_R64G64B64A64_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_R64G64B64A64_SFLOAT);
pub const VK_FORMAT_B10G11R11_UFLOAT_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_B10G11R11_UFLOAT_PACK32);
pub const VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_E5B9G9R9_UFLOAT_PACK32);
pub const VK_FORMAT_D16_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_D16_UNORM);
pub const VK_FORMAT_X8_D24_UNORM_PACK32 = @enumToInt(enum_VkFormat.VK_FORMAT_X8_D24_UNORM_PACK32);
pub const VK_FORMAT_D32_SFLOAT = @enumToInt(enum_VkFormat.VK_FORMAT_D32_SFLOAT);
pub const VK_FORMAT_S8_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_S8_UINT);
pub const VK_FORMAT_D16_UNORM_S8_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_D16_UNORM_S8_UINT);
pub const VK_FORMAT_D24_UNORM_S8_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_D24_UNORM_S8_UINT);
pub const VK_FORMAT_D32_SFLOAT_S8_UINT = @enumToInt(enum_VkFormat.VK_FORMAT_D32_SFLOAT_S8_UINT);
pub const VK_FORMAT_BC1_RGB_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC1_RGB_UNORM_BLOCK);
pub const VK_FORMAT_BC1_RGB_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC1_RGB_SRGB_BLOCK);
pub const VK_FORMAT_BC1_RGBA_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC1_RGBA_UNORM_BLOCK);
pub const VK_FORMAT_BC1_RGBA_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC1_RGBA_SRGB_BLOCK);
pub const VK_FORMAT_BC2_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC2_UNORM_BLOCK);
pub const VK_FORMAT_BC2_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC2_SRGB_BLOCK);
pub const VK_FORMAT_BC3_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC3_UNORM_BLOCK);
pub const VK_FORMAT_BC3_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC3_SRGB_BLOCK);
pub const VK_FORMAT_BC4_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC4_UNORM_BLOCK);
pub const VK_FORMAT_BC4_SNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC4_SNORM_BLOCK);
pub const VK_FORMAT_BC5_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC5_UNORM_BLOCK);
pub const VK_FORMAT_BC5_SNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC5_SNORM_BLOCK);
pub const VK_FORMAT_BC6H_UFLOAT_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC6H_UFLOAT_BLOCK);
pub const VK_FORMAT_BC6H_SFLOAT_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC6H_SFLOAT_BLOCK);
pub const VK_FORMAT_BC7_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC7_UNORM_BLOCK);
pub const VK_FORMAT_BC7_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_BC7_SRGB_BLOCK);
pub const VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK);
pub const VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK);
pub const VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK);
pub const VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK);
pub const VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK);
pub const VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK);
pub const VK_FORMAT_EAC_R11_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_EAC_R11_UNORM_BLOCK);
pub const VK_FORMAT_EAC_R11_SNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_EAC_R11_SNORM_BLOCK);
pub const VK_FORMAT_EAC_R11G11_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_EAC_R11G11_UNORM_BLOCK);
pub const VK_FORMAT_EAC_R11G11_SNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_EAC_R11G11_SNORM_BLOCK);
pub const VK_FORMAT_ASTC_4x4_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_4x4_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_4x4_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_4x4_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_5x4_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_5x4_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_5x4_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_5x4_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_5x5_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_5x5_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_5x5_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_5x5_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_6x5_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_6x5_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_6x5_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_6x5_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_6x6_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_6x6_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_6x6_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_6x6_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_8x5_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_8x5_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_8x5_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_8x5_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_8x6_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_8x6_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_8x6_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_8x6_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_8x8_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_8x8_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_8x8_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_8x8_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_10x5_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x5_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_10x5_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x5_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_10x6_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x6_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_10x6_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x6_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_10x8_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x8_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_10x8_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x8_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_10x10_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x10_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_10x10_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x10_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_12x10_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_12x10_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_12x10_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_12x10_SRGB_BLOCK);
pub const VK_FORMAT_ASTC_12x12_UNORM_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_12x12_UNORM_BLOCK);
pub const VK_FORMAT_ASTC_12x12_SRGB_BLOCK = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_12x12_SRGB_BLOCK);
pub const VK_FORMAT_G8B8G8R8_422_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G8B8G8R8_422_UNORM);
pub const VK_FORMAT_B8G8R8G8_422_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8G8_422_UNORM);
pub const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM);
pub const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G8_B8R8_2PLANE_420_UNORM);
pub const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM);
pub const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G8_B8R8_2PLANE_422_UNORM);
pub const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM);
pub const VK_FORMAT_R10X6_UNORM_PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_R10X6_UNORM_PACK16);
pub const VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_R10X6G10X6_UNORM_2PACK16);
pub const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16);
pub const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16);
pub const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16);
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16);
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16);
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16);
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16);
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16);
pub const VK_FORMAT_R12X4_UNORM_PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_R12X4_UNORM_PACK16);
pub const VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_R12X4G12X4_UNORM_2PACK16);
pub const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16);
pub const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16);
pub const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16);
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16);
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16);
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16);
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16);
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16);
pub const VK_FORMAT_G16B16G16R16_422_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G16B16G16R16_422_UNORM);
pub const VK_FORMAT_B16G16R16G16_422_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_B16G16R16G16_422_UNORM);
pub const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM);
pub const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G16_B16R16_2PLANE_420_UNORM);
pub const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM);
pub const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G16_B16R16_2PLANE_422_UNORM);
pub const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = @enumToInt(enum_VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM);
pub const VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = @enumToInt(enum_VkFormat.VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG);
pub const VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = @enumToInt(enum_VkFormat.VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG);
pub const VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = @enumToInt(enum_VkFormat.VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG);
pub const VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = @enumToInt(enum_VkFormat.VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG);
pub const VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = @enumToInt(enum_VkFormat.VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG);
pub const VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = @enumToInt(enum_VkFormat.VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG);
pub const VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = @enumToInt(enum_VkFormat.VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG);
pub const VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = @enumToInt(enum_VkFormat.VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG);
pub const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = @enumToInt(enum_VkFormat.VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT);
pub const VK_FORMAT_G8B8G8R8_422_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G8B8G8R8_422_UNORM_KHR);
pub const VK_FORMAT_B8G8R8G8_422_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_B8G8R8G8_422_UNORM_KHR);
pub const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR);
pub const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR);
pub const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR);
pub const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR);
pub const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR);
pub const VK_FORMAT_R10X6_UNORM_PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_R10X6_UNORM_PACK16_KHR);
pub const VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR);
pub const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR);
pub const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR);
pub const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR);
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR);
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR);
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR);
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR);
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR);
pub const VK_FORMAT_R12X4_UNORM_PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_R12X4_UNORM_PACK16_KHR);
pub const VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR);
pub const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR);
pub const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR);
pub const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR);
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR);
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR);
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR);
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR);
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR);
pub const VK_FORMAT_G16B16G16R16_422_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G16B16G16R16_422_UNORM_KHR);
pub const VK_FORMAT_B16G16R16G16_422_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_B16G16R16G16_422_UNORM_KHR);
pub const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR);
pub const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR);
pub const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR);
pub const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR);
pub const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = @enumToInt(enum_VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR);
pub const VK_FORMAT_BEGIN_RANGE = @enumToInt(enum_VkFormat.VK_FORMAT_BEGIN_RANGE);
pub const VK_FORMAT_END_RANGE = @enumToInt(enum_VkFormat.VK_FORMAT_END_RANGE);
pub const VK_FORMAT_RANGE_SIZE = @enumToInt(enum_VkFormat.VK_FORMAT_RANGE_SIZE);
pub const VK_FORMAT_MAX_ENUM = @enumToInt(enum_VkFormat.VK_FORMAT_MAX_ENUM);
pub const enum_VkFormat = extern enum(c_int) {
    VK_FORMAT_UNDEFINED = 0,
    VK_FORMAT_R4G4_UNORM_PACK8 = 1,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
    VK_FORMAT_R8_UNORM = 9,
    VK_FORMAT_R8_SNORM = 10,
    VK_FORMAT_R8_USCALED = 11,
    VK_FORMAT_R8_SSCALED = 12,
    VK_FORMAT_R8_UINT = 13,
    VK_FORMAT_R8_SINT = 14,
    VK_FORMAT_R8_SRGB = 15,
    VK_FORMAT_R8G8_UNORM = 16,
    VK_FORMAT_R8G8_SNORM = 17,
    VK_FORMAT_R8G8_USCALED = 18,
    VK_FORMAT_R8G8_SSCALED = 19,
    VK_FORMAT_R8G8_UINT = 20,
    VK_FORMAT_R8G8_SINT = 21,
    VK_FORMAT_R8G8_SRGB = 22,
    VK_FORMAT_R8G8B8_UNORM = 23,
    VK_FORMAT_R8G8B8_SNORM = 24,
    VK_FORMAT_R8G8B8_USCALED = 25,
    VK_FORMAT_R8G8B8_SSCALED = 26,
    VK_FORMAT_R8G8B8_UINT = 27,
    VK_FORMAT_R8G8B8_SINT = 28,
    VK_FORMAT_R8G8B8_SRGB = 29,
    VK_FORMAT_B8G8R8_UNORM = 30,
    VK_FORMAT_B8G8R8_SNORM = 31,
    VK_FORMAT_B8G8R8_USCALED = 32,
    VK_FORMAT_B8G8R8_SSCALED = 33,
    VK_FORMAT_B8G8R8_UINT = 34,
    VK_FORMAT_B8G8R8_SINT = 35,
    VK_FORMAT_B8G8R8_SRGB = 36,
    VK_FORMAT_R8G8B8A8_UNORM = 37,
    VK_FORMAT_R8G8B8A8_SNORM = 38,
    VK_FORMAT_R8G8B8A8_USCALED = 39,
    VK_FORMAT_R8G8B8A8_SSCALED = 40,
    VK_FORMAT_R8G8B8A8_UINT = 41,
    VK_FORMAT_R8G8B8A8_SINT = 42,
    VK_FORMAT_R8G8B8A8_SRGB = 43,
    VK_FORMAT_B8G8R8A8_UNORM = 44,
    VK_FORMAT_B8G8R8A8_SNORM = 45,
    VK_FORMAT_B8G8R8A8_USCALED = 46,
    VK_FORMAT_B8G8R8A8_SSCALED = 47,
    VK_FORMAT_B8G8R8A8_UINT = 48,
    VK_FORMAT_B8G8R8A8_SINT = 49,
    VK_FORMAT_B8G8R8A8_SRGB = 50,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
    VK_FORMAT_R16_UNORM = 70,
    VK_FORMAT_R16_SNORM = 71,
    VK_FORMAT_R16_USCALED = 72,
    VK_FORMAT_R16_SSCALED = 73,
    VK_FORMAT_R16_UINT = 74,
    VK_FORMAT_R16_SINT = 75,
    VK_FORMAT_R16_SFLOAT = 76,
    VK_FORMAT_R16G16_UNORM = 77,
    VK_FORMAT_R16G16_SNORM = 78,
    VK_FORMAT_R16G16_USCALED = 79,
    VK_FORMAT_R16G16_SSCALED = 80,
    VK_FORMAT_R16G16_UINT = 81,
    VK_FORMAT_R16G16_SINT = 82,
    VK_FORMAT_R16G16_SFLOAT = 83,
    VK_FORMAT_R16G16B16_UNORM = 84,
    VK_FORMAT_R16G16B16_SNORM = 85,
    VK_FORMAT_R16G16B16_USCALED = 86,
    VK_FORMAT_R16G16B16_SSCALED = 87,
    VK_FORMAT_R16G16B16_UINT = 88,
    VK_FORMAT_R16G16B16_SINT = 89,
    VK_FORMAT_R16G16B16_SFLOAT = 90,
    VK_FORMAT_R16G16B16A16_UNORM = 91,
    VK_FORMAT_R16G16B16A16_SNORM = 92,
    VK_FORMAT_R16G16B16A16_USCALED = 93,
    VK_FORMAT_R16G16B16A16_SSCALED = 94,
    VK_FORMAT_R16G16B16A16_UINT = 95,
    VK_FORMAT_R16G16B16A16_SINT = 96,
    VK_FORMAT_R16G16B16A16_SFLOAT = 97,
    VK_FORMAT_R32_UINT = 98,
    VK_FORMAT_R32_SINT = 99,
    VK_FORMAT_R32_SFLOAT = 100,
    VK_FORMAT_R32G32_UINT = 101,
    VK_FORMAT_R32G32_SINT = 102,
    VK_FORMAT_R32G32_SFLOAT = 103,
    VK_FORMAT_R32G32B32_UINT = 104,
    VK_FORMAT_R32G32B32_SINT = 105,
    VK_FORMAT_R32G32B32_SFLOAT = 106,
    VK_FORMAT_R32G32B32A32_UINT = 107,
    VK_FORMAT_R32G32B32A32_SINT = 108,
    VK_FORMAT_R32G32B32A32_SFLOAT = 109,
    VK_FORMAT_R64_UINT = 110,
    VK_FORMAT_R64_SINT = 111,
    VK_FORMAT_R64_SFLOAT = 112,
    VK_FORMAT_R64G64_UINT = 113,
    VK_FORMAT_R64G64_SINT = 114,
    VK_FORMAT_R64G64_SFLOAT = 115,
    VK_FORMAT_R64G64B64_UINT = 116,
    VK_FORMAT_R64G64B64_SINT = 117,
    VK_FORMAT_R64G64B64_SFLOAT = 118,
    VK_FORMAT_R64G64B64A64_UINT = 119,
    VK_FORMAT_R64G64B64A64_SINT = 120,
    VK_FORMAT_R64G64B64A64_SFLOAT = 121,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
    VK_FORMAT_D16_UNORM = 124,
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
    VK_FORMAT_D32_SFLOAT = 126,
    VK_FORMAT_S8_UINT = 127,
    VK_FORMAT_D16_UNORM_S8_UINT = 128,
    VK_FORMAT_D24_UNORM_S8_UINT = 129,
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
    VK_FORMAT_BC2_UNORM_BLOCK = 135,
    VK_FORMAT_BC2_SRGB_BLOCK = 136,
    VK_FORMAT_BC3_UNORM_BLOCK = 137,
    VK_FORMAT_BC3_SRGB_BLOCK = 138,
    VK_FORMAT_BC4_UNORM_BLOCK = 139,
    VK_FORMAT_BC4_SNORM_BLOCK = 140,
    VK_FORMAT_BC5_UNORM_BLOCK = 141,
    VK_FORMAT_BC5_SNORM_BLOCK = 142,
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
    VK_FORMAT_BC7_UNORM_BLOCK = 145,
    VK_FORMAT_BC7_SRGB_BLOCK = 146,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000,
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001,
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002,
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003,
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004,
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005,
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006,
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007,
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008,
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009,
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010,
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011,
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012,
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013,
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR = 1000156000,
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR = 1000156001,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = 1000156002,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = 1000156003,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = 1000156004,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = 1000156005,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = 1000156006,
    VK_FORMAT_R10X6_UNORM_PACK16_KHR = 1000156007,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = 1000156011,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = 1000156012,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = 1000156013,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = 1000156014,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = 1000156015,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = 1000156016,
    VK_FORMAT_R12X4_UNORM_PACK16_KHR = 1000156017,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = 1000156021,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = 1000156022,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = 1000156023,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = 1000156024,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = 1000156025,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = 1000156026,
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR = 1000156027,
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR = 1000156028,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = 1000156029,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = 1000156030,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = 1000156031,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = 1000156032,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = 1000156033,
    VK_FORMAT_BEGIN_RANGE = 0,
    VK_FORMAT_END_RANGE = 184,
    VK_FORMAT_RANGE_SIZE = 185,
    VK_FORMAT_MAX_ENUM = 2147483647,
    _,
};
pub const VkFormat = enum_VkFormat;
pub const VK_IMAGE_TYPE_1D = @enumToInt(enum_VkImageType.VK_IMAGE_TYPE_1D);
pub const VK_IMAGE_TYPE_2D = @enumToInt(enum_VkImageType.VK_IMAGE_TYPE_2D);
pub const VK_IMAGE_TYPE_3D = @enumToInt(enum_VkImageType.VK_IMAGE_TYPE_3D);
pub const VK_IMAGE_TYPE_BEGIN_RANGE = @enumToInt(enum_VkImageType.VK_IMAGE_TYPE_BEGIN_RANGE);
pub const VK_IMAGE_TYPE_END_RANGE = @enumToInt(enum_VkImageType.VK_IMAGE_TYPE_END_RANGE);
pub const VK_IMAGE_TYPE_RANGE_SIZE = @enumToInt(enum_VkImageType.VK_IMAGE_TYPE_RANGE_SIZE);
pub const VK_IMAGE_TYPE_MAX_ENUM = @enumToInt(enum_VkImageType.VK_IMAGE_TYPE_MAX_ENUM);
pub const enum_VkImageType = extern enum(c_int) {
    VK_IMAGE_TYPE_1D = 0,
    VK_IMAGE_TYPE_2D = 1,
    VK_IMAGE_TYPE_3D = 2,
    VK_IMAGE_TYPE_BEGIN_RANGE = 0,
    VK_IMAGE_TYPE_END_RANGE = 2,
    VK_IMAGE_TYPE_RANGE_SIZE = 3,
    VK_IMAGE_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const VkImageType = enum_VkImageType;
pub const VK_IMAGE_TILING_OPTIMAL = @enumToInt(enum_VkImageTiling.VK_IMAGE_TILING_OPTIMAL);
pub const VK_IMAGE_TILING_LINEAR = @enumToInt(enum_VkImageTiling.VK_IMAGE_TILING_LINEAR);
pub const VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = @enumToInt(enum_VkImageTiling.VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT);
pub const VK_IMAGE_TILING_BEGIN_RANGE = @enumToInt(enum_VkImageTiling.VK_IMAGE_TILING_BEGIN_RANGE);
pub const VK_IMAGE_TILING_END_RANGE = @enumToInt(enum_VkImageTiling.VK_IMAGE_TILING_END_RANGE);
pub const VK_IMAGE_TILING_RANGE_SIZE = @enumToInt(enum_VkImageTiling.VK_IMAGE_TILING_RANGE_SIZE);
pub const VK_IMAGE_TILING_MAX_ENUM = @enumToInt(enum_VkImageTiling.VK_IMAGE_TILING_MAX_ENUM);
pub const enum_VkImageTiling = extern enum(c_int) {
    VK_IMAGE_TILING_OPTIMAL = 0,
    VK_IMAGE_TILING_LINEAR = 1,
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
    VK_IMAGE_TILING_BEGIN_RANGE = 0,
    VK_IMAGE_TILING_END_RANGE = 1,
    VK_IMAGE_TILING_RANGE_SIZE = 2,
    VK_IMAGE_TILING_MAX_ENUM = 2147483647,
    _,
};
pub const VkImageTiling = enum_VkImageTiling;
pub const VK_PHYSICAL_DEVICE_TYPE_OTHER = @enumToInt(enum_VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_OTHER);
pub const VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = @enumToInt(enum_VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU);
pub const VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = @enumToInt(enum_VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU);
pub const VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = @enumToInt(enum_VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU);
pub const VK_PHYSICAL_DEVICE_TYPE_CPU = @enumToInt(enum_VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_CPU);
pub const VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE = @enumToInt(enum_VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE);
pub const VK_PHYSICAL_DEVICE_TYPE_END_RANGE = @enumToInt(enum_VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_END_RANGE);
pub const VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE = @enumToInt(enum_VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE);
pub const VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = @enumToInt(enum_VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM);
pub const enum_VkPhysicalDeviceType = extern enum(c_int) {
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
    VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE = 0,
    VK_PHYSICAL_DEVICE_TYPE_END_RANGE = 4,
    VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE = 5,
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const VkPhysicalDeviceType = enum_VkPhysicalDeviceType;
pub const VK_QUERY_TYPE_OCCLUSION = @enumToInt(enum_VkQueryType.VK_QUERY_TYPE_OCCLUSION);
pub const VK_QUERY_TYPE_PIPELINE_STATISTICS = @enumToInt(enum_VkQueryType.VK_QUERY_TYPE_PIPELINE_STATISTICS);
pub const VK_QUERY_TYPE_TIMESTAMP = @enumToInt(enum_VkQueryType.VK_QUERY_TYPE_TIMESTAMP);
pub const VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = @enumToInt(enum_VkQueryType.VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT);
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = @enumToInt(enum_VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV);
pub const VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = @enumToInt(enum_VkQueryType.VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL);
pub const VK_QUERY_TYPE_BEGIN_RANGE = @enumToInt(enum_VkQueryType.VK_QUERY_TYPE_BEGIN_RANGE);
pub const VK_QUERY_TYPE_END_RANGE = @enumToInt(enum_VkQueryType.VK_QUERY_TYPE_END_RANGE);
pub const VK_QUERY_TYPE_RANGE_SIZE = @enumToInt(enum_VkQueryType.VK_QUERY_TYPE_RANGE_SIZE);
pub const VK_QUERY_TYPE_MAX_ENUM = @enumToInt(enum_VkQueryType.VK_QUERY_TYPE_MAX_ENUM);
pub const enum_VkQueryType = extern enum(c_int) {
    VK_QUERY_TYPE_OCCLUSION = 0,
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
    VK_QUERY_TYPE_TIMESTAMP = 2,
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
    VK_QUERY_TYPE_BEGIN_RANGE = 0,
    VK_QUERY_TYPE_END_RANGE = 2,
    VK_QUERY_TYPE_RANGE_SIZE = 3,
    VK_QUERY_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const VkQueryType = enum_VkQueryType;
pub const VK_SHARING_MODE_EXCLUSIVE = @enumToInt(enum_VkSharingMode.VK_SHARING_MODE_EXCLUSIVE);
pub const VK_SHARING_MODE_CONCURRENT = @enumToInt(enum_VkSharingMode.VK_SHARING_MODE_CONCURRENT);
pub const VK_SHARING_MODE_BEGIN_RANGE = @enumToInt(enum_VkSharingMode.VK_SHARING_MODE_BEGIN_RANGE);
pub const VK_SHARING_MODE_END_RANGE = @enumToInt(enum_VkSharingMode.VK_SHARING_MODE_END_RANGE);
pub const VK_SHARING_MODE_RANGE_SIZE = @enumToInt(enum_VkSharingMode.VK_SHARING_MODE_RANGE_SIZE);
pub const VK_SHARING_MODE_MAX_ENUM = @enumToInt(enum_VkSharingMode.VK_SHARING_MODE_MAX_ENUM);
pub const enum_VkSharingMode = extern enum(c_int) {
    VK_SHARING_MODE_EXCLUSIVE = 0,
    VK_SHARING_MODE_CONCURRENT = 1,
    VK_SHARING_MODE_BEGIN_RANGE = 0,
    VK_SHARING_MODE_END_RANGE = 1,
    VK_SHARING_MODE_RANGE_SIZE = 2,
    VK_SHARING_MODE_MAX_ENUM = 2147483647,
    _,
};
pub const VkSharingMode = enum_VkSharingMode;
pub const VK_IMAGE_LAYOUT_UNDEFINED = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_UNDEFINED);
pub const VK_IMAGE_LAYOUT_GENERAL = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_GENERAL);
pub const VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL);
pub const VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL);
pub const VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL);
pub const VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);
pub const VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL);
pub const VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL);
pub const VK_IMAGE_LAYOUT_PREINITIALIZED = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_PREINITIALIZED);
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL);
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL);
pub const VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_PRESENT_SRC_KHR);
pub const VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR);
pub const VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV);
pub const VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT);
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR);
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR);
pub const VK_IMAGE_LAYOUT_BEGIN_RANGE = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_BEGIN_RANGE);
pub const VK_IMAGE_LAYOUT_END_RANGE = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_END_RANGE);
pub const VK_IMAGE_LAYOUT_RANGE_SIZE = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_RANGE_SIZE);
pub const VK_IMAGE_LAYOUT_MAX_ENUM = @enumToInt(enum_VkImageLayout.VK_IMAGE_LAYOUT_MAX_ENUM);
pub const enum_VkImageLayout = extern enum(c_int) {
    VK_IMAGE_LAYOUT_UNDEFINED = 0,
    VK_IMAGE_LAYOUT_GENERAL = 1,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001,
    VK_IMAGE_LAYOUT_BEGIN_RANGE = 0,
    VK_IMAGE_LAYOUT_END_RANGE = 8,
    VK_IMAGE_LAYOUT_RANGE_SIZE = 9,
    VK_IMAGE_LAYOUT_MAX_ENUM = 2147483647,
    _,
};
pub const VkImageLayout = enum_VkImageLayout;
pub const VK_IMAGE_VIEW_TYPE_1D = @enumToInt(enum_VkImageViewType.VK_IMAGE_VIEW_TYPE_1D);
pub const VK_IMAGE_VIEW_TYPE_2D = @enumToInt(enum_VkImageViewType.VK_IMAGE_VIEW_TYPE_2D);
pub const VK_IMAGE_VIEW_TYPE_3D = @enumToInt(enum_VkImageViewType.VK_IMAGE_VIEW_TYPE_3D);
pub const VK_IMAGE_VIEW_TYPE_CUBE = @enumToInt(enum_VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE);
pub const VK_IMAGE_VIEW_TYPE_1D_ARRAY = @enumToInt(enum_VkImageViewType.VK_IMAGE_VIEW_TYPE_1D_ARRAY);
pub const VK_IMAGE_VIEW_TYPE_2D_ARRAY = @enumToInt(enum_VkImageViewType.VK_IMAGE_VIEW_TYPE_2D_ARRAY);
pub const VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = @enumToInt(enum_VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE_ARRAY);
pub const VK_IMAGE_VIEW_TYPE_BEGIN_RANGE = @enumToInt(enum_VkImageViewType.VK_IMAGE_VIEW_TYPE_BEGIN_RANGE);
pub const VK_IMAGE_VIEW_TYPE_END_RANGE = @enumToInt(enum_VkImageViewType.VK_IMAGE_VIEW_TYPE_END_RANGE);
pub const VK_IMAGE_VIEW_TYPE_RANGE_SIZE = @enumToInt(enum_VkImageViewType.VK_IMAGE_VIEW_TYPE_RANGE_SIZE);
pub const VK_IMAGE_VIEW_TYPE_MAX_ENUM = @enumToInt(enum_VkImageViewType.VK_IMAGE_VIEW_TYPE_MAX_ENUM);
pub const enum_VkImageViewType = extern enum(c_int) {
    VK_IMAGE_VIEW_TYPE_1D = 0,
    VK_IMAGE_VIEW_TYPE_2D = 1,
    VK_IMAGE_VIEW_TYPE_3D = 2,
    VK_IMAGE_VIEW_TYPE_CUBE = 3,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
    VK_IMAGE_VIEW_TYPE_BEGIN_RANGE = 0,
    VK_IMAGE_VIEW_TYPE_END_RANGE = 6,
    VK_IMAGE_VIEW_TYPE_RANGE_SIZE = 7,
    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const VkImageViewType = enum_VkImageViewType;
pub const VK_COMPONENT_SWIZZLE_IDENTITY = @enumToInt(enum_VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY);
pub const VK_COMPONENT_SWIZZLE_ZERO = @enumToInt(enum_VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ZERO);
pub const VK_COMPONENT_SWIZZLE_ONE = @enumToInt(enum_VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ONE);
pub const VK_COMPONENT_SWIZZLE_R = @enumToInt(enum_VkComponentSwizzle.VK_COMPONENT_SWIZZLE_R);
pub const VK_COMPONENT_SWIZZLE_G = @enumToInt(enum_VkComponentSwizzle.VK_COMPONENT_SWIZZLE_G);
pub const VK_COMPONENT_SWIZZLE_B = @enumToInt(enum_VkComponentSwizzle.VK_COMPONENT_SWIZZLE_B);
pub const VK_COMPONENT_SWIZZLE_A = @enumToInt(enum_VkComponentSwizzle.VK_COMPONENT_SWIZZLE_A);
pub const VK_COMPONENT_SWIZZLE_BEGIN_RANGE = @enumToInt(enum_VkComponentSwizzle.VK_COMPONENT_SWIZZLE_BEGIN_RANGE);
pub const VK_COMPONENT_SWIZZLE_END_RANGE = @enumToInt(enum_VkComponentSwizzle.VK_COMPONENT_SWIZZLE_END_RANGE);
pub const VK_COMPONENT_SWIZZLE_RANGE_SIZE = @enumToInt(enum_VkComponentSwizzle.VK_COMPONENT_SWIZZLE_RANGE_SIZE);
pub const VK_COMPONENT_SWIZZLE_MAX_ENUM = @enumToInt(enum_VkComponentSwizzle.VK_COMPONENT_SWIZZLE_MAX_ENUM);
pub const enum_VkComponentSwizzle = extern enum(c_int) {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    VK_COMPONENT_SWIZZLE_ZERO = 1,
    VK_COMPONENT_SWIZZLE_ONE = 2,
    VK_COMPONENT_SWIZZLE_R = 3,
    VK_COMPONENT_SWIZZLE_G = 4,
    VK_COMPONENT_SWIZZLE_B = 5,
    VK_COMPONENT_SWIZZLE_A = 6,
    VK_COMPONENT_SWIZZLE_BEGIN_RANGE = 0,
    VK_COMPONENT_SWIZZLE_END_RANGE = 6,
    VK_COMPONENT_SWIZZLE_RANGE_SIZE = 7,
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 2147483647,
    _,
};
pub const VkComponentSwizzle = enum_VkComponentSwizzle;
pub const VK_VERTEX_INPUT_RATE_VERTEX = @enumToInt(enum_VkVertexInputRate.VK_VERTEX_INPUT_RATE_VERTEX);
pub const VK_VERTEX_INPUT_RATE_INSTANCE = @enumToInt(enum_VkVertexInputRate.VK_VERTEX_INPUT_RATE_INSTANCE);
pub const VK_VERTEX_INPUT_RATE_BEGIN_RANGE = @enumToInt(enum_VkVertexInputRate.VK_VERTEX_INPUT_RATE_BEGIN_RANGE);
pub const VK_VERTEX_INPUT_RATE_END_RANGE = @enumToInt(enum_VkVertexInputRate.VK_VERTEX_INPUT_RATE_END_RANGE);
pub const VK_VERTEX_INPUT_RATE_RANGE_SIZE = @enumToInt(enum_VkVertexInputRate.VK_VERTEX_INPUT_RATE_RANGE_SIZE);
pub const VK_VERTEX_INPUT_RATE_MAX_ENUM = @enumToInt(enum_VkVertexInputRate.VK_VERTEX_INPUT_RATE_MAX_ENUM);
pub const enum_VkVertexInputRate = extern enum(c_int) {
    VK_VERTEX_INPUT_RATE_VERTEX = 0,
    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
    VK_VERTEX_INPUT_RATE_BEGIN_RANGE = 0,
    VK_VERTEX_INPUT_RATE_END_RANGE = 1,
    VK_VERTEX_INPUT_RATE_RANGE_SIZE = 2,
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 2147483647,
    _,
};
pub const VkVertexInputRate = enum_VkVertexInputRate;
pub const VK_PRIMITIVE_TOPOLOGY_POINT_LIST = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_POINT_LIST);
pub const VK_PRIMITIVE_TOPOLOGY_LINE_LIST = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST);
pub const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP);
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST);
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP);
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN);
pub const VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY);
pub const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY);
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY);
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY);
pub const VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_PATCH_LIST);
pub const VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE);
pub const VK_PRIMITIVE_TOPOLOGY_END_RANGE = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_END_RANGE);
pub const VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE);
pub const VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = @enumToInt(enum_VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_MAX_ENUM);
pub const enum_VkPrimitiveTopology = extern enum(c_int) {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
    VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE = 0,
    VK_PRIMITIVE_TOPOLOGY_END_RANGE = 10,
    VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE = 11,
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647,
    _,
};
pub const VkPrimitiveTopology = enum_VkPrimitiveTopology;
pub const VK_POLYGON_MODE_FILL = @enumToInt(enum_VkPolygonMode.VK_POLYGON_MODE_FILL);
pub const VK_POLYGON_MODE_LINE = @enumToInt(enum_VkPolygonMode.VK_POLYGON_MODE_LINE);
pub const VK_POLYGON_MODE_POINT = @enumToInt(enum_VkPolygonMode.VK_POLYGON_MODE_POINT);
pub const VK_POLYGON_MODE_FILL_RECTANGLE_NV = @enumToInt(enum_VkPolygonMode.VK_POLYGON_MODE_FILL_RECTANGLE_NV);
pub const VK_POLYGON_MODE_BEGIN_RANGE = @enumToInt(enum_VkPolygonMode.VK_POLYGON_MODE_BEGIN_RANGE);
pub const VK_POLYGON_MODE_END_RANGE = @enumToInt(enum_VkPolygonMode.VK_POLYGON_MODE_END_RANGE);
pub const VK_POLYGON_MODE_RANGE_SIZE = @enumToInt(enum_VkPolygonMode.VK_POLYGON_MODE_RANGE_SIZE);
pub const VK_POLYGON_MODE_MAX_ENUM = @enumToInt(enum_VkPolygonMode.VK_POLYGON_MODE_MAX_ENUM);
pub const enum_VkPolygonMode = extern enum(c_int) {
    VK_POLYGON_MODE_FILL = 0,
    VK_POLYGON_MODE_LINE = 1,
    VK_POLYGON_MODE_POINT = 2,
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
    VK_POLYGON_MODE_BEGIN_RANGE = 0,
    VK_POLYGON_MODE_END_RANGE = 2,
    VK_POLYGON_MODE_RANGE_SIZE = 3,
    VK_POLYGON_MODE_MAX_ENUM = 2147483647,
    _,
};
pub const VkPolygonMode = enum_VkPolygonMode;
pub const VK_FRONT_FACE_COUNTER_CLOCKWISE = @enumToInt(enum_VkFrontFace.VK_FRONT_FACE_COUNTER_CLOCKWISE);
pub const VK_FRONT_FACE_CLOCKWISE = @enumToInt(enum_VkFrontFace.VK_FRONT_FACE_CLOCKWISE);
pub const VK_FRONT_FACE_BEGIN_RANGE = @enumToInt(enum_VkFrontFace.VK_FRONT_FACE_BEGIN_RANGE);
pub const VK_FRONT_FACE_END_RANGE = @enumToInt(enum_VkFrontFace.VK_FRONT_FACE_END_RANGE);
pub const VK_FRONT_FACE_RANGE_SIZE = @enumToInt(enum_VkFrontFace.VK_FRONT_FACE_RANGE_SIZE);
pub const VK_FRONT_FACE_MAX_ENUM = @enumToInt(enum_VkFrontFace.VK_FRONT_FACE_MAX_ENUM);
pub const enum_VkFrontFace = extern enum(c_int) {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    VK_FRONT_FACE_CLOCKWISE = 1,
    VK_FRONT_FACE_BEGIN_RANGE = 0,
    VK_FRONT_FACE_END_RANGE = 1,
    VK_FRONT_FACE_RANGE_SIZE = 2,
    VK_FRONT_FACE_MAX_ENUM = 2147483647,
    _,
};
pub const VkFrontFace = enum_VkFrontFace;
pub const VK_COMPARE_OP_NEVER = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_NEVER);
pub const VK_COMPARE_OP_LESS = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_LESS);
pub const VK_COMPARE_OP_EQUAL = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_EQUAL);
pub const VK_COMPARE_OP_LESS_OR_EQUAL = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_LESS_OR_EQUAL);
pub const VK_COMPARE_OP_GREATER = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_GREATER);
pub const VK_COMPARE_OP_NOT_EQUAL = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_NOT_EQUAL);
pub const VK_COMPARE_OP_GREATER_OR_EQUAL = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_GREATER_OR_EQUAL);
pub const VK_COMPARE_OP_ALWAYS = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_ALWAYS);
pub const VK_COMPARE_OP_BEGIN_RANGE = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_BEGIN_RANGE);
pub const VK_COMPARE_OP_END_RANGE = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_END_RANGE);
pub const VK_COMPARE_OP_RANGE_SIZE = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_RANGE_SIZE);
pub const VK_COMPARE_OP_MAX_ENUM = @enumToInt(enum_VkCompareOp.VK_COMPARE_OP_MAX_ENUM);
pub const enum_VkCompareOp = extern enum(c_int) {
    VK_COMPARE_OP_NEVER = 0,
    VK_COMPARE_OP_LESS = 1,
    VK_COMPARE_OP_EQUAL = 2,
    VK_COMPARE_OP_LESS_OR_EQUAL = 3,
    VK_COMPARE_OP_GREATER = 4,
    VK_COMPARE_OP_NOT_EQUAL = 5,
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    VK_COMPARE_OP_ALWAYS = 7,
    VK_COMPARE_OP_BEGIN_RANGE = 0,
    VK_COMPARE_OP_END_RANGE = 7,
    VK_COMPARE_OP_RANGE_SIZE = 8,
    VK_COMPARE_OP_MAX_ENUM = 2147483647,
    _,
};
pub const VkCompareOp = enum_VkCompareOp;
pub const VK_STENCIL_OP_KEEP = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_KEEP);
pub const VK_STENCIL_OP_ZERO = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_ZERO);
pub const VK_STENCIL_OP_REPLACE = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_REPLACE);
pub const VK_STENCIL_OP_INCREMENT_AND_CLAMP = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_CLAMP);
pub const VK_STENCIL_OP_DECREMENT_AND_CLAMP = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_CLAMP);
pub const VK_STENCIL_OP_INVERT = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_INVERT);
pub const VK_STENCIL_OP_INCREMENT_AND_WRAP = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_WRAP);
pub const VK_STENCIL_OP_DECREMENT_AND_WRAP = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_WRAP);
pub const VK_STENCIL_OP_BEGIN_RANGE = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_BEGIN_RANGE);
pub const VK_STENCIL_OP_END_RANGE = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_END_RANGE);
pub const VK_STENCIL_OP_RANGE_SIZE = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_RANGE_SIZE);
pub const VK_STENCIL_OP_MAX_ENUM = @enumToInt(enum_VkStencilOp.VK_STENCIL_OP_MAX_ENUM);
pub const enum_VkStencilOp = extern enum(c_int) {
    VK_STENCIL_OP_KEEP = 0,
    VK_STENCIL_OP_ZERO = 1,
    VK_STENCIL_OP_REPLACE = 2,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    VK_STENCIL_OP_INVERT = 5,
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
    VK_STENCIL_OP_BEGIN_RANGE = 0,
    VK_STENCIL_OP_END_RANGE = 7,
    VK_STENCIL_OP_RANGE_SIZE = 8,
    VK_STENCIL_OP_MAX_ENUM = 2147483647,
    _,
};
pub const VkStencilOp = enum_VkStencilOp;
pub const VK_LOGIC_OP_CLEAR = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_CLEAR);
pub const VK_LOGIC_OP_AND = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_AND);
pub const VK_LOGIC_OP_AND_REVERSE = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_AND_REVERSE);
pub const VK_LOGIC_OP_COPY = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_COPY);
pub const VK_LOGIC_OP_AND_INVERTED = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_AND_INVERTED);
pub const VK_LOGIC_OP_NO_OP = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_NO_OP);
pub const VK_LOGIC_OP_XOR = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_XOR);
pub const VK_LOGIC_OP_OR = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_OR);
pub const VK_LOGIC_OP_NOR = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_NOR);
pub const VK_LOGIC_OP_EQUIVALENT = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_EQUIVALENT);
pub const VK_LOGIC_OP_INVERT = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_INVERT);
pub const VK_LOGIC_OP_OR_REVERSE = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_OR_REVERSE);
pub const VK_LOGIC_OP_COPY_INVERTED = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_COPY_INVERTED);
pub const VK_LOGIC_OP_OR_INVERTED = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_OR_INVERTED);
pub const VK_LOGIC_OP_NAND = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_NAND);
pub const VK_LOGIC_OP_SET = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_SET);
pub const VK_LOGIC_OP_BEGIN_RANGE = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_BEGIN_RANGE);
pub const VK_LOGIC_OP_END_RANGE = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_END_RANGE);
pub const VK_LOGIC_OP_RANGE_SIZE = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_RANGE_SIZE);
pub const VK_LOGIC_OP_MAX_ENUM = @enumToInt(enum_VkLogicOp.VK_LOGIC_OP_MAX_ENUM);
pub const enum_VkLogicOp = extern enum(c_int) {
    VK_LOGIC_OP_CLEAR = 0,
    VK_LOGIC_OP_AND = 1,
    VK_LOGIC_OP_AND_REVERSE = 2,
    VK_LOGIC_OP_COPY = 3,
    VK_LOGIC_OP_AND_INVERTED = 4,
    VK_LOGIC_OP_NO_OP = 5,
    VK_LOGIC_OP_XOR = 6,
    VK_LOGIC_OP_OR = 7,
    VK_LOGIC_OP_NOR = 8,
    VK_LOGIC_OP_EQUIVALENT = 9,
    VK_LOGIC_OP_INVERT = 10,
    VK_LOGIC_OP_OR_REVERSE = 11,
    VK_LOGIC_OP_COPY_INVERTED = 12,
    VK_LOGIC_OP_OR_INVERTED = 13,
    VK_LOGIC_OP_NAND = 14,
    VK_LOGIC_OP_SET = 15,
    VK_LOGIC_OP_BEGIN_RANGE = 0,
    VK_LOGIC_OP_END_RANGE = 15,
    VK_LOGIC_OP_RANGE_SIZE = 16,
    VK_LOGIC_OP_MAX_ENUM = 2147483647,
    _,
};
pub const VkLogicOp = enum_VkLogicOp;
pub const VK_BLEND_FACTOR_ZERO = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_ZERO);
pub const VK_BLEND_FACTOR_ONE = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_ONE);
pub const VK_BLEND_FACTOR_SRC_COLOR = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_SRC_COLOR);
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR);
pub const VK_BLEND_FACTOR_DST_COLOR = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_DST_COLOR);
pub const VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR);
pub const VK_BLEND_FACTOR_SRC_ALPHA = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA);
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA);
pub const VK_BLEND_FACTOR_DST_ALPHA = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_DST_ALPHA);
pub const VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA);
pub const VK_BLEND_FACTOR_CONSTANT_COLOR = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_COLOR);
pub const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR);
pub const VK_BLEND_FACTOR_CONSTANT_ALPHA = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_ALPHA);
pub const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA);
pub const VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA_SATURATE);
pub const VK_BLEND_FACTOR_SRC1_COLOR = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_SRC1_COLOR);
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR);
pub const VK_BLEND_FACTOR_SRC1_ALPHA = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_SRC1_ALPHA);
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA);
pub const VK_BLEND_FACTOR_BEGIN_RANGE = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_BEGIN_RANGE);
pub const VK_BLEND_FACTOR_END_RANGE = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_END_RANGE);
pub const VK_BLEND_FACTOR_RANGE_SIZE = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_RANGE_SIZE);
pub const VK_BLEND_FACTOR_MAX_ENUM = @enumToInt(enum_VkBlendFactor.VK_BLEND_FACTOR_MAX_ENUM);
pub const enum_VkBlendFactor = extern enum(c_int) {
    VK_BLEND_FACTOR_ZERO = 0,
    VK_BLEND_FACTOR_ONE = 1,
    VK_BLEND_FACTOR_SRC_COLOR = 2,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
    VK_BLEND_FACTOR_DST_COLOR = 4,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
    VK_BLEND_FACTOR_SRC_ALPHA = 6,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
    VK_BLEND_FACTOR_DST_ALPHA = 8,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
    VK_BLEND_FACTOR_SRC1_COLOR = 15,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
    VK_BLEND_FACTOR_SRC1_ALPHA = 17,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
    VK_BLEND_FACTOR_BEGIN_RANGE = 0,
    VK_BLEND_FACTOR_END_RANGE = 18,
    VK_BLEND_FACTOR_RANGE_SIZE = 19,
    VK_BLEND_FACTOR_MAX_ENUM = 2147483647,
    _,
};
pub const VkBlendFactor = enum_VkBlendFactor;
pub const VK_BLEND_OP_ADD = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_ADD);
pub const VK_BLEND_OP_SUBTRACT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_SUBTRACT);
pub const VK_BLEND_OP_REVERSE_SUBTRACT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_REVERSE_SUBTRACT);
pub const VK_BLEND_OP_MIN = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_MIN);
pub const VK_BLEND_OP_MAX = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_MAX);
pub const VK_BLEND_OP_ZERO_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_ZERO_EXT);
pub const VK_BLEND_OP_SRC_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_SRC_EXT);
pub const VK_BLEND_OP_DST_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_DST_EXT);
pub const VK_BLEND_OP_SRC_OVER_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_SRC_OVER_EXT);
pub const VK_BLEND_OP_DST_OVER_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_DST_OVER_EXT);
pub const VK_BLEND_OP_SRC_IN_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_SRC_IN_EXT);
pub const VK_BLEND_OP_DST_IN_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_DST_IN_EXT);
pub const VK_BLEND_OP_SRC_OUT_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_SRC_OUT_EXT);
pub const VK_BLEND_OP_DST_OUT_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_DST_OUT_EXT);
pub const VK_BLEND_OP_SRC_ATOP_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_SRC_ATOP_EXT);
pub const VK_BLEND_OP_DST_ATOP_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_DST_ATOP_EXT);
pub const VK_BLEND_OP_XOR_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_XOR_EXT);
pub const VK_BLEND_OP_MULTIPLY_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_MULTIPLY_EXT);
pub const VK_BLEND_OP_SCREEN_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_SCREEN_EXT);
pub const VK_BLEND_OP_OVERLAY_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_OVERLAY_EXT);
pub const VK_BLEND_OP_DARKEN_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_DARKEN_EXT);
pub const VK_BLEND_OP_LIGHTEN_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_LIGHTEN_EXT);
pub const VK_BLEND_OP_COLORDODGE_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_COLORDODGE_EXT);
pub const VK_BLEND_OP_COLORBURN_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_COLORBURN_EXT);
pub const VK_BLEND_OP_HARDLIGHT_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_HARDLIGHT_EXT);
pub const VK_BLEND_OP_SOFTLIGHT_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_SOFTLIGHT_EXT);
pub const VK_BLEND_OP_DIFFERENCE_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_DIFFERENCE_EXT);
pub const VK_BLEND_OP_EXCLUSION_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_EXCLUSION_EXT);
pub const VK_BLEND_OP_INVERT_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_INVERT_EXT);
pub const VK_BLEND_OP_INVERT_RGB_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_INVERT_RGB_EXT);
pub const VK_BLEND_OP_LINEARDODGE_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_LINEARDODGE_EXT);
pub const VK_BLEND_OP_LINEARBURN_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_LINEARBURN_EXT);
pub const VK_BLEND_OP_VIVIDLIGHT_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_VIVIDLIGHT_EXT);
pub const VK_BLEND_OP_LINEARLIGHT_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_LINEARLIGHT_EXT);
pub const VK_BLEND_OP_PINLIGHT_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_PINLIGHT_EXT);
pub const VK_BLEND_OP_HARDMIX_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_HARDMIX_EXT);
pub const VK_BLEND_OP_HSL_HUE_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_HSL_HUE_EXT);
pub const VK_BLEND_OP_HSL_SATURATION_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_HSL_SATURATION_EXT);
pub const VK_BLEND_OP_HSL_COLOR_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_HSL_COLOR_EXT);
pub const VK_BLEND_OP_HSL_LUMINOSITY_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_HSL_LUMINOSITY_EXT);
pub const VK_BLEND_OP_PLUS_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_PLUS_EXT);
pub const VK_BLEND_OP_PLUS_CLAMPED_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_EXT);
pub const VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT);
pub const VK_BLEND_OP_PLUS_DARKER_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_PLUS_DARKER_EXT);
pub const VK_BLEND_OP_MINUS_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_MINUS_EXT);
pub const VK_BLEND_OP_MINUS_CLAMPED_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_MINUS_CLAMPED_EXT);
pub const VK_BLEND_OP_CONTRAST_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_CONTRAST_EXT);
pub const VK_BLEND_OP_INVERT_OVG_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_INVERT_OVG_EXT);
pub const VK_BLEND_OP_RED_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_RED_EXT);
pub const VK_BLEND_OP_GREEN_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_GREEN_EXT);
pub const VK_BLEND_OP_BLUE_EXT = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_BLUE_EXT);
pub const VK_BLEND_OP_BEGIN_RANGE = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_BEGIN_RANGE);
pub const VK_BLEND_OP_END_RANGE = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_END_RANGE);
pub const VK_BLEND_OP_RANGE_SIZE = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_RANGE_SIZE);
pub const VK_BLEND_OP_MAX_ENUM = @enumToInt(enum_VkBlendOp.VK_BLEND_OP_MAX_ENUM);
pub const enum_VkBlendOp = extern enum(c_int) {
    VK_BLEND_OP_ADD = 0,
    VK_BLEND_OP_SUBTRACT = 1,
    VK_BLEND_OP_REVERSE_SUBTRACT = 2,
    VK_BLEND_OP_MIN = 3,
    VK_BLEND_OP_MAX = 4,
    VK_BLEND_OP_ZERO_EXT = 1000148000,
    VK_BLEND_OP_SRC_EXT = 1000148001,
    VK_BLEND_OP_DST_EXT = 1000148002,
    VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
    VK_BLEND_OP_DST_OVER_EXT = 1000148004,
    VK_BLEND_OP_SRC_IN_EXT = 1000148005,
    VK_BLEND_OP_DST_IN_EXT = 1000148006,
    VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
    VK_BLEND_OP_DST_OUT_EXT = 1000148008,
    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
    VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
    VK_BLEND_OP_XOR_EXT = 1000148011,
    VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
    VK_BLEND_OP_SCREEN_EXT = 1000148013,
    VK_BLEND_OP_OVERLAY_EXT = 1000148014,
    VK_BLEND_OP_DARKEN_EXT = 1000148015,
    VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
    VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
    VK_BLEND_OP_COLORBURN_EXT = 1000148018,
    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
    VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
    VK_BLEND_OP_INVERT_EXT = 1000148023,
    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
    VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
    VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
    VK_BLEND_OP_HARDMIX_EXT = 1000148030,
    VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
    VK_BLEND_OP_PLUS_EXT = 1000148035,
    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
    VK_BLEND_OP_MINUS_EXT = 1000148039,
    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
    VK_BLEND_OP_CONTRAST_EXT = 1000148041,
    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
    VK_BLEND_OP_RED_EXT = 1000148043,
    VK_BLEND_OP_GREEN_EXT = 1000148044,
    VK_BLEND_OP_BLUE_EXT = 1000148045,
    VK_BLEND_OP_BEGIN_RANGE = 0,
    VK_BLEND_OP_END_RANGE = 4,
    VK_BLEND_OP_RANGE_SIZE = 5,
    VK_BLEND_OP_MAX_ENUM = 2147483647,
    _,
};
pub const VkBlendOp = enum_VkBlendOp;
pub const VK_DYNAMIC_STATE_VIEWPORT = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT);
pub const VK_DYNAMIC_STATE_SCISSOR = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_SCISSOR);
pub const VK_DYNAMIC_STATE_LINE_WIDTH = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_LINE_WIDTH);
pub const VK_DYNAMIC_STATE_DEPTH_BIAS = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS);
pub const VK_DYNAMIC_STATE_BLEND_CONSTANTS = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_BLEND_CONSTANTS);
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS);
pub const VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK);
pub const VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_STENCIL_WRITE_MASK);
pub const VK_DYNAMIC_STATE_STENCIL_REFERENCE = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_STENCIL_REFERENCE);
pub const VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV);
pub const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT);
pub const VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT);
pub const VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV);
pub const VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV);
pub const VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV);
pub const VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_LINE_STIPPLE_EXT);
pub const VK_DYNAMIC_STATE_BEGIN_RANGE = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_BEGIN_RANGE);
pub const VK_DYNAMIC_STATE_END_RANGE = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_END_RANGE);
pub const VK_DYNAMIC_STATE_RANGE_SIZE = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_RANGE_SIZE);
pub const VK_DYNAMIC_STATE_MAX_ENUM = @enumToInt(enum_VkDynamicState.VK_DYNAMIC_STATE_MAX_ENUM);
pub const enum_VkDynamicState = extern enum(c_int) {
    VK_DYNAMIC_STATE_VIEWPORT = 0,
    VK_DYNAMIC_STATE_SCISSOR = 1,
    VK_DYNAMIC_STATE_LINE_WIDTH = 2,
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
    VK_DYNAMIC_STATE_BEGIN_RANGE = 0,
    VK_DYNAMIC_STATE_END_RANGE = 8,
    VK_DYNAMIC_STATE_RANGE_SIZE = 9,
    VK_DYNAMIC_STATE_MAX_ENUM = 2147483647,
    _,
};
pub const VkDynamicState = enum_VkDynamicState;
pub const VK_FILTER_NEAREST = @enumToInt(enum_VkFilter.VK_FILTER_NEAREST);
pub const VK_FILTER_LINEAR = @enumToInt(enum_VkFilter.VK_FILTER_LINEAR);
pub const VK_FILTER_CUBIC_IMG = @enumToInt(enum_VkFilter.VK_FILTER_CUBIC_IMG);
pub const VK_FILTER_CUBIC_EXT = @enumToInt(enum_VkFilter.VK_FILTER_CUBIC_EXT);
pub const VK_FILTER_BEGIN_RANGE = @enumToInt(enum_VkFilter.VK_FILTER_BEGIN_RANGE);
pub const VK_FILTER_END_RANGE = @enumToInt(enum_VkFilter.VK_FILTER_END_RANGE);
pub const VK_FILTER_RANGE_SIZE = @enumToInt(enum_VkFilter.VK_FILTER_RANGE_SIZE);
pub const VK_FILTER_MAX_ENUM = @enumToInt(enum_VkFilter.VK_FILTER_MAX_ENUM);
pub const enum_VkFilter = extern enum(c_int) {
    VK_FILTER_NEAREST = 0,
    VK_FILTER_LINEAR = 1,
    VK_FILTER_CUBIC_IMG = 1000015000,
    VK_FILTER_CUBIC_EXT = 1000015000,
    VK_FILTER_BEGIN_RANGE = 0,
    VK_FILTER_END_RANGE = 1,
    VK_FILTER_RANGE_SIZE = 2,
    VK_FILTER_MAX_ENUM = 2147483647,
    _,
};
pub const VkFilter = enum_VkFilter;
pub const VK_SAMPLER_MIPMAP_MODE_NEAREST = @enumToInt(enum_VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_NEAREST);
pub const VK_SAMPLER_MIPMAP_MODE_LINEAR = @enumToInt(enum_VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_LINEAR);
pub const VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE = @enumToInt(enum_VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE);
pub const VK_SAMPLER_MIPMAP_MODE_END_RANGE = @enumToInt(enum_VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_END_RANGE);
pub const VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE = @enumToInt(enum_VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE);
pub const VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = @enumToInt(enum_VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_MAX_ENUM);
pub const enum_VkSamplerMipmapMode = extern enum(c_int) {
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
    VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE = 0,
    VK_SAMPLER_MIPMAP_MODE_END_RANGE = 1,
    VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE = 2,
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647,
    _,
};
pub const VkSamplerMipmapMode = enum_VkSamplerMipmapMode;
pub const VK_SAMPLER_ADDRESS_MODE_REPEAT = @enumToInt(enum_VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_REPEAT);
pub const VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = @enumToInt(enum_VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT);
pub const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = @enumToInt(enum_VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE);
pub const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = @enumToInt(enum_VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER);
pub const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = @enumToInt(enum_VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE);
pub const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = @enumToInt(enum_VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR);
pub const VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE = @enumToInt(enum_VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE);
pub const VK_SAMPLER_ADDRESS_MODE_END_RANGE = @enumToInt(enum_VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_END_RANGE);
pub const VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE = @enumToInt(enum_VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE);
pub const VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = @enumToInt(enum_VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MAX_ENUM);
pub const enum_VkSamplerAddressMode = extern enum(c_int) {
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = 4,
    VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE = 0,
    VK_SAMPLER_ADDRESS_MODE_END_RANGE = 3,
    VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE = 4,
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647,
    _,
};
pub const VkSamplerAddressMode = enum_VkSamplerAddressMode;
pub const VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = @enumToInt(enum_VkBorderColor.VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK);
pub const VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = @enumToInt(enum_VkBorderColor.VK_BORDER_COLOR_INT_TRANSPARENT_BLACK);
pub const VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = @enumToInt(enum_VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK);
pub const VK_BORDER_COLOR_INT_OPAQUE_BLACK = @enumToInt(enum_VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_BLACK);
pub const VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = @enumToInt(enum_VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE);
pub const VK_BORDER_COLOR_INT_OPAQUE_WHITE = @enumToInt(enum_VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_WHITE);
pub const VK_BORDER_COLOR_BEGIN_RANGE = @enumToInt(enum_VkBorderColor.VK_BORDER_COLOR_BEGIN_RANGE);
pub const VK_BORDER_COLOR_END_RANGE = @enumToInt(enum_VkBorderColor.VK_BORDER_COLOR_END_RANGE);
pub const VK_BORDER_COLOR_RANGE_SIZE = @enumToInt(enum_VkBorderColor.VK_BORDER_COLOR_RANGE_SIZE);
pub const VK_BORDER_COLOR_MAX_ENUM = @enumToInt(enum_VkBorderColor.VK_BORDER_COLOR_MAX_ENUM);
pub const enum_VkBorderColor = extern enum(c_int) {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
    VK_BORDER_COLOR_BEGIN_RANGE = 0,
    VK_BORDER_COLOR_END_RANGE = 5,
    VK_BORDER_COLOR_RANGE_SIZE = 6,
    VK_BORDER_COLOR_MAX_ENUM = 2147483647,
    _,
};
pub const VkBorderColor = enum_VkBorderColor;
pub const VK_DESCRIPTOR_TYPE_SAMPLER = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLER);
pub const VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER);
pub const VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE);
pub const VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_IMAGE);
pub const VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER);
pub const VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER);
pub const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER);
pub const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER);
pub const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC);
pub const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC);
pub const VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT);
pub const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT);
pub const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV);
pub const VK_DESCRIPTOR_TYPE_BEGIN_RANGE = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_BEGIN_RANGE);
pub const VK_DESCRIPTOR_TYPE_END_RANGE = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_END_RANGE);
pub const VK_DESCRIPTOR_TYPE_RANGE_SIZE = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_RANGE_SIZE);
pub const VK_DESCRIPTOR_TYPE_MAX_ENUM = @enumToInt(enum_VkDescriptorType.VK_DESCRIPTOR_TYPE_MAX_ENUM);
pub const enum_VkDescriptorType = extern enum(c_int) {
    VK_DESCRIPTOR_TYPE_SAMPLER = 0,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_DESCRIPTOR_TYPE_BEGIN_RANGE = 0,
    VK_DESCRIPTOR_TYPE_END_RANGE = 10,
    VK_DESCRIPTOR_TYPE_RANGE_SIZE = 11,
    VK_DESCRIPTOR_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const VkDescriptorType = enum_VkDescriptorType;
pub const VK_ATTACHMENT_LOAD_OP_LOAD = @enumToInt(enum_VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_LOAD);
pub const VK_ATTACHMENT_LOAD_OP_CLEAR = @enumToInt(enum_VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_CLEAR);
pub const VK_ATTACHMENT_LOAD_OP_DONT_CARE = @enumToInt(enum_VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_DONT_CARE);
pub const VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE = @enumToInt(enum_VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE);
pub const VK_ATTACHMENT_LOAD_OP_END_RANGE = @enumToInt(enum_VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_END_RANGE);
pub const VK_ATTACHMENT_LOAD_OP_RANGE_SIZE = @enumToInt(enum_VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_RANGE_SIZE);
pub const VK_ATTACHMENT_LOAD_OP_MAX_ENUM = @enumToInt(enum_VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_MAX_ENUM);
pub const enum_VkAttachmentLoadOp = extern enum(c_int) {
    VK_ATTACHMENT_LOAD_OP_LOAD = 0,
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
    VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE = 0,
    VK_ATTACHMENT_LOAD_OP_END_RANGE = 2,
    VK_ATTACHMENT_LOAD_OP_RANGE_SIZE = 3,
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647,
    _,
};
pub const VkAttachmentLoadOp = enum_VkAttachmentLoadOp;
pub const VK_ATTACHMENT_STORE_OP_STORE = @enumToInt(enum_VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_STORE);
pub const VK_ATTACHMENT_STORE_OP_DONT_CARE = @enumToInt(enum_VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_DONT_CARE);
pub const VK_ATTACHMENT_STORE_OP_BEGIN_RANGE = @enumToInt(enum_VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_BEGIN_RANGE);
pub const VK_ATTACHMENT_STORE_OP_END_RANGE = @enumToInt(enum_VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_END_RANGE);
pub const VK_ATTACHMENT_STORE_OP_RANGE_SIZE = @enumToInt(enum_VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_RANGE_SIZE);
pub const VK_ATTACHMENT_STORE_OP_MAX_ENUM = @enumToInt(enum_VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_MAX_ENUM);
pub const enum_VkAttachmentStoreOp = extern enum(c_int) {
    VK_ATTACHMENT_STORE_OP_STORE = 0,
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
    VK_ATTACHMENT_STORE_OP_BEGIN_RANGE = 0,
    VK_ATTACHMENT_STORE_OP_END_RANGE = 1,
    VK_ATTACHMENT_STORE_OP_RANGE_SIZE = 2,
    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647,
    _,
};
pub const VkAttachmentStoreOp = enum_VkAttachmentStoreOp;
pub const VK_PIPELINE_BIND_POINT_GRAPHICS = @enumToInt(enum_VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_GRAPHICS);
pub const VK_PIPELINE_BIND_POINT_COMPUTE = @enumToInt(enum_VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_COMPUTE);
pub const VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = @enumToInt(enum_VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_RAY_TRACING_NV);
pub const VK_PIPELINE_BIND_POINT_BEGIN_RANGE = @enumToInt(enum_VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_BEGIN_RANGE);
pub const VK_PIPELINE_BIND_POINT_END_RANGE = @enumToInt(enum_VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_END_RANGE);
pub const VK_PIPELINE_BIND_POINT_RANGE_SIZE = @enumToInt(enum_VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_RANGE_SIZE);
pub const VK_PIPELINE_BIND_POINT_MAX_ENUM = @enumToInt(enum_VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_MAX_ENUM);
pub const enum_VkPipelineBindPoint = extern enum(c_int) {
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
    VK_PIPELINE_BIND_POINT_COMPUTE = 1,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000,
    VK_PIPELINE_BIND_POINT_BEGIN_RANGE = 0,
    VK_PIPELINE_BIND_POINT_END_RANGE = 1,
    VK_PIPELINE_BIND_POINT_RANGE_SIZE = 2,
    VK_PIPELINE_BIND_POINT_MAX_ENUM = 2147483647,
    _,
};
pub const VkPipelineBindPoint = enum_VkPipelineBindPoint;
pub const VK_COMMAND_BUFFER_LEVEL_PRIMARY = @enumToInt(enum_VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_PRIMARY);
pub const VK_COMMAND_BUFFER_LEVEL_SECONDARY = @enumToInt(enum_VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_SECONDARY);
pub const VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE = @enumToInt(enum_VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE);
pub const VK_COMMAND_BUFFER_LEVEL_END_RANGE = @enumToInt(enum_VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_END_RANGE);
pub const VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE = @enumToInt(enum_VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE);
pub const VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = @enumToInt(enum_VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_MAX_ENUM);
pub const enum_VkCommandBufferLevel = extern enum(c_int) {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
    VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE = 0,
    VK_COMMAND_BUFFER_LEVEL_END_RANGE = 1,
    VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE = 2,
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647,
    _,
};
pub const VkCommandBufferLevel = enum_VkCommandBufferLevel;
pub const VK_INDEX_TYPE_UINT16 = @enumToInt(enum_VkIndexType.VK_INDEX_TYPE_UINT16);
pub const VK_INDEX_TYPE_UINT32 = @enumToInt(enum_VkIndexType.VK_INDEX_TYPE_UINT32);
pub const VK_INDEX_TYPE_NONE_NV = @enumToInt(enum_VkIndexType.VK_INDEX_TYPE_NONE_NV);
pub const VK_INDEX_TYPE_UINT8_EXT = @enumToInt(enum_VkIndexType.VK_INDEX_TYPE_UINT8_EXT);
pub const VK_INDEX_TYPE_BEGIN_RANGE = @enumToInt(enum_VkIndexType.VK_INDEX_TYPE_BEGIN_RANGE);
pub const VK_INDEX_TYPE_END_RANGE = @enumToInt(enum_VkIndexType.VK_INDEX_TYPE_END_RANGE);
pub const VK_INDEX_TYPE_RANGE_SIZE = @enumToInt(enum_VkIndexType.VK_INDEX_TYPE_RANGE_SIZE);
pub const VK_INDEX_TYPE_MAX_ENUM = @enumToInt(enum_VkIndexType.VK_INDEX_TYPE_MAX_ENUM);
pub const enum_VkIndexType = extern enum(c_int) {
    VK_INDEX_TYPE_UINT16 = 0,
    VK_INDEX_TYPE_UINT32 = 1,
    VK_INDEX_TYPE_NONE_NV = 1000165000,
    VK_INDEX_TYPE_UINT8_EXT = 1000265000,
    VK_INDEX_TYPE_BEGIN_RANGE = 0,
    VK_INDEX_TYPE_END_RANGE = 1,
    VK_INDEX_TYPE_RANGE_SIZE = 2,
    VK_INDEX_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const VkIndexType = enum_VkIndexType;
pub const VK_SUBPASS_CONTENTS_INLINE = @enumToInt(enum_VkSubpassContents.VK_SUBPASS_CONTENTS_INLINE);
pub const VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = @enumToInt(enum_VkSubpassContents.VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS);
pub const VK_SUBPASS_CONTENTS_BEGIN_RANGE = @enumToInt(enum_VkSubpassContents.VK_SUBPASS_CONTENTS_BEGIN_RANGE);
pub const VK_SUBPASS_CONTENTS_END_RANGE = @enumToInt(enum_VkSubpassContents.VK_SUBPASS_CONTENTS_END_RANGE);
pub const VK_SUBPASS_CONTENTS_RANGE_SIZE = @enumToInt(enum_VkSubpassContents.VK_SUBPASS_CONTENTS_RANGE_SIZE);
pub const VK_SUBPASS_CONTENTS_MAX_ENUM = @enumToInt(enum_VkSubpassContents.VK_SUBPASS_CONTENTS_MAX_ENUM);
pub const enum_VkSubpassContents = extern enum(c_int) {
    VK_SUBPASS_CONTENTS_INLINE = 0,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
    VK_SUBPASS_CONTENTS_BEGIN_RANGE = 0,
    VK_SUBPASS_CONTENTS_END_RANGE = 1,
    VK_SUBPASS_CONTENTS_RANGE_SIZE = 2,
    VK_SUBPASS_CONTENTS_MAX_ENUM = 2147483647,
    _,
};
pub const VkSubpassContents = enum_VkSubpassContents;
pub const VK_OBJECT_TYPE_UNKNOWN = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_UNKNOWN);
pub const VK_OBJECT_TYPE_INSTANCE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_INSTANCE);
pub const VK_OBJECT_TYPE_PHYSICAL_DEVICE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_PHYSICAL_DEVICE);
pub const VK_OBJECT_TYPE_DEVICE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_DEVICE);
pub const VK_OBJECT_TYPE_QUEUE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_QUEUE);
pub const VK_OBJECT_TYPE_SEMAPHORE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_SEMAPHORE);
pub const VK_OBJECT_TYPE_COMMAND_BUFFER = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_COMMAND_BUFFER);
pub const VK_OBJECT_TYPE_FENCE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_FENCE);
pub const VK_OBJECT_TYPE_DEVICE_MEMORY = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_DEVICE_MEMORY);
pub const VK_OBJECT_TYPE_BUFFER = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_BUFFER);
pub const VK_OBJECT_TYPE_IMAGE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_IMAGE);
pub const VK_OBJECT_TYPE_EVENT = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_EVENT);
pub const VK_OBJECT_TYPE_QUERY_POOL = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_QUERY_POOL);
pub const VK_OBJECT_TYPE_BUFFER_VIEW = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_BUFFER_VIEW);
pub const VK_OBJECT_TYPE_IMAGE_VIEW = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_IMAGE_VIEW);
pub const VK_OBJECT_TYPE_SHADER_MODULE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_SHADER_MODULE);
pub const VK_OBJECT_TYPE_PIPELINE_CACHE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_PIPELINE_CACHE);
pub const VK_OBJECT_TYPE_PIPELINE_LAYOUT = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_PIPELINE_LAYOUT);
pub const VK_OBJECT_TYPE_RENDER_PASS = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_RENDER_PASS);
pub const VK_OBJECT_TYPE_PIPELINE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_PIPELINE);
pub const VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT);
pub const VK_OBJECT_TYPE_SAMPLER = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_SAMPLER);
pub const VK_OBJECT_TYPE_DESCRIPTOR_POOL = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_POOL);
pub const VK_OBJECT_TYPE_DESCRIPTOR_SET = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_SET);
pub const VK_OBJECT_TYPE_FRAMEBUFFER = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_FRAMEBUFFER);
pub const VK_OBJECT_TYPE_COMMAND_POOL = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_COMMAND_POOL);
pub const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION);
pub const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE);
pub const VK_OBJECT_TYPE_SURFACE_KHR = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_SURFACE_KHR);
pub const VK_OBJECT_TYPE_SWAPCHAIN_KHR = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_SWAPCHAIN_KHR);
pub const VK_OBJECT_TYPE_DISPLAY_KHR = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_DISPLAY_KHR);
pub const VK_OBJECT_TYPE_DISPLAY_MODE_KHR = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_DISPLAY_MODE_KHR);
pub const VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT);
pub const VK_OBJECT_TYPE_OBJECT_TABLE_NVX = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_OBJECT_TABLE_NVX);
pub const VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX);
pub const VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT);
pub const VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_VALIDATION_CACHE_EXT);
pub const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV);
pub const VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL);
pub const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR);
pub const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR);
pub const VK_OBJECT_TYPE_BEGIN_RANGE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_BEGIN_RANGE);
pub const VK_OBJECT_TYPE_END_RANGE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_END_RANGE);
pub const VK_OBJECT_TYPE_RANGE_SIZE = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_RANGE_SIZE);
pub const VK_OBJECT_TYPE_MAX_ENUM = @enumToInt(enum_VkObjectType.VK_OBJECT_TYPE_MAX_ENUM);
pub const enum_VkObjectType = extern enum(c_int) {
    VK_OBJECT_TYPE_UNKNOWN = 0,
    VK_OBJECT_TYPE_INSTANCE = 1,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
    VK_OBJECT_TYPE_DEVICE = 3,
    VK_OBJECT_TYPE_QUEUE = 4,
    VK_OBJECT_TYPE_SEMAPHORE = 5,
    VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
    VK_OBJECT_TYPE_FENCE = 7,
    VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
    VK_OBJECT_TYPE_BUFFER = 9,
    VK_OBJECT_TYPE_IMAGE = 10,
    VK_OBJECT_TYPE_EVENT = 11,
    VK_OBJECT_TYPE_QUERY_POOL = 12,
    VK_OBJECT_TYPE_BUFFER_VIEW = 13,
    VK_OBJECT_TYPE_IMAGE_VIEW = 14,
    VK_OBJECT_TYPE_SHADER_MODULE = 15,
    VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
    VK_OBJECT_TYPE_RENDER_PASS = 18,
    VK_OBJECT_TYPE_PIPELINE = 19,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
    VK_OBJECT_TYPE_SAMPLER = 21,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
    VK_OBJECT_TYPE_FRAMEBUFFER = 24,
    VK_OBJECT_TYPE_COMMAND_POOL = 25,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
    VK_OBJECT_TYPE_OBJECT_TABLE_NVX = 1000086000,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX = 1000086001,
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = 1000156000,
    VK_OBJECT_TYPE_BEGIN_RANGE = 0,
    VK_OBJECT_TYPE_END_RANGE = 25,
    VK_OBJECT_TYPE_RANGE_SIZE = 26,
    VK_OBJECT_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const VkObjectType = enum_VkObjectType;
pub const VK_VENDOR_ID_VIV = @enumToInt(enum_VkVendorId.VK_VENDOR_ID_VIV);
pub const VK_VENDOR_ID_VSI = @enumToInt(enum_VkVendorId.VK_VENDOR_ID_VSI);
pub const VK_VENDOR_ID_KAZAN = @enumToInt(enum_VkVendorId.VK_VENDOR_ID_KAZAN);
pub const VK_VENDOR_ID_BEGIN_RANGE = @enumToInt(enum_VkVendorId.VK_VENDOR_ID_BEGIN_RANGE);
pub const VK_VENDOR_ID_END_RANGE = @enumToInt(enum_VkVendorId.VK_VENDOR_ID_END_RANGE);
pub const VK_VENDOR_ID_RANGE_SIZE = @enumToInt(enum_VkVendorId.VK_VENDOR_ID_RANGE_SIZE);
pub const VK_VENDOR_ID_MAX_ENUM = @enumToInt(enum_VkVendorId.VK_VENDOR_ID_MAX_ENUM);
pub const enum_VkVendorId = extern enum(c_int) {
    VK_VENDOR_ID_VIV = 65537,
    VK_VENDOR_ID_VSI = 65538,
    VK_VENDOR_ID_KAZAN = 65539,
    VK_VENDOR_ID_BEGIN_RANGE = 65537,
    VK_VENDOR_ID_END_RANGE = 65539,
    VK_VENDOR_ID_RANGE_SIZE = 3,
    VK_VENDOR_ID_MAX_ENUM = 2147483647,
    _,
};
pub const VkVendorId = enum_VkVendorId;
pub const VkInstanceCreateFlags = VkFlags;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT);
pub const VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT);
pub const VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT);
pub const VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT);
pub const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT);
pub const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT);
pub const VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT);
pub const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT);
pub const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT);
pub const VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT);
pub const VK_FORMAT_FEATURE_BLIT_SRC_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_SRC_BIT);
pub const VK_FORMAT_FEATURE_BLIT_DST_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_DST_BIT);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT);
pub const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_SRC_BIT);
pub const VK_FORMAT_FEATURE_TRANSFER_DST_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_DST_BIT);
pub const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT);
pub const VK_FORMAT_FEATURE_DISJOINT_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DISJOINT_BIT);
pub const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT);
pub const VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT);
pub const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR);
pub const VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR);
pub const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR);
pub const VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DISJOINT_BIT_KHR);
pub const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR);
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT);
pub const VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_VkFormatFeatureFlagBits = extern enum(c_int) {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152,
    VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536,
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 16384,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 32768,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152,
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = 4194304,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192,
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkFormatFeatureFlagBits = enum_VkFormatFeatureFlagBits;
pub const VkFormatFeatureFlags = VkFlags;
pub const VK_IMAGE_USAGE_TRANSFER_SRC_BIT = @enumToInt(enum_VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_SRC_BIT);
pub const VK_IMAGE_USAGE_TRANSFER_DST_BIT = @enumToInt(enum_VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_DST_BIT);
pub const VK_IMAGE_USAGE_SAMPLED_BIT = @enumToInt(enum_VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLED_BIT);
pub const VK_IMAGE_USAGE_STORAGE_BIT = @enumToInt(enum_VkImageUsageFlagBits.VK_IMAGE_USAGE_STORAGE_BIT);
pub const VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = @enumToInt(enum_VkImageUsageFlagBits.VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT);
pub const VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = @enumToInt(enum_VkImageUsageFlagBits.VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT);
pub const VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = @enumToInt(enum_VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT);
pub const VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = @enumToInt(enum_VkImageUsageFlagBits.VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT);
pub const VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = @enumToInt(enum_VkImageUsageFlagBits.VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV);
pub const VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = @enumToInt(enum_VkImageUsageFlagBits.VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT);
pub const VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkImageUsageFlagBits.VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM);
pub const enum_VkImageUsageFlagBits = extern enum(c_int) {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
    VK_IMAGE_USAGE_SAMPLED_BIT = 4,
    VK_IMAGE_USAGE_STORAGE_BIT = 8,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256,
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512,
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkImageUsageFlagBits = enum_VkImageUsageFlagBits;
pub const VkImageUsageFlags = VkFlags;
pub const VK_IMAGE_CREATE_SPARSE_BINDING_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_BINDING_BIT);
pub const VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT);
pub const VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_ALIASED_BIT);
pub const VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT);
pub const VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT);
pub const VK_IMAGE_CREATE_ALIAS_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_ALIAS_BIT);
pub const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT);
pub const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT);
pub const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT);
pub const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_EXTENDED_USAGE_BIT);
pub const VK_IMAGE_CREATE_PROTECTED_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_PROTECTED_BIT);
pub const VK_IMAGE_CREATE_DISJOINT_BIT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_DISJOINT_BIT);
pub const VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV);
pub const VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT);
pub const VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT);
pub const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR);
pub const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR);
pub const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR);
pub const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR);
pub const VK_IMAGE_CREATE_DISJOINT_BIT_KHR = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_DISJOINT_BIT_KHR);
pub const VK_IMAGE_CREATE_ALIAS_BIT_KHR = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_ALIAS_BIT_KHR);
pub const VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkImageCreateFlagBits.VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkImageCreateFlagBits = extern enum(c_int) {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
    VK_IMAGE_CREATE_ALIAS_BIT = 1024,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
    VK_IMAGE_CREATE_PROTECTED_BIT = 2048,
    VK_IMAGE_CREATE_DISJOINT_BIT = 512,
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192,
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096,
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 32,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = 256,
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR = 512,
    VK_IMAGE_CREATE_ALIAS_BIT_KHR = 1024,
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkImageCreateFlagBits = enum_VkImageCreateFlagBits;
pub const VkImageCreateFlags = VkFlags;
pub const VK_SAMPLE_COUNT_1_BIT = @enumToInt(enum_VkSampleCountFlagBits.VK_SAMPLE_COUNT_1_BIT);
pub const VK_SAMPLE_COUNT_2_BIT = @enumToInt(enum_VkSampleCountFlagBits.VK_SAMPLE_COUNT_2_BIT);
pub const VK_SAMPLE_COUNT_4_BIT = @enumToInt(enum_VkSampleCountFlagBits.VK_SAMPLE_COUNT_4_BIT);
pub const VK_SAMPLE_COUNT_8_BIT = @enumToInt(enum_VkSampleCountFlagBits.VK_SAMPLE_COUNT_8_BIT);
pub const VK_SAMPLE_COUNT_16_BIT = @enumToInt(enum_VkSampleCountFlagBits.VK_SAMPLE_COUNT_16_BIT);
pub const VK_SAMPLE_COUNT_32_BIT = @enumToInt(enum_VkSampleCountFlagBits.VK_SAMPLE_COUNT_32_BIT);
pub const VK_SAMPLE_COUNT_64_BIT = @enumToInt(enum_VkSampleCountFlagBits.VK_SAMPLE_COUNT_64_BIT);
pub const VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkSampleCountFlagBits.VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM);
pub const enum_VkSampleCountFlagBits = extern enum(c_int) {
    VK_SAMPLE_COUNT_1_BIT = 1,
    VK_SAMPLE_COUNT_2_BIT = 2,
    VK_SAMPLE_COUNT_4_BIT = 4,
    VK_SAMPLE_COUNT_8_BIT = 8,
    VK_SAMPLE_COUNT_16_BIT = 16,
    VK_SAMPLE_COUNT_32_BIT = 32,
    VK_SAMPLE_COUNT_64_BIT = 64,
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkSampleCountFlagBits = enum_VkSampleCountFlagBits;
pub const VkSampleCountFlags = VkFlags;
pub const VK_QUEUE_GRAPHICS_BIT = @enumToInt(enum_VkQueueFlagBits.VK_QUEUE_GRAPHICS_BIT);
pub const VK_QUEUE_COMPUTE_BIT = @enumToInt(enum_VkQueueFlagBits.VK_QUEUE_COMPUTE_BIT);
pub const VK_QUEUE_TRANSFER_BIT = @enumToInt(enum_VkQueueFlagBits.VK_QUEUE_TRANSFER_BIT);
pub const VK_QUEUE_SPARSE_BINDING_BIT = @enumToInt(enum_VkQueueFlagBits.VK_QUEUE_SPARSE_BINDING_BIT);
pub const VK_QUEUE_PROTECTED_BIT = @enumToInt(enum_VkQueueFlagBits.VK_QUEUE_PROTECTED_BIT);
pub const VK_QUEUE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkQueueFlagBits.VK_QUEUE_FLAG_BITS_MAX_ENUM);
pub const enum_VkQueueFlagBits = extern enum(c_int) {
    VK_QUEUE_GRAPHICS_BIT = 1,
    VK_QUEUE_COMPUTE_BIT = 2,
    VK_QUEUE_TRANSFER_BIT = 4,
    VK_QUEUE_SPARSE_BINDING_BIT = 8,
    VK_QUEUE_PROTECTED_BIT = 16,
    VK_QUEUE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkQueueFlagBits = enum_VkQueueFlagBits;
pub const VkQueueFlags = VkFlags;
pub const VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = @enumToInt(enum_VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
pub const VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = @enumToInt(enum_VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT);
pub const VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = @enumToInt(enum_VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_COHERENT_BIT);
pub const VK_MEMORY_PROPERTY_HOST_CACHED_BIT = @enumToInt(enum_VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_CACHED_BIT);
pub const VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = @enumToInt(enum_VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT);
pub const VK_MEMORY_PROPERTY_PROTECTED_BIT = @enumToInt(enum_VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_PROTECTED_BIT);
pub const VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = @enumToInt(enum_VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD);
pub const VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = @enumToInt(enum_VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD);
pub const VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM);
pub const enum_VkMemoryPropertyFlagBits = extern enum(c_int) {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
    VK_MEMORY_PROPERTY_PROTECTED_BIT = 32,
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64,
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128,
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkMemoryPropertyFlagBits = enum_VkMemoryPropertyFlagBits;
pub const VkMemoryPropertyFlags = VkFlags;
pub const VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = @enumToInt(enum_VkMemoryHeapFlagBits.VK_MEMORY_HEAP_DEVICE_LOCAL_BIT);
pub const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = @enumToInt(enum_VkMemoryHeapFlagBits.VK_MEMORY_HEAP_MULTI_INSTANCE_BIT);
pub const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = @enumToInt(enum_VkMemoryHeapFlagBits.VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR);
pub const VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkMemoryHeapFlagBits.VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM);
pub const enum_VkMemoryHeapFlagBits = extern enum(c_int) {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = 2,
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkMemoryHeapFlagBits = enum_VkMemoryHeapFlagBits;
pub const VkMemoryHeapFlags = VkFlags;
pub const VkDeviceCreateFlags = VkFlags;
pub const VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = @enumToInt(enum_VkDeviceQueueCreateFlagBits.VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT);
pub const VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkDeviceQueueCreateFlagBits.VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkDeviceQueueCreateFlagBits = extern enum(c_int) {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkDeviceQueueCreateFlagBits = enum_VkDeviceQueueCreateFlagBits;
pub const VkDeviceQueueCreateFlags = VkFlags;
pub const VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT);
pub const VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT);
pub const VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_INPUT_BIT);
pub const VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_SHADER_BIT);
pub const VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT);
pub const VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT);
pub const VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT);
pub const VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT);
pub const VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT);
pub const VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT);
pub const VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT);
pub const VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT);
pub const VK_PIPELINE_STAGE_TRANSFER_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFER_BIT);
pub const VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT);
pub const VK_PIPELINE_STAGE_HOST_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_HOST_BIT);
pub const VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT);
pub const VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_COMMANDS_BIT);
pub const VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT);
pub const VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT);
pub const VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX);
pub const VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV);
pub const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV);
pub const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV);
pub const VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV);
pub const VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV);
pub const VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT);
pub const VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM);
pub const enum_VkPipelineStageFlagBits = extern enum(c_int) {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
    VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
    VK_PIPELINE_STAGE_HOST_BIT = 16384,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216,
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144,
    VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX = 131072,
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432,
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288,
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576,
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608,
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkPipelineStageFlagBits = enum_VkPipelineStageFlagBits;
pub const VkPipelineStageFlags = VkFlags;
pub const VkMemoryMapFlags = VkFlags;
pub const VK_IMAGE_ASPECT_COLOR_BIT = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_COLOR_BIT);
pub const VK_IMAGE_ASPECT_DEPTH_BIT = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_DEPTH_BIT);
pub const VK_IMAGE_ASPECT_STENCIL_BIT = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_STENCIL_BIT);
pub const VK_IMAGE_ASPECT_METADATA_BIT = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_METADATA_BIT);
pub const VK_IMAGE_ASPECT_PLANE_0_BIT = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_0_BIT);
pub const VK_IMAGE_ASPECT_PLANE_1_BIT = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_1_BIT);
pub const VK_IMAGE_ASPECT_PLANE_2_BIT = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_2_BIT);
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT);
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT);
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT);
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT);
pub const VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_0_BIT_KHR);
pub const VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_1_BIT_KHR);
pub const VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_2_BIT_KHR);
pub const VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkImageAspectFlagBits.VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM);
pub const enum_VkImageAspectFlagBits = extern enum(c_int) {
    VK_IMAGE_ASPECT_COLOR_BIT = 1,
    VK_IMAGE_ASPECT_DEPTH_BIT = 2,
    VK_IMAGE_ASPECT_STENCIL_BIT = 4,
    VK_IMAGE_ASPECT_METADATA_BIT = 8,
    VK_IMAGE_ASPECT_PLANE_0_BIT = 16,
    VK_IMAGE_ASPECT_PLANE_1_BIT = 32,
    VK_IMAGE_ASPECT_PLANE_2_BIT = 64,
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128,
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256,
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512,
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024,
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = 16,
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = 32,
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = 64,
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkImageAspectFlagBits = enum_VkImageAspectFlagBits;
pub const VkImageAspectFlags = VkFlags;
pub const VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = @enumToInt(enum_VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT);
pub const VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = @enumToInt(enum_VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT);
pub const VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = @enumToInt(enum_VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT);
pub const VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM);
pub const enum_VkSparseImageFormatFlagBits = extern enum(c_int) {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkSparseImageFormatFlagBits = enum_VkSparseImageFormatFlagBits;
pub const VkSparseImageFormatFlags = VkFlags;
pub const VK_SPARSE_MEMORY_BIND_METADATA_BIT = @enumToInt(enum_VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_METADATA_BIT);
pub const VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM);
pub const enum_VkSparseMemoryBindFlagBits = extern enum(c_int) {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkSparseMemoryBindFlagBits = enum_VkSparseMemoryBindFlagBits;
pub const VkSparseMemoryBindFlags = VkFlags;
pub const VK_FENCE_CREATE_SIGNALED_BIT = @enumToInt(enum_VkFenceCreateFlagBits.VK_FENCE_CREATE_SIGNALED_BIT);
pub const VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkFenceCreateFlagBits.VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkFenceCreateFlagBits = extern enum(c_int) {
    VK_FENCE_CREATE_SIGNALED_BIT = 1,
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkFenceCreateFlagBits = enum_VkFenceCreateFlagBits;
pub const VkFenceCreateFlags = VkFlags;
pub const VkSemaphoreCreateFlags = VkFlags;
pub const VkEventCreateFlags = VkFlags;
pub const VkQueryPoolCreateFlags = VkFlags;
pub const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT);
pub const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT);
pub const VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT);
pub const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT);
pub const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT);
pub const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT);
pub const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT);
pub const VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT);
pub const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT);
pub const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT);
pub const VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT);
pub const VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM);
pub const enum_VkQueryPipelineStatisticFlagBits = extern enum(c_int) {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkQueryPipelineStatisticFlagBits = enum_VkQueryPipelineStatisticFlagBits;
pub const VkQueryPipelineStatisticFlags = VkFlags;
pub const VK_QUERY_RESULT_64_BIT = @enumToInt(enum_VkQueryResultFlagBits.VK_QUERY_RESULT_64_BIT);
pub const VK_QUERY_RESULT_WAIT_BIT = @enumToInt(enum_VkQueryResultFlagBits.VK_QUERY_RESULT_WAIT_BIT);
pub const VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = @enumToInt(enum_VkQueryResultFlagBits.VK_QUERY_RESULT_WITH_AVAILABILITY_BIT);
pub const VK_QUERY_RESULT_PARTIAL_BIT = @enumToInt(enum_VkQueryResultFlagBits.VK_QUERY_RESULT_PARTIAL_BIT);
pub const VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkQueryResultFlagBits.VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM);
pub const enum_VkQueryResultFlagBits = extern enum(c_int) {
    VK_QUERY_RESULT_64_BIT = 1,
    VK_QUERY_RESULT_WAIT_BIT = 2,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
    VK_QUERY_RESULT_PARTIAL_BIT = 8,
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkQueryResultFlagBits = enum_VkQueryResultFlagBits;
pub const VkQueryResultFlags = VkFlags;
pub const VK_BUFFER_CREATE_SPARSE_BINDING_BIT = @enumToInt(enum_VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_BINDING_BIT);
pub const VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = @enumToInt(enum_VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT);
pub const VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = @enumToInt(enum_VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_ALIASED_BIT);
pub const VK_BUFFER_CREATE_PROTECTED_BIT = @enumToInt(enum_VkBufferCreateFlagBits.VK_BUFFER_CREATE_PROTECTED_BIT);
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = @enumToInt(enum_VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT);
pub const VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkBufferCreateFlagBits.VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkBufferCreateFlagBits = extern enum(c_int) {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
    VK_BUFFER_CREATE_PROTECTED_BIT = 8,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16,
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkBufferCreateFlagBits = enum_VkBufferCreateFlagBits;
pub const VkBufferCreateFlags = VkFlags;
pub const VK_BUFFER_USAGE_TRANSFER_SRC_BIT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_SRC_BIT);
pub const VK_BUFFER_USAGE_TRANSFER_DST_BIT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_DST_BIT);
pub const VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT);
pub const VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT);
pub const VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT);
pub const VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_BUFFER_BIT);
pub const VK_BUFFER_USAGE_INDEX_BUFFER_BIT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDEX_BUFFER_BIT);
pub const VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_VERTEX_BUFFER_BIT);
pub const VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT);
pub const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT);
pub const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT);
pub const VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT);
pub const VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_RAY_TRACING_BIT_NV);
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT);
pub const VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkBufferUsageFlagBits.VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM);
pub const enum_VkBufferUsageFlagBits = extern enum(c_int) {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096,
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512,
    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072,
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkBufferUsageFlagBits = enum_VkBufferUsageFlagBits;
pub const VkBufferUsageFlags = VkFlags;
pub const VkBufferViewCreateFlags = VkFlags;
pub const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = @enumToInt(enum_VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT);
pub const VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkImageViewCreateFlagBits = extern enum(c_int) {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1,
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkImageViewCreateFlagBits = enum_VkImageViewCreateFlagBits;
pub const VkImageViewCreateFlags = VkFlags;
pub const VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkShaderModuleCreateFlagBits.VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkShaderModuleCreateFlagBits = extern enum(c_int) {
    VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkShaderModuleCreateFlagBits = enum_VkShaderModuleCreateFlagBits;
pub const VkShaderModuleCreateFlags = VkFlags;
pub const VkPipelineCacheCreateFlags = VkFlags;
pub const VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = @enumToInt(enum_VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT);
pub const VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = @enumToInt(enum_VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT);
pub const VK_PIPELINE_CREATE_DERIVATIVE_BIT = @enumToInt(enum_VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DERIVATIVE_BIT);
pub const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = @enumToInt(enum_VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT);
pub const VK_PIPELINE_CREATE_DISPATCH_BASE = @enumToInt(enum_VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE);
pub const VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = @enumToInt(enum_VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV);
pub const VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = @enumToInt(enum_VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR);
pub const VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = @enumToInt(enum_VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR);
pub const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = @enumToInt(enum_VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR);
pub const VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = @enumToInt(enum_VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_KHR);
pub const VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkPipelineCreateFlagBits = extern enum(c_int) {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
    VK_PIPELINE_CREATE_DISPATCH_BASE = 16,
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32,
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64,
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8,
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = 16,
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkPipelineCreateFlagBits = enum_VkPipelineCreateFlagBits;
pub const VkPipelineCreateFlags = VkFlags;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = @enumToInt(enum_VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT);
pub const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = @enumToInt(enum_VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT);
pub const VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkPipelineShaderStageCreateFlagBits = extern enum(c_int) {
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1,
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2,
    VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkPipelineShaderStageCreateFlagBits = enum_VkPipelineShaderStageCreateFlagBits;
pub const VkPipelineShaderStageCreateFlags = VkFlags;
pub const VK_SHADER_STAGE_VERTEX_BIT = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_VERTEX_BIT);
pub const VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT);
pub const VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT);
pub const VK_SHADER_STAGE_GEOMETRY_BIT = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_GEOMETRY_BIT);
pub const VK_SHADER_STAGE_FRAGMENT_BIT = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_FRAGMENT_BIT);
pub const VK_SHADER_STAGE_COMPUTE_BIT = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_COMPUTE_BIT);
pub const VK_SHADER_STAGE_ALL_GRAPHICS = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_ALL_GRAPHICS);
pub const VK_SHADER_STAGE_ALL = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_ALL);
pub const VK_SHADER_STAGE_RAYGEN_BIT_NV = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_RAYGEN_BIT_NV);
pub const VK_SHADER_STAGE_ANY_HIT_BIT_NV = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_ANY_HIT_BIT_NV);
pub const VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV);
pub const VK_SHADER_STAGE_MISS_BIT_NV = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_MISS_BIT_NV);
pub const VK_SHADER_STAGE_INTERSECTION_BIT_NV = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_INTERSECTION_BIT_NV);
pub const VK_SHADER_STAGE_CALLABLE_BIT_NV = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_CALLABLE_BIT_NV);
pub const VK_SHADER_STAGE_TASK_BIT_NV = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_TASK_BIT_NV);
pub const VK_SHADER_STAGE_MESH_BIT_NV = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_MESH_BIT_NV);
pub const VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkShaderStageFlagBits.VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM);
pub const enum_VkShaderStageFlagBits = extern enum(c_int) {
    VK_SHADER_STAGE_VERTEX_BIT = 1,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
    VK_SHADER_STAGE_GEOMETRY_BIT = 8,
    VK_SHADER_STAGE_FRAGMENT_BIT = 16,
    VK_SHADER_STAGE_COMPUTE_BIT = 32,
    VK_SHADER_STAGE_ALL_GRAPHICS = 31,
    VK_SHADER_STAGE_ALL = 2147483647,
    VK_SHADER_STAGE_RAYGEN_BIT_NV = 256,
    VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024,
    VK_SHADER_STAGE_MISS_BIT_NV = 2048,
    VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096,
    VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192,
    VK_SHADER_STAGE_TASK_BIT_NV = 64,
    VK_SHADER_STAGE_MESH_BIT_NV = 128,
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkShaderStageFlagBits = enum_VkShaderStageFlagBits;
pub const VkPipelineVertexInputStateCreateFlags = VkFlags;
pub const VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub const VkPipelineTessellationStateCreateFlags = VkFlags;
pub const VkPipelineViewportStateCreateFlags = VkFlags;
pub const VkPipelineRasterizationStateCreateFlags = VkFlags;
pub const VK_CULL_MODE_NONE = @enumToInt(enum_VkCullModeFlagBits.VK_CULL_MODE_NONE);
pub const VK_CULL_MODE_FRONT_BIT = @enumToInt(enum_VkCullModeFlagBits.VK_CULL_MODE_FRONT_BIT);
pub const VK_CULL_MODE_BACK_BIT = @enumToInt(enum_VkCullModeFlagBits.VK_CULL_MODE_BACK_BIT);
pub const VK_CULL_MODE_FRONT_AND_BACK = @enumToInt(enum_VkCullModeFlagBits.VK_CULL_MODE_FRONT_AND_BACK);
pub const VK_CULL_MODE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkCullModeFlagBits.VK_CULL_MODE_FLAG_BITS_MAX_ENUM);
pub const enum_VkCullModeFlagBits = extern enum(c_int) {
    VK_CULL_MODE_NONE = 0,
    VK_CULL_MODE_FRONT_BIT = 1,
    VK_CULL_MODE_BACK_BIT = 2,
    VK_CULL_MODE_FRONT_AND_BACK = 3,
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkCullModeFlagBits = enum_VkCullModeFlagBits;
pub const VkCullModeFlags = VkFlags;
pub const VkPipelineMultisampleStateCreateFlags = VkFlags;
pub const VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub const VkPipelineColorBlendStateCreateFlags = VkFlags;
pub const VK_COLOR_COMPONENT_R_BIT = @enumToInt(enum_VkColorComponentFlagBits.VK_COLOR_COMPONENT_R_BIT);
pub const VK_COLOR_COMPONENT_G_BIT = @enumToInt(enum_VkColorComponentFlagBits.VK_COLOR_COMPONENT_G_BIT);
pub const VK_COLOR_COMPONENT_B_BIT = @enumToInt(enum_VkColorComponentFlagBits.VK_COLOR_COMPONENT_B_BIT);
pub const VK_COLOR_COMPONENT_A_BIT = @enumToInt(enum_VkColorComponentFlagBits.VK_COLOR_COMPONENT_A_BIT);
pub const VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkColorComponentFlagBits.VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM);
pub const enum_VkColorComponentFlagBits = extern enum(c_int) {
    VK_COLOR_COMPONENT_R_BIT = 1,
    VK_COLOR_COMPONENT_G_BIT = 2,
    VK_COLOR_COMPONENT_B_BIT = 4,
    VK_COLOR_COMPONENT_A_BIT = 8,
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkColorComponentFlagBits = enum_VkColorComponentFlagBits;
pub const VkColorComponentFlags = VkFlags;
pub const VkPipelineDynamicStateCreateFlags = VkFlags;
pub const VkPipelineLayoutCreateFlags = VkFlags;
pub const VkShaderStageFlags = VkFlags;
pub const VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = @enumToInt(enum_VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT);
pub const VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = @enumToInt(enum_VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT);
pub const VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkSamplerCreateFlagBits = extern enum(c_int) {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1,
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2,
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkSamplerCreateFlagBits = enum_VkSamplerCreateFlagBits;
pub const VkSamplerCreateFlags = VkFlags;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = @enumToInt(enum_VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR);
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = @enumToInt(enum_VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT);
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkDescriptorSetLayoutCreateFlagBits = extern enum(c_int) {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkDescriptorSetLayoutCreateFlagBits = enum_VkDescriptorSetLayoutCreateFlagBits;
pub const VkDescriptorSetLayoutCreateFlags = VkFlags;
pub const VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = @enumToInt(enum_VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT);
pub const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = @enumToInt(enum_VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT);
pub const VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkDescriptorPoolCreateFlagBits = extern enum(c_int) {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2,
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkDescriptorPoolCreateFlagBits = enum_VkDescriptorPoolCreateFlagBits;
pub const VkDescriptorPoolCreateFlags = VkFlags;
pub const VkDescriptorPoolResetFlags = VkFlags;
pub const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = @enumToInt(enum_VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR);
pub const VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkFramebufferCreateFlagBits = extern enum(c_int) {
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1,
    VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkFramebufferCreateFlagBits = enum_VkFramebufferCreateFlagBits;
pub const VkFramebufferCreateFlags = VkFlags;
pub const VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkRenderPassCreateFlagBits.VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkRenderPassCreateFlagBits = extern enum(c_int) {
    VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkRenderPassCreateFlagBits = enum_VkRenderPassCreateFlagBits;
pub const VkRenderPassCreateFlags = VkFlags;
pub const VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = @enumToInt(enum_VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT);
pub const VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM);
pub const enum_VkAttachmentDescriptionFlagBits = extern enum(c_int) {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkAttachmentDescriptionFlagBits = enum_VkAttachmentDescriptionFlagBits;
pub const VkAttachmentDescriptionFlags = VkFlags;
pub const VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = @enumToInt(enum_VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX);
pub const VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = @enumToInt(enum_VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX);
pub const VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM);
pub const enum_VkSubpassDescriptionFlagBits = extern enum(c_int) {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1,
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2,
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkSubpassDescriptionFlagBits = enum_VkSubpassDescriptionFlagBits;
pub const VkSubpassDescriptionFlags = VkFlags;
pub const VK_ACCESS_INDIRECT_COMMAND_READ_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_INDIRECT_COMMAND_READ_BIT);
pub const VK_ACCESS_INDEX_READ_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_INDEX_READ_BIT);
pub const VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT);
pub const VK_ACCESS_UNIFORM_READ_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_UNIFORM_READ_BIT);
pub const VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_INPUT_ATTACHMENT_READ_BIT);
pub const VK_ACCESS_SHADER_READ_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_SHADER_READ_BIT);
pub const VK_ACCESS_SHADER_WRITE_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_SHADER_WRITE_BIT);
pub const VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_BIT);
pub const VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT);
pub const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT);
pub const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT);
pub const VK_ACCESS_TRANSFER_READ_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_TRANSFER_READ_BIT);
pub const VK_ACCESS_TRANSFER_WRITE_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_TRANSFER_WRITE_BIT);
pub const VK_ACCESS_HOST_READ_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_HOST_READ_BIT);
pub const VK_ACCESS_HOST_WRITE_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_HOST_WRITE_BIT);
pub const VK_ACCESS_MEMORY_READ_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_MEMORY_READ_BIT);
pub const VK_ACCESS_MEMORY_WRITE_BIT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_MEMORY_WRITE_BIT);
pub const VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT);
pub const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT);
pub const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT);
pub const VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT);
pub const VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX);
pub const VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX);
pub const VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT);
pub const VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV);
pub const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV);
pub const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV);
pub const VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT);
pub const VK_ACCESS_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkAccessFlagBits.VK_ACCESS_FLAG_BITS_MAX_ENUM);
pub const enum_VkAccessFlagBits = extern enum(c_int) {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
    VK_ACCESS_INDEX_READ_BIT = 2,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
    VK_ACCESS_UNIFORM_READ_BIT = 8,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
    VK_ACCESS_SHADER_READ_BIT = 32,
    VK_ACCESS_SHADER_WRITE_BIT = 64,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
    VK_ACCESS_TRANSFER_READ_BIT = 2048,
    VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
    VK_ACCESS_HOST_READ_BIT = 8192,
    VK_ACCESS_HOST_WRITE_BIT = 16384,
    VK_ACCESS_MEMORY_READ_BIT = 32768,
    VK_ACCESS_MEMORY_WRITE_BIT = 65536,
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728,
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576,
    VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX = 131072,
    VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX = 262144,
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288,
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304,
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216,
    VK_ACCESS_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkAccessFlagBits = enum_VkAccessFlagBits;
pub const VkAccessFlags = VkFlags;
pub const VK_DEPENDENCY_BY_REGION_BIT = @enumToInt(enum_VkDependencyFlagBits.VK_DEPENDENCY_BY_REGION_BIT);
pub const VK_DEPENDENCY_DEVICE_GROUP_BIT = @enumToInt(enum_VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT);
pub const VK_DEPENDENCY_VIEW_LOCAL_BIT = @enumToInt(enum_VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT);
pub const VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = @enumToInt(enum_VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR);
pub const VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = @enumToInt(enum_VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR);
pub const VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkDependencyFlagBits.VK_DEPENDENCY_FLAG_BITS_MAX_ENUM);
pub const enum_VkDependencyFlagBits = extern enum(c_int) {
    VK_DEPENDENCY_BY_REGION_BIT = 1,
    VK_DEPENDENCY_DEVICE_GROUP_BIT = 4,
    VK_DEPENDENCY_VIEW_LOCAL_BIT = 2,
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2,
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4,
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkDependencyFlagBits = enum_VkDependencyFlagBits;
pub const VkDependencyFlags = VkFlags;
pub const VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = @enumToInt(enum_VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_TRANSIENT_BIT);
pub const VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = @enumToInt(enum_VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT);
pub const VK_COMMAND_POOL_CREATE_PROTECTED_BIT = @enumToInt(enum_VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_PROTECTED_BIT);
pub const VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkCommandPoolCreateFlagBits = extern enum(c_int) {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkCommandPoolCreateFlagBits = enum_VkCommandPoolCreateFlagBits;
pub const VkCommandPoolCreateFlags = VkFlags;
pub const VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = @enumToInt(enum_VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT);
pub const VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM);
pub const enum_VkCommandPoolResetFlagBits = extern enum(c_int) {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkCommandPoolResetFlagBits = enum_VkCommandPoolResetFlagBits;
pub const VkCommandPoolResetFlags = VkFlags;
pub const VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = @enumToInt(enum_VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT);
pub const VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = @enumToInt(enum_VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT);
pub const VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = @enumToInt(enum_VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT);
pub const VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM);
pub const enum_VkCommandBufferUsageFlagBits = extern enum(c_int) {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkCommandBufferUsageFlagBits = enum_VkCommandBufferUsageFlagBits;
pub const VkCommandBufferUsageFlags = VkFlags;
pub const VK_QUERY_CONTROL_PRECISE_BIT = @enumToInt(enum_VkQueryControlFlagBits.VK_QUERY_CONTROL_PRECISE_BIT);
pub const VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkQueryControlFlagBits.VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM);
pub const enum_VkQueryControlFlagBits = extern enum(c_int) {
    VK_QUERY_CONTROL_PRECISE_BIT = 1,
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkQueryControlFlagBits = enum_VkQueryControlFlagBits;
pub const VkQueryControlFlags = VkFlags;
pub const VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = @enumToInt(enum_VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT);
pub const VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM);
pub const enum_VkCommandBufferResetFlagBits = extern enum(c_int) {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkCommandBufferResetFlagBits = enum_VkCommandBufferResetFlagBits;
pub const VkCommandBufferResetFlags = VkFlags;
pub const VK_STENCIL_FACE_FRONT_BIT = @enumToInt(enum_VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_BIT);
pub const VK_STENCIL_FACE_BACK_BIT = @enumToInt(enum_VkStencilFaceFlagBits.VK_STENCIL_FACE_BACK_BIT);
pub const VK_STENCIL_FACE_FRONT_AND_BACK = @enumToInt(enum_VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_AND_BACK);
pub const VK_STENCIL_FRONT_AND_BACK = @enumToInt(enum_VkStencilFaceFlagBits.VK_STENCIL_FRONT_AND_BACK);
pub const VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkStencilFaceFlagBits.VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM);
pub const enum_VkStencilFaceFlagBits = extern enum(c_int) {
    VK_STENCIL_FACE_FRONT_BIT = 1,
    VK_STENCIL_FACE_BACK_BIT = 2,
    VK_STENCIL_FACE_FRONT_AND_BACK = 3,
    VK_STENCIL_FRONT_AND_BACK = 3,
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkStencilFaceFlagBits = enum_VkStencilFaceFlagBits;
pub const VkStencilFaceFlags = VkFlags;
pub const struct_VkApplicationInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    pApplicationName: [*c]const u8,
    applicationVersion: u32,
    pEngineName: [*c]const u8,
    engineVersion: u32,
    apiVersion: u32,
};
pub const VkApplicationInfo = struct_VkApplicationInfo;
pub const struct_VkInstanceCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkInstanceCreateFlags,
    pApplicationInfo: [*c]const VkApplicationInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: [*c]const [*c]const u8,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: [*c]const [*c]const u8,
};
pub const VkInstanceCreateInfo = struct_VkInstanceCreateInfo;
pub const PFN_vkAllocationFunction = ?fn (?*c_void, usize, usize, VkSystemAllocationScope) callconv(.C) ?*c_void;
pub const PFN_vkReallocationFunction = ?fn (?*c_void, ?*c_void, usize, usize, VkSystemAllocationScope) callconv(.C) ?*c_void;
pub const PFN_vkFreeFunction = ?fn (?*c_void, ?*c_void) callconv(.C) void;
pub const PFN_vkInternalAllocationNotification = ?fn (?*c_void, usize, VkInternalAllocationType, VkSystemAllocationScope) callconv(.C) void;
pub const PFN_vkInternalFreeNotification = ?fn (?*c_void, usize, VkInternalAllocationType, VkSystemAllocationScope) callconv(.C) void;
pub const struct_VkAllocationCallbacks = extern struct {
    pUserData: ?*c_void,
    pfnAllocation: PFN_vkAllocationFunction,
    pfnReallocation: PFN_vkReallocationFunction,
    pfnFree: PFN_vkFreeFunction,
    pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pfnInternalFree: PFN_vkInternalFreeNotification,
};
pub const VkAllocationCallbacks = struct_VkAllocationCallbacks;
pub const struct_VkPhysicalDeviceFeatures = extern struct {
    robustBufferAccess: VkBool32,
    fullDrawIndexUint32: VkBool32,
    imageCubeArray: VkBool32,
    independentBlend: VkBool32,
    geometryShader: VkBool32,
    tessellationShader: VkBool32,
    sampleRateShading: VkBool32,
    dualSrcBlend: VkBool32,
    logicOp: VkBool32,
    multiDrawIndirect: VkBool32,
    drawIndirectFirstInstance: VkBool32,
    depthClamp: VkBool32,
    depthBiasClamp: VkBool32,
    fillModeNonSolid: VkBool32,
    depthBounds: VkBool32,
    wideLines: VkBool32,
    largePoints: VkBool32,
    alphaToOne: VkBool32,
    multiViewport: VkBool32,
    samplerAnisotropy: VkBool32,
    textureCompressionETC2: VkBool32,
    textureCompressionASTC_LDR: VkBool32,
    textureCompressionBC: VkBool32,
    occlusionQueryPrecise: VkBool32,
    pipelineStatisticsQuery: VkBool32,
    vertexPipelineStoresAndAtomics: VkBool32,
    fragmentStoresAndAtomics: VkBool32,
    shaderTessellationAndGeometryPointSize: VkBool32,
    shaderImageGatherExtended: VkBool32,
    shaderStorageImageExtendedFormats: VkBool32,
    shaderStorageImageMultisample: VkBool32,
    shaderStorageImageReadWithoutFormat: VkBool32,
    shaderStorageImageWriteWithoutFormat: VkBool32,
    shaderUniformBufferArrayDynamicIndexing: VkBool32,
    shaderSampledImageArrayDynamicIndexing: VkBool32,
    shaderStorageBufferArrayDynamicIndexing: VkBool32,
    shaderStorageImageArrayDynamicIndexing: VkBool32,
    shaderClipDistance: VkBool32,
    shaderCullDistance: VkBool32,
    shaderFloat64: VkBool32,
    shaderInt64: VkBool32,
    shaderInt16: VkBool32,
    shaderResourceResidency: VkBool32,
    shaderResourceMinLod: VkBool32,
    sparseBinding: VkBool32,
    sparseResidencyBuffer: VkBool32,
    sparseResidencyImage2D: VkBool32,
    sparseResidencyImage3D: VkBool32,
    sparseResidency2Samples: VkBool32,
    sparseResidency4Samples: VkBool32,
    sparseResidency8Samples: VkBool32,
    sparseResidency16Samples: VkBool32,
    sparseResidencyAliased: VkBool32,
    variableMultisampleRate: VkBool32,
    inheritedQueries: VkBool32,
};
pub const VkPhysicalDeviceFeatures = struct_VkPhysicalDeviceFeatures;
pub const struct_VkFormatProperties = extern struct {
    linearTilingFeatures: VkFormatFeatureFlags,
    optimalTilingFeatures: VkFormatFeatureFlags,
    bufferFeatures: VkFormatFeatureFlags,
};
pub const VkFormatProperties = struct_VkFormatProperties;
pub const struct_VkExtent3D = extern struct {
    width: u32,
    height: u32,
    depth: u32,
};
pub const VkExtent3D = struct_VkExtent3D;
pub const struct_VkImageFormatProperties = extern struct {
    maxExtent: VkExtent3D,
    maxMipLevels: u32,
    maxArrayLayers: u32,
    sampleCounts: VkSampleCountFlags,
    maxResourceSize: VkDeviceSize,
};
pub const VkImageFormatProperties = struct_VkImageFormatProperties;
pub const struct_VkPhysicalDeviceLimits = extern struct {
    maxImageDimension1D: u32,
    maxImageDimension2D: u32,
    maxImageDimension3D: u32,
    maxImageDimensionCube: u32,
    maxImageArrayLayers: u32,
    maxTexelBufferElements: u32,
    maxUniformBufferRange: u32,
    maxStorageBufferRange: u32,
    maxPushConstantsSize: u32,
    maxMemoryAllocationCount: u32,
    maxSamplerAllocationCount: u32,
    bufferImageGranularity: VkDeviceSize,
    sparseAddressSpaceSize: VkDeviceSize,
    maxBoundDescriptorSets: u32,
    maxPerStageDescriptorSamplers: u32,
    maxPerStageDescriptorUniformBuffers: u32,
    maxPerStageDescriptorStorageBuffers: u32,
    maxPerStageDescriptorSampledImages: u32,
    maxPerStageDescriptorStorageImages: u32,
    maxPerStageDescriptorInputAttachments: u32,
    maxPerStageResources: u32,
    maxDescriptorSetSamplers: u32,
    maxDescriptorSetUniformBuffers: u32,
    maxDescriptorSetUniformBuffersDynamic: u32,
    maxDescriptorSetStorageBuffers: u32,
    maxDescriptorSetStorageBuffersDynamic: u32,
    maxDescriptorSetSampledImages: u32,
    maxDescriptorSetStorageImages: u32,
    maxDescriptorSetInputAttachments: u32,
    maxVertexInputAttributes: u32,
    maxVertexInputBindings: u32,
    maxVertexInputAttributeOffset: u32,
    maxVertexInputBindingStride: u32,
    maxVertexOutputComponents: u32,
    maxTessellationGenerationLevel: u32,
    maxTessellationPatchSize: u32,
    maxTessellationControlPerVertexInputComponents: u32,
    maxTessellationControlPerVertexOutputComponents: u32,
    maxTessellationControlPerPatchOutputComponents: u32,
    maxTessellationControlTotalOutputComponents: u32,
    maxTessellationEvaluationInputComponents: u32,
    maxTessellationEvaluationOutputComponents: u32,
    maxGeometryShaderInvocations: u32,
    maxGeometryInputComponents: u32,
    maxGeometryOutputComponents: u32,
    maxGeometryOutputVertices: u32,
    maxGeometryTotalOutputComponents: u32,
    maxFragmentInputComponents: u32,
    maxFragmentOutputAttachments: u32,
    maxFragmentDualSrcAttachments: u32,
    maxFragmentCombinedOutputResources: u32,
    maxComputeSharedMemorySize: u32,
    maxComputeWorkGroupCount: [3]u32,
    maxComputeWorkGroupInvocations: u32,
    maxComputeWorkGroupSize: [3]u32,
    subPixelPrecisionBits: u32,
    subTexelPrecisionBits: u32,
    mipmapPrecisionBits: u32,
    maxDrawIndexedIndexValue: u32,
    maxDrawIndirectCount: u32,
    maxSamplerLodBias: f32,
    maxSamplerAnisotropy: f32,
    maxViewports: u32,
    maxViewportDimensions: [2]u32,
    viewportBoundsRange: [2]f32,
    viewportSubPixelBits: u32,
    minMemoryMapAlignment: usize,
    minTexelBufferOffsetAlignment: VkDeviceSize,
    minUniformBufferOffsetAlignment: VkDeviceSize,
    minStorageBufferOffsetAlignment: VkDeviceSize,
    minTexelOffset: i32,
    maxTexelOffset: u32,
    minTexelGatherOffset: i32,
    maxTexelGatherOffset: u32,
    minInterpolationOffset: f32,
    maxInterpolationOffset: f32,
    subPixelInterpolationOffsetBits: u32,
    maxFramebufferWidth: u32,
    maxFramebufferHeight: u32,
    maxFramebufferLayers: u32,
    framebufferColorSampleCounts: VkSampleCountFlags,
    framebufferDepthSampleCounts: VkSampleCountFlags,
    framebufferStencilSampleCounts: VkSampleCountFlags,
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
    maxColorAttachments: u32,
    sampledImageColorSampleCounts: VkSampleCountFlags,
    sampledImageIntegerSampleCounts: VkSampleCountFlags,
    sampledImageDepthSampleCounts: VkSampleCountFlags,
    sampledImageStencilSampleCounts: VkSampleCountFlags,
    storageImageSampleCounts: VkSampleCountFlags,
    maxSampleMaskWords: u32,
    timestampComputeAndGraphics: VkBool32,
    timestampPeriod: f32,
    maxClipDistances: u32,
    maxCullDistances: u32,
    maxCombinedClipAndCullDistances: u32,
    discreteQueuePriorities: u32,
    pointSizeRange: [2]f32,
    lineWidthRange: [2]f32,
    pointSizeGranularity: f32,
    lineWidthGranularity: f32,
    strictLines: VkBool32,
    standardSampleLocations: VkBool32,
    optimalBufferCopyOffsetAlignment: VkDeviceSize,
    optimalBufferCopyRowPitchAlignment: VkDeviceSize,
    nonCoherentAtomSize: VkDeviceSize,
};
pub const VkPhysicalDeviceLimits = struct_VkPhysicalDeviceLimits;
pub const struct_VkPhysicalDeviceSparseProperties = extern struct {
    residencyStandard2DBlockShape: VkBool32,
    residencyStandard2DMultisampleBlockShape: VkBool32,
    residencyStandard3DBlockShape: VkBool32,
    residencyAlignedMipSize: VkBool32,
    residencyNonResidentStrict: VkBool32,
};
pub const VkPhysicalDeviceSparseProperties = struct_VkPhysicalDeviceSparseProperties;
pub const struct_VkPhysicalDeviceProperties = extern struct {
    apiVersion: u32,
    driverVersion: u32,
    vendorID: u32,
    deviceID: u32,
    deviceType: VkPhysicalDeviceType,
    deviceName: [256]u8,
    pipelineCacheUUID: [16]u8,
    limits: VkPhysicalDeviceLimits,
    sparseProperties: VkPhysicalDeviceSparseProperties,
};
pub const VkPhysicalDeviceProperties = struct_VkPhysicalDeviceProperties;
pub const struct_VkQueueFamilyProperties = extern struct {
    queueFlags: VkQueueFlags,
    queueCount: u32,
    timestampValidBits: u32,
    minImageTransferGranularity: VkExtent3D,
};
pub const VkQueueFamilyProperties = struct_VkQueueFamilyProperties;
pub const struct_VkMemoryType = extern struct {
    propertyFlags: VkMemoryPropertyFlags,
    heapIndex: u32,
};
pub const VkMemoryType = struct_VkMemoryType;
pub const struct_VkMemoryHeap = extern struct {
    size: VkDeviceSize,
    flags: VkMemoryHeapFlags,
};
pub const VkMemoryHeap = struct_VkMemoryHeap;
pub const struct_VkPhysicalDeviceMemoryProperties = extern struct {
    memoryTypeCount: u32,
    memoryTypes: [32]VkMemoryType,
    memoryHeapCount: u32,
    memoryHeaps: [16]VkMemoryHeap,
};
pub const VkPhysicalDeviceMemoryProperties = struct_VkPhysicalDeviceMemoryProperties;
pub const PFN_vkVoidFunction = ?fn () callconv(.C) void;
pub const struct_VkDeviceQueueCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueCount: u32,
    pQueuePriorities: [*c]const f32,
};
pub const VkDeviceQueueCreateInfo = struct_VkDeviceQueueCreateInfo;
pub const struct_VkDeviceCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkDeviceCreateFlags,
    queueCreateInfoCount: u32,
    pQueueCreateInfos: [*c]const VkDeviceQueueCreateInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: [*c]const [*c]const u8,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: [*c]const [*c]const u8,
    pEnabledFeatures: [*c]const VkPhysicalDeviceFeatures,
};
pub const VkDeviceCreateInfo = struct_VkDeviceCreateInfo;
pub const struct_VkExtensionProperties = extern struct {
    extensionName: [256]u8,
    specVersion: u32,
};
pub const VkExtensionProperties = struct_VkExtensionProperties;
pub const struct_VkLayerProperties = extern struct {
    layerName: [256]u8,
    specVersion: u32,
    implementationVersion: u32,
    description: [256]u8,
};
pub const VkLayerProperties = struct_VkLayerProperties;
pub const struct_VkSubmitInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: [*c]const VkSemaphore,
    pWaitDstStageMask: [*c]const VkPipelineStageFlags,
    commandBufferCount: u32,
    pCommandBuffers: [*c]const VkCommandBuffer,
    signalSemaphoreCount: u32,
    pSignalSemaphores: [*c]const VkSemaphore,
};
pub const VkSubmitInfo = struct_VkSubmitInfo;
pub const struct_VkMemoryAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    allocationSize: VkDeviceSize,
    memoryTypeIndex: u32,
};
pub const VkMemoryAllocateInfo = struct_VkMemoryAllocateInfo;
pub const struct_VkMappedMemoryRange = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    memory: VkDeviceMemory,
    offset: VkDeviceSize,
    size: VkDeviceSize,
};
pub const VkMappedMemoryRange = struct_VkMappedMemoryRange;
pub const struct_VkMemoryRequirements = extern struct {
    size: VkDeviceSize,
    alignment: VkDeviceSize,
    memoryTypeBits: u32,
};
pub const VkMemoryRequirements = struct_VkMemoryRequirements;
pub const struct_VkSparseImageFormatProperties = extern struct {
    aspectMask: VkImageAspectFlags,
    imageGranularity: VkExtent3D,
    flags: VkSparseImageFormatFlags,
};
pub const VkSparseImageFormatProperties = struct_VkSparseImageFormatProperties;
pub const struct_VkSparseImageMemoryRequirements = extern struct {
    formatProperties: VkSparseImageFormatProperties,
    imageMipTailFirstLod: u32,
    imageMipTailSize: VkDeviceSize,
    imageMipTailOffset: VkDeviceSize,
    imageMipTailStride: VkDeviceSize,
};
pub const VkSparseImageMemoryRequirements = struct_VkSparseImageMemoryRequirements;
pub const struct_VkSparseMemoryBind = extern struct {
    resourceOffset: VkDeviceSize,
    size: VkDeviceSize,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
};
pub const VkSparseMemoryBind = struct_VkSparseMemoryBind;
pub const struct_VkSparseBufferMemoryBindInfo = extern struct {
    buffer: VkBuffer,
    bindCount: u32,
    pBinds: [*c]const VkSparseMemoryBind,
};
pub const VkSparseBufferMemoryBindInfo = struct_VkSparseBufferMemoryBindInfo;
pub const struct_VkSparseImageOpaqueMemoryBindInfo = extern struct {
    image: VkImage,
    bindCount: u32,
    pBinds: [*c]const VkSparseMemoryBind,
};
pub const VkSparseImageOpaqueMemoryBindInfo = struct_VkSparseImageOpaqueMemoryBindInfo;
pub const struct_VkImageSubresource = extern struct {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    arrayLayer: u32,
};
pub const VkImageSubresource = struct_VkImageSubresource;
pub const struct_VkOffset3D = extern struct {
    x: i32,
    y: i32,
    z: i32,
};
pub const VkOffset3D = struct_VkOffset3D;
pub const struct_VkSparseImageMemoryBind = extern struct {
    subresource: VkImageSubresource,
    offset: VkOffset3D,
    extent: VkExtent3D,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
};
pub const VkSparseImageMemoryBind = struct_VkSparseImageMemoryBind;
pub const struct_VkSparseImageMemoryBindInfo = extern struct {
    image: VkImage,
    bindCount: u32,
    pBinds: [*c]const VkSparseImageMemoryBind,
};
pub const VkSparseImageMemoryBindInfo = struct_VkSparseImageMemoryBindInfo;
pub const struct_VkBindSparseInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: [*c]const VkSemaphore,
    bufferBindCount: u32,
    pBufferBinds: [*c]const VkSparseBufferMemoryBindInfo,
    imageOpaqueBindCount: u32,
    pImageOpaqueBinds: [*c]const VkSparseImageOpaqueMemoryBindInfo,
    imageBindCount: u32,
    pImageBinds: [*c]const VkSparseImageMemoryBindInfo,
    signalSemaphoreCount: u32,
    pSignalSemaphores: [*c]const VkSemaphore,
};
pub const VkBindSparseInfo = struct_VkBindSparseInfo;
pub const struct_VkFenceCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkFenceCreateFlags,
};
pub const VkFenceCreateInfo = struct_VkFenceCreateInfo;
pub const struct_VkSemaphoreCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkSemaphoreCreateFlags,
};
pub const VkSemaphoreCreateInfo = struct_VkSemaphoreCreateInfo;
pub const struct_VkEventCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkEventCreateFlags,
};
pub const VkEventCreateInfo = struct_VkEventCreateInfo;
pub const struct_VkQueryPoolCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkQueryPoolCreateFlags,
    queryType: VkQueryType,
    queryCount: u32,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
};
pub const VkQueryPoolCreateInfo = struct_VkQueryPoolCreateInfo;
pub const struct_VkBufferCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkBufferCreateFlags,
    size: VkDeviceSize,
    usage: VkBufferUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
};
pub const VkBufferCreateInfo = struct_VkBufferCreateInfo;
pub const struct_VkBufferViewCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkBufferViewCreateFlags,
    buffer: VkBuffer,
    format: VkFormat,
    offset: VkDeviceSize,
    range: VkDeviceSize,
};
pub const VkBufferViewCreateInfo = struct_VkBufferViewCreateInfo;
pub const struct_VkImageCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkImageCreateFlags,
    imageType: VkImageType,
    format: VkFormat,
    extent: VkExtent3D,
    mipLevels: u32,
    arrayLayers: u32,
    samples: VkSampleCountFlagBits,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
    initialLayout: VkImageLayout,
};
pub const VkImageCreateInfo = struct_VkImageCreateInfo;
pub const struct_VkSubresourceLayout = extern struct {
    offset: VkDeviceSize,
    size: VkDeviceSize,
    rowPitch: VkDeviceSize,
    arrayPitch: VkDeviceSize,
    depthPitch: VkDeviceSize,
};
pub const VkSubresourceLayout = struct_VkSubresourceLayout;
pub const struct_VkComponentMapping = extern struct {
    r: VkComponentSwizzle,
    g: VkComponentSwizzle,
    b: VkComponentSwizzle,
    a: VkComponentSwizzle,
};
pub const VkComponentMapping = struct_VkComponentMapping;
pub const struct_VkImageSubresourceRange = extern struct {
    aspectMask: VkImageAspectFlags,
    baseMipLevel: u32,
    levelCount: u32,
    baseArrayLayer: u32,
    layerCount: u32,
};
pub const VkImageSubresourceRange = struct_VkImageSubresourceRange;
pub const struct_VkImageViewCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkImageViewCreateFlags,
    image: VkImage,
    viewType: VkImageViewType,
    format: VkFormat,
    components: VkComponentMapping,
    subresourceRange: VkImageSubresourceRange,
};
pub const VkImageViewCreateInfo = struct_VkImageViewCreateInfo;
pub const struct_VkShaderModuleCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkShaderModuleCreateFlags,
    codeSize: usize,
    pCode: [*c]const u32,
};
pub const VkShaderModuleCreateInfo = struct_VkShaderModuleCreateInfo;
pub const struct_VkPipelineCacheCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineCacheCreateFlags,
    initialDataSize: usize,
    pInitialData: ?*const c_void,
};
pub const VkPipelineCacheCreateInfo = struct_VkPipelineCacheCreateInfo;
pub const struct_VkSpecializationMapEntry = extern struct {
    constantID: u32,
    offset: u32,
    size: usize,
};
pub const VkSpecializationMapEntry = struct_VkSpecializationMapEntry;
pub const struct_VkSpecializationInfo = extern struct {
    mapEntryCount: u32,
    pMapEntries: [*c]const VkSpecializationMapEntry,
    dataSize: usize,
    pData: ?*const c_void,
};
pub const VkSpecializationInfo = struct_VkSpecializationInfo;
pub const struct_VkPipelineShaderStageCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineShaderStageCreateFlags,
    stage: VkShaderStageFlagBits,
    module: VkShaderModule,
    pName: [*c]const u8,
    pSpecializationInfo: [*c]const VkSpecializationInfo,
};
pub const VkPipelineShaderStageCreateInfo = struct_VkPipelineShaderStageCreateInfo;
pub const struct_VkVertexInputBindingDescription = extern struct {
    binding: u32,
    stride: u32,
    inputRate: VkVertexInputRate,
};
pub const VkVertexInputBindingDescription = struct_VkVertexInputBindingDescription;
pub const struct_VkVertexInputAttributeDescription = extern struct {
    location: u32,
    binding: u32,
    format: VkFormat,
    offset: u32,
};
pub const VkVertexInputAttributeDescription = struct_VkVertexInputAttributeDescription;
pub const struct_VkPipelineVertexInputStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineVertexInputStateCreateFlags,
    vertexBindingDescriptionCount: u32,
    pVertexBindingDescriptions: [*c]const VkVertexInputBindingDescription,
    vertexAttributeDescriptionCount: u32,
    pVertexAttributeDescriptions: [*c]const VkVertexInputAttributeDescription,
};
pub const VkPipelineVertexInputStateCreateInfo = struct_VkPipelineVertexInputStateCreateInfo;
pub const struct_VkPipelineInputAssemblyStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineInputAssemblyStateCreateFlags,
    topology: VkPrimitiveTopology,
    primitiveRestartEnable: VkBool32,
};
pub const VkPipelineInputAssemblyStateCreateInfo = struct_VkPipelineInputAssemblyStateCreateInfo;
pub const struct_VkPipelineTessellationStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineTessellationStateCreateFlags,
    patchControlPoints: u32,
};
pub const VkPipelineTessellationStateCreateInfo = struct_VkPipelineTessellationStateCreateInfo;
pub const struct_VkViewport = extern struct {
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    minDepth: f32,
    maxDepth: f32,
};
pub const VkViewport = struct_VkViewport;
pub const struct_VkOffset2D = extern struct {
    x: i32,
    y: i32,
};
pub const VkOffset2D = struct_VkOffset2D;
pub const struct_VkExtent2D = extern struct {
    width: u32,
    height: u32,
};
pub const VkExtent2D = struct_VkExtent2D;
pub const struct_VkRect2D = extern struct {
    offset: VkOffset2D,
    extent: VkExtent2D,
};
pub const VkRect2D = struct_VkRect2D;
pub const struct_VkPipelineViewportStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineViewportStateCreateFlags,
    viewportCount: u32,
    pViewports: [*c]const VkViewport,
    scissorCount: u32,
    pScissors: [*c]const VkRect2D,
};
pub const VkPipelineViewportStateCreateInfo = struct_VkPipelineViewportStateCreateInfo;
pub const struct_VkPipelineRasterizationStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineRasterizationStateCreateFlags,
    depthClampEnable: VkBool32,
    rasterizerDiscardEnable: VkBool32,
    polygonMode: VkPolygonMode,
    cullMode: VkCullModeFlags,
    frontFace: VkFrontFace,
    depthBiasEnable: VkBool32,
    depthBiasConstantFactor: f32,
    depthBiasClamp: f32,
    depthBiasSlopeFactor: f32,
    lineWidth: f32,
};
pub const VkPipelineRasterizationStateCreateInfo = struct_VkPipelineRasterizationStateCreateInfo;
pub const struct_VkPipelineMultisampleStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineMultisampleStateCreateFlags,
    rasterizationSamples: VkSampleCountFlagBits,
    sampleShadingEnable: VkBool32,
    minSampleShading: f32,
    pSampleMask: [*c]const VkSampleMask,
    alphaToCoverageEnable: VkBool32,
    alphaToOneEnable: VkBool32,
};
pub const VkPipelineMultisampleStateCreateInfo = struct_VkPipelineMultisampleStateCreateInfo;
pub const struct_VkStencilOpState = extern struct {
    failOp: VkStencilOp,
    passOp: VkStencilOp,
    depthFailOp: VkStencilOp,
    compareOp: VkCompareOp,
    compareMask: u32,
    writeMask: u32,
    reference: u32,
};
pub const VkStencilOpState = struct_VkStencilOpState;
pub const struct_VkPipelineDepthStencilStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineDepthStencilStateCreateFlags,
    depthTestEnable: VkBool32,
    depthWriteEnable: VkBool32,
    depthCompareOp: VkCompareOp,
    depthBoundsTestEnable: VkBool32,
    stencilTestEnable: VkBool32,
    front: VkStencilOpState,
    back: VkStencilOpState,
    minDepthBounds: f32,
    maxDepthBounds: f32,
};
pub const VkPipelineDepthStencilStateCreateInfo = struct_VkPipelineDepthStencilStateCreateInfo;
pub const struct_VkPipelineColorBlendAttachmentState = extern struct {
    blendEnable: VkBool32,
    srcColorBlendFactor: VkBlendFactor,
    dstColorBlendFactor: VkBlendFactor,
    colorBlendOp: VkBlendOp,
    srcAlphaBlendFactor: VkBlendFactor,
    dstAlphaBlendFactor: VkBlendFactor,
    alphaBlendOp: VkBlendOp,
    colorWriteMask: VkColorComponentFlags,
};
pub const VkPipelineColorBlendAttachmentState = struct_VkPipelineColorBlendAttachmentState;
pub const struct_VkPipelineColorBlendStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineColorBlendStateCreateFlags,
    logicOpEnable: VkBool32,
    logicOp: VkLogicOp,
    attachmentCount: u32,
    pAttachments: [*c]const VkPipelineColorBlendAttachmentState,
    blendConstants: [4]f32,
};
pub const VkPipelineColorBlendStateCreateInfo = struct_VkPipelineColorBlendStateCreateInfo;
pub const struct_VkPipelineDynamicStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineDynamicStateCreateFlags,
    dynamicStateCount: u32,
    pDynamicStates: [*c]const VkDynamicState,
};
pub const VkPipelineDynamicStateCreateInfo = struct_VkPipelineDynamicStateCreateInfo;
pub const struct_VkGraphicsPipelineCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: [*c]const VkPipelineShaderStageCreateInfo,
    pVertexInputState: [*c]const VkPipelineVertexInputStateCreateInfo,
    pInputAssemblyState: [*c]const VkPipelineInputAssemblyStateCreateInfo,
    pTessellationState: [*c]const VkPipelineTessellationStateCreateInfo,
    pViewportState: [*c]const VkPipelineViewportStateCreateInfo,
    pRasterizationState: [*c]const VkPipelineRasterizationStateCreateInfo,
    pMultisampleState: [*c]const VkPipelineMultisampleStateCreateInfo,
    pDepthStencilState: [*c]const VkPipelineDepthStencilStateCreateInfo,
    pColorBlendState: [*c]const VkPipelineColorBlendStateCreateInfo,
    pDynamicState: [*c]const VkPipelineDynamicStateCreateInfo,
    layout: VkPipelineLayout,
    renderPass: VkRenderPass,
    subpass: u32,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
};
pub const VkGraphicsPipelineCreateInfo = struct_VkGraphicsPipelineCreateInfo;
pub const struct_VkComputePipelineCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineCreateFlags,
    stage: VkPipelineShaderStageCreateInfo,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
};
pub const VkComputePipelineCreateInfo = struct_VkComputePipelineCreateInfo;
pub const struct_VkPushConstantRange = extern struct {
    stageFlags: VkShaderStageFlags,
    offset: u32,
    size: u32,
};
pub const VkPushConstantRange = struct_VkPushConstantRange;
pub const struct_VkPipelineLayoutCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineLayoutCreateFlags,
    setLayoutCount: u32,
    pSetLayouts: [*c]const VkDescriptorSetLayout,
    pushConstantRangeCount: u32,
    pPushConstantRanges: [*c]const VkPushConstantRange,
};
pub const VkPipelineLayoutCreateInfo = struct_VkPipelineLayoutCreateInfo;
pub const struct_VkSamplerCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkSamplerCreateFlags,
    magFilter: VkFilter,
    minFilter: VkFilter,
    mipmapMode: VkSamplerMipmapMode,
    addressModeU: VkSamplerAddressMode,
    addressModeV: VkSamplerAddressMode,
    addressModeW: VkSamplerAddressMode,
    mipLodBias: f32,
    anisotropyEnable: VkBool32,
    maxAnisotropy: f32,
    compareEnable: VkBool32,
    compareOp: VkCompareOp,
    minLod: f32,
    maxLod: f32,
    borderColor: VkBorderColor,
    unnormalizedCoordinates: VkBool32,
};
pub const VkSamplerCreateInfo = struct_VkSamplerCreateInfo;
pub const struct_VkDescriptorSetLayoutBinding = extern struct {
    binding: u32,
    descriptorType: VkDescriptorType,
    descriptorCount: u32,
    stageFlags: VkShaderStageFlags,
    pImmutableSamplers: [*c]const VkSampler,
};
pub const VkDescriptorSetLayoutBinding = struct_VkDescriptorSetLayoutBinding;
pub const struct_VkDescriptorSetLayoutCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkDescriptorSetLayoutCreateFlags,
    bindingCount: u32,
    pBindings: [*c]const VkDescriptorSetLayoutBinding,
};
pub const VkDescriptorSetLayoutCreateInfo = struct_VkDescriptorSetLayoutCreateInfo;
pub const struct_VkDescriptorPoolSize = extern struct {
    type: VkDescriptorType,
    descriptorCount: u32,
};
pub const VkDescriptorPoolSize = struct_VkDescriptorPoolSize;
pub const struct_VkDescriptorPoolCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkDescriptorPoolCreateFlags,
    maxSets: u32,
    poolSizeCount: u32,
    pPoolSizes: [*c]const VkDescriptorPoolSize,
};
pub const VkDescriptorPoolCreateInfo = struct_VkDescriptorPoolCreateInfo;
pub const struct_VkDescriptorSetAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    descriptorPool: VkDescriptorPool,
    descriptorSetCount: u32,
    pSetLayouts: [*c]const VkDescriptorSetLayout,
};
pub const VkDescriptorSetAllocateInfo = struct_VkDescriptorSetAllocateInfo;
pub const struct_VkDescriptorImageInfo = extern struct {
    sampler: VkSampler,
    imageView: VkImageView,
    imageLayout: VkImageLayout,
};
pub const VkDescriptorImageInfo = struct_VkDescriptorImageInfo;
pub const struct_VkDescriptorBufferInfo = extern struct {
    buffer: VkBuffer,
    offset: VkDeviceSize,
    range: VkDeviceSize,
};
pub const VkDescriptorBufferInfo = struct_VkDescriptorBufferInfo;
pub const struct_VkWriteDescriptorSet = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    pImageInfo: [*c]const VkDescriptorImageInfo,
    pBufferInfo: [*c]const VkDescriptorBufferInfo,
    pTexelBufferView: [*c]const VkBufferView,
};
pub const VkWriteDescriptorSet = struct_VkWriteDescriptorSet;
pub const struct_VkCopyDescriptorSet = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    srcSet: VkDescriptorSet,
    srcBinding: u32,
    srcArrayElement: u32,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
};
pub const VkCopyDescriptorSet = struct_VkCopyDescriptorSet;
pub const struct_VkFramebufferCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkFramebufferCreateFlags,
    renderPass: VkRenderPass,
    attachmentCount: u32,
    pAttachments: [*c]const VkImageView,
    width: u32,
    height: u32,
    layers: u32,
};
pub const VkFramebufferCreateInfo = struct_VkFramebufferCreateInfo;
pub const struct_VkAttachmentDescription = extern struct {
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
};
pub const VkAttachmentDescription = struct_VkAttachmentDescription;
pub const struct_VkAttachmentReference = extern struct {
    attachment: u32,
    layout: VkImageLayout,
};
pub const VkAttachmentReference = struct_VkAttachmentReference;
pub const struct_VkSubpassDescription = extern struct {
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    inputAttachmentCount: u32,
    pInputAttachments: [*c]const VkAttachmentReference,
    colorAttachmentCount: u32,
    pColorAttachments: [*c]const VkAttachmentReference,
    pResolveAttachments: [*c]const VkAttachmentReference,
    pDepthStencilAttachment: [*c]const VkAttachmentReference,
    preserveAttachmentCount: u32,
    pPreserveAttachments: [*c]const u32,
};
pub const VkSubpassDescription = struct_VkSubpassDescription;
pub const struct_VkSubpassDependency = extern struct {
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
};
pub const VkSubpassDependency = struct_VkSubpassDependency;
pub const struct_VkRenderPassCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: [*c]const VkAttachmentDescription,
    subpassCount: u32,
    pSubpasses: [*c]const VkSubpassDescription,
    dependencyCount: u32,
    pDependencies: [*c]const VkSubpassDependency,
};
pub const VkRenderPassCreateInfo = struct_VkRenderPassCreateInfo;
pub const struct_VkCommandPoolCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkCommandPoolCreateFlags,
    queueFamilyIndex: u32,
};
pub const VkCommandPoolCreateInfo = struct_VkCommandPoolCreateInfo;
pub const struct_VkCommandBufferAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    commandPool: VkCommandPool,
    level: VkCommandBufferLevel,
    commandBufferCount: u32,
};
pub const VkCommandBufferAllocateInfo = struct_VkCommandBufferAllocateInfo;
pub const struct_VkCommandBufferInheritanceInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    renderPass: VkRenderPass,
    subpass: u32,
    framebuffer: VkFramebuffer,
    occlusionQueryEnable: VkBool32,
    queryFlags: VkQueryControlFlags,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
};
pub const VkCommandBufferInheritanceInfo = struct_VkCommandBufferInheritanceInfo;
pub const struct_VkCommandBufferBeginInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkCommandBufferUsageFlags,
    pInheritanceInfo: [*c]const VkCommandBufferInheritanceInfo,
};
pub const VkCommandBufferBeginInfo = struct_VkCommandBufferBeginInfo;
pub const struct_VkBufferCopy = extern struct {
    srcOffset: VkDeviceSize,
    dstOffset: VkDeviceSize,
    size: VkDeviceSize,
};
pub const VkBufferCopy = struct_VkBufferCopy;
pub const struct_VkImageSubresourceLayers = extern struct {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    baseArrayLayer: u32,
    layerCount: u32,
};
pub const VkImageSubresourceLayers = struct_VkImageSubresourceLayers;
pub const struct_VkImageCopy = extern struct {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
};
pub const VkImageCopy = struct_VkImageCopy;
pub const struct_VkImageBlit = extern struct {
    srcSubresource: VkImageSubresourceLayers,
    srcOffsets: [2]VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffsets: [2]VkOffset3D,
};
pub const VkImageBlit = struct_VkImageBlit;
pub const struct_VkBufferImageCopy = extern struct {
    bufferOffset: VkDeviceSize,
    bufferRowLength: u32,
    bufferImageHeight: u32,
    imageSubresource: VkImageSubresourceLayers,
    imageOffset: VkOffset3D,
    imageExtent: VkExtent3D,
};
pub const VkBufferImageCopy = struct_VkBufferImageCopy;
pub const union_VkClearColorValue = extern union {
    float32: [4]f32,
    int32: [4]i32,
    uint32: [4]u32,
};
pub const VkClearColorValue = union_VkClearColorValue;
pub const struct_VkClearDepthStencilValue = extern struct {
    depth: f32,
    stencil: u32,
};
pub const VkClearDepthStencilValue = struct_VkClearDepthStencilValue;
pub const union_VkClearValue = extern union {
    color: VkClearColorValue,
    depthStencil: VkClearDepthStencilValue,
};
pub const VkClearValue = union_VkClearValue;
pub const struct_VkClearAttachment = extern struct {
    aspectMask: VkImageAspectFlags,
    colorAttachment: u32,
    clearValue: VkClearValue,
};
pub const VkClearAttachment = struct_VkClearAttachment;
pub const struct_VkClearRect = extern struct {
    rect: VkRect2D,
    baseArrayLayer: u32,
    layerCount: u32,
};
pub const VkClearRect = struct_VkClearRect;
pub const struct_VkImageResolve = extern struct {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
};
pub const VkImageResolve = struct_VkImageResolve;
pub const struct_VkMemoryBarrier = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
};
pub const VkMemoryBarrier = struct_VkMemoryBarrier;
pub const struct_VkBufferMemoryBarrier = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    size: VkDeviceSize,
};
pub const VkBufferMemoryBarrier = struct_VkBufferMemoryBarrier;
pub const struct_VkImageMemoryBarrier = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    oldLayout: VkImageLayout,
    newLayout: VkImageLayout,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    image: VkImage,
    subresourceRange: VkImageSubresourceRange,
};
pub const VkImageMemoryBarrier = struct_VkImageMemoryBarrier;
pub const struct_VkRenderPassBeginInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    renderPass: VkRenderPass,
    framebuffer: VkFramebuffer,
    renderArea: VkRect2D,
    clearValueCount: u32,
    pClearValues: [*c]const VkClearValue,
};
pub const VkRenderPassBeginInfo = struct_VkRenderPassBeginInfo;
pub const struct_VkDispatchIndirectCommand = extern struct {
    x: u32,
    y: u32,
    z: u32,
};
pub const VkDispatchIndirectCommand = struct_VkDispatchIndirectCommand;
pub const struct_VkDrawIndexedIndirectCommand = extern struct {
    indexCount: u32,
    instanceCount: u32,
    firstIndex: u32,
    vertexOffset: i32,
    firstInstance: u32,
};
pub const VkDrawIndexedIndirectCommand = struct_VkDrawIndexedIndirectCommand;
pub const struct_VkDrawIndirectCommand = extern struct {
    vertexCount: u32,
    instanceCount: u32,
    firstVertex: u32,
    firstInstance: u32,
};
pub const VkDrawIndirectCommand = struct_VkDrawIndirectCommand;
pub const struct_VkBaseOutStructure = extern struct {
    sType: VkStructureType,
    pNext: [*c]struct_VkBaseOutStructure,
};
pub const VkBaseOutStructure = struct_VkBaseOutStructure;
pub const struct_VkBaseInStructure = extern struct {
    sType: VkStructureType,
    pNext: [*c]const struct_VkBaseInStructure,
};
pub const VkBaseInStructure = struct_VkBaseInStructure;
pub const PFN_vkCreateInstance = ?fn ([*c]const VkInstanceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkInstance) callconv(.C) VkResult;
pub const PFN_vkDestroyInstance = ?fn (VkInstance, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDevices = ?fn (VkInstance, [*c]u32, [*c]VkPhysicalDevice) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceFeatures = ?fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties = ?fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties = ?fn (VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, [*c]VkImageFormatProperties) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceProperties = ?fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties = ?fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties = ?fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties) callconv(.C) void;
pub const PFN_vkGetInstanceProcAddr = ?fn (VkInstance, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkGetDeviceProcAddr = ?fn (VkDevice, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkCreateDevice = ?fn (VkPhysicalDevice, [*c]const VkDeviceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDevice) callconv(.C) VkResult;
pub const PFN_vkDestroyDevice = ?fn (VkDevice, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumerateInstanceExtensionProperties = ?fn ([*c]const u8, [*c]u32, [*c]VkExtensionProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateDeviceExtensionProperties = ?fn (VkPhysicalDevice, [*c]const u8, [*c]u32, [*c]VkExtensionProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateInstanceLayerProperties = ?fn ([*c]u32, [*c]VkLayerProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateDeviceLayerProperties = ?fn (VkPhysicalDevice, [*c]u32, [*c]VkLayerProperties) callconv(.C) VkResult;
pub const PFN_vkGetDeviceQueue = ?fn (VkDevice, u32, u32, [*c]VkQueue) callconv(.C) void;
pub const PFN_vkQueueSubmit = ?fn (VkQueue, u32, [*c]const VkSubmitInfo, VkFence) callconv(.C) VkResult;
pub const PFN_vkQueueWaitIdle = ?fn (VkQueue) callconv(.C) VkResult;
pub const PFN_vkDeviceWaitIdle = ?fn (VkDevice) callconv(.C) VkResult;
pub const PFN_vkAllocateMemory = ?fn (VkDevice, [*c]const VkMemoryAllocateInfo, [*c]const VkAllocationCallbacks, [*c]VkDeviceMemory) callconv(.C) VkResult;
pub const PFN_vkFreeMemory = ?fn (VkDevice, VkDeviceMemory, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkMapMemory = ?fn (VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, [*c]?*c_void) callconv(.C) VkResult;
pub const PFN_vkUnmapMemory = ?fn (VkDevice, VkDeviceMemory) callconv(.C) void;
pub const PFN_vkFlushMappedMemoryRanges = ?fn (VkDevice, u32, [*c]const VkMappedMemoryRange) callconv(.C) VkResult;
pub const PFN_vkInvalidateMappedMemoryRanges = ?fn (VkDevice, u32, [*c]const VkMappedMemoryRange) callconv(.C) VkResult;
pub const PFN_vkGetDeviceMemoryCommitment = ?fn (VkDevice, VkDeviceMemory, [*c]VkDeviceSize) callconv(.C) void;
pub const PFN_vkBindBufferMemory = ?fn (VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory = ?fn (VkDevice, VkImage, VkDeviceMemory, VkDeviceSize) callconv(.C) VkResult;
pub const PFN_vkGetBufferMemoryRequirements = ?fn (VkDevice, VkBuffer, [*c]VkMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageMemoryRequirements = ?fn (VkDevice, VkImage, [*c]VkMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements = ?fn (VkDevice, VkImage, [*c]u32, [*c]VkSparseImageMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties = ?fn (VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, [*c]u32, [*c]VkSparseImageFormatProperties) callconv(.C) void;
pub const PFN_vkQueueBindSparse = ?fn (VkQueue, u32, [*c]const VkBindSparseInfo, VkFence) callconv(.C) VkResult;
pub const PFN_vkCreateFence = ?fn (VkDevice, [*c]const VkFenceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkDestroyFence = ?fn (VkDevice, VkFence, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetFences = ?fn (VkDevice, u32, [*c]const VkFence) callconv(.C) VkResult;
pub const PFN_vkGetFenceStatus = ?fn (VkDevice, VkFence) callconv(.C) VkResult;
pub const PFN_vkWaitForFences = ?fn (VkDevice, u32, [*c]const VkFence, VkBool32, u64) callconv(.C) VkResult;
pub const PFN_vkCreateSemaphore = ?fn (VkDevice, [*c]const VkSemaphoreCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSemaphore) callconv(.C) VkResult;
pub const PFN_vkDestroySemaphore = ?fn (VkDevice, VkSemaphore, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateEvent = ?fn (VkDevice, [*c]const VkEventCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkEvent) callconv(.C) VkResult;
pub const PFN_vkDestroyEvent = ?fn (VkDevice, VkEvent, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetEventStatus = ?fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkSetEvent = ?fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkResetEvent = ?fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkCreateQueryPool = ?fn (VkDevice, [*c]const VkQueryPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkQueryPool) callconv(.C) VkResult;
pub const PFN_vkDestroyQueryPool = ?fn (VkDevice, VkQueryPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetQueryPoolResults = ?fn (VkDevice, VkQueryPool, u32, u32, usize, ?*c_void, VkDeviceSize, VkQueryResultFlags) callconv(.C) VkResult;
pub const PFN_vkCreateBuffer = ?fn (VkDevice, [*c]const VkBufferCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkBuffer) callconv(.C) VkResult;
pub const PFN_vkDestroyBuffer = ?fn (VkDevice, VkBuffer, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateBufferView = ?fn (VkDevice, [*c]const VkBufferViewCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkBufferView) callconv(.C) VkResult;
pub const PFN_vkDestroyBufferView = ?fn (VkDevice, VkBufferView, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateImage = ?fn (VkDevice, [*c]const VkImageCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkImage) callconv(.C) VkResult;
pub const PFN_vkDestroyImage = ?fn (VkDevice, VkImage, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetImageSubresourceLayout = ?fn (VkDevice, VkImage, [*c]const VkImageSubresource, [*c]VkSubresourceLayout) callconv(.C) void;
pub const PFN_vkCreateImageView = ?fn (VkDevice, [*c]const VkImageViewCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkImageView) callconv(.C) VkResult;
pub const PFN_vkDestroyImageView = ?fn (VkDevice, VkImageView, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateShaderModule = ?fn (VkDevice, [*c]const VkShaderModuleCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkShaderModule) callconv(.C) VkResult;
pub const PFN_vkDestroyShaderModule = ?fn (VkDevice, VkShaderModule, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineCache = ?fn (VkDevice, [*c]const VkPipelineCacheCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipelineCache) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineCache = ?fn (VkDevice, VkPipelineCache, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPipelineCacheData = ?fn (VkDevice, VkPipelineCache, [*c]usize, ?*c_void) callconv(.C) VkResult;
pub const PFN_vkMergePipelineCaches = ?fn (VkDevice, VkPipelineCache, u32, [*c]const VkPipelineCache) callconv(.C) VkResult;
pub const PFN_vkCreateGraphicsPipelines = ?fn (VkDevice, VkPipelineCache, u32, [*c]const VkGraphicsPipelineCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkCreateComputePipelines = ?fn (VkDevice, VkPipelineCache, u32, [*c]const VkComputePipelineCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkDestroyPipeline = ?fn (VkDevice, VkPipeline, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineLayout = ?fn (VkDevice, [*c]const VkPipelineLayoutCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipelineLayout) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineLayout = ?fn (VkDevice, VkPipelineLayout, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateSampler = ?fn (VkDevice, [*c]const VkSamplerCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSampler) callconv(.C) VkResult;
pub const PFN_vkDestroySampler = ?fn (VkDevice, VkSampler, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorSetLayout = ?fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorSetLayout) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorSetLayout = ?fn (VkDevice, VkDescriptorSetLayout, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorPool = ?fn (VkDevice, [*c]const VkDescriptorPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorPool) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorPool = ?fn (VkDevice, VkDescriptorPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetDescriptorPool = ?fn (VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags) callconv(.C) VkResult;
pub const PFN_vkAllocateDescriptorSets = ?fn (VkDevice, [*c]const VkDescriptorSetAllocateInfo, [*c]VkDescriptorSet) callconv(.C) VkResult;
pub const PFN_vkFreeDescriptorSets = ?fn (VkDevice, VkDescriptorPool, u32, [*c]const VkDescriptorSet) callconv(.C) VkResult;
pub const PFN_vkUpdateDescriptorSets = ?fn (VkDevice, u32, [*c]const VkWriteDescriptorSet, u32, [*c]const VkCopyDescriptorSet) callconv(.C) void;
pub const PFN_vkCreateFramebuffer = ?fn (VkDevice, [*c]const VkFramebufferCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkFramebuffer) callconv(.C) VkResult;
pub const PFN_vkDestroyFramebuffer = ?fn (VkDevice, VkFramebuffer, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateRenderPass = ?fn (VkDevice, [*c]const VkRenderPassCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkDestroyRenderPass = ?fn (VkDevice, VkRenderPass, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetRenderAreaGranularity = ?fn (VkDevice, VkRenderPass, [*c]VkExtent2D) callconv(.C) void;
pub const PFN_vkCreateCommandPool = ?fn (VkDevice, [*c]const VkCommandPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkCommandPool) callconv(.C) VkResult;
pub const PFN_vkDestroyCommandPool = ?fn (VkDevice, VkCommandPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetCommandPool = ?fn (VkDevice, VkCommandPool, VkCommandPoolResetFlags) callconv(.C) VkResult;
pub const PFN_vkAllocateCommandBuffers = ?fn (VkDevice, [*c]const VkCommandBufferAllocateInfo, [*c]VkCommandBuffer) callconv(.C) VkResult;
pub const PFN_vkFreeCommandBuffers = ?fn (VkDevice, VkCommandPool, u32, [*c]const VkCommandBuffer) callconv(.C) void;
pub const PFN_vkBeginCommandBuffer = ?fn (VkCommandBuffer, [*c]const VkCommandBufferBeginInfo) callconv(.C) VkResult;
pub const PFN_vkEndCommandBuffer = ?fn (VkCommandBuffer) callconv(.C) VkResult;
pub const PFN_vkResetCommandBuffer = ?fn (VkCommandBuffer, VkCommandBufferResetFlags) callconv(.C) VkResult;
pub const PFN_vkCmdBindPipeline = ?fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline) callconv(.C) void;
pub const PFN_vkCmdSetViewport = ?fn (VkCommandBuffer, u32, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissor = ?fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdSetLineWidth = ?fn (VkCommandBuffer, f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBias = ?fn (VkCommandBuffer, f32, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetBlendConstants = ?fn (VkCommandBuffer, [*c]const f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBounds = ?fn (VkCommandBuffer, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetStencilCompareMask = ?fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilWriteMask = ?fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilReference = ?fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorSets = ?fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const VkDescriptorSet, u32, [*c]const u32) callconv(.C) void;
pub const PFN_vkCmdBindIndexBuffer = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers = ?fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdDraw = ?fn (VkCommandBuffer, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexed = ?fn (VkCommandBuffer, u32, u32, u32, i32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirect = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirect = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatch = ?fn (VkCommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchIndirect = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyBuffer = ?fn (VkCommandBuffer, VkBuffer, VkBuffer, u32, [*c]const VkBufferCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImage = ?fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageCopy) callconv(.C) void;
pub const PFN_vkCmdBlitImage = ?fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageBlit, VkFilter) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage = ?fn (VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, u32, [*c]const VkBufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer = ?fn (VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, u32, [*c]const VkBufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdUpdateBuffer = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, ?*const c_void) callconv(.C) void;
pub const PFN_vkCmdFillBuffer = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, u32) callconv(.C) void;
pub const PFN_vkCmdClearColorImage = ?fn (VkCommandBuffer, VkImage, VkImageLayout, [*c]const VkClearColorValue, u32, [*c]const VkImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearDepthStencilImage = ?fn (VkCommandBuffer, VkImage, VkImageLayout, [*c]const VkClearDepthStencilValue, u32, [*c]const VkImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearAttachments = ?fn (VkCommandBuffer, u32, [*c]const VkClearAttachment, u32, [*c]const VkClearRect) callconv(.C) void;
pub const PFN_vkCmdResolveImage = ?fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageResolve) callconv(.C) void;
pub const PFN_vkCmdSetEvent = ?fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdResetEvent = ?fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdWaitEvents = ?fn (VkCommandBuffer, u32, [*c]const VkEvent, VkPipelineStageFlags, VkPipelineStageFlags, u32, [*c]const VkMemoryBarrier, u32, [*c]const VkBufferMemoryBarrier, u32, [*c]const VkImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier = ?fn (VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, u32, [*c]const VkMemoryBarrier, u32, [*c]const VkBufferMemoryBarrier, u32, [*c]const VkImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdBeginQuery = ?fn (VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags) callconv(.C) void;
pub const PFN_vkCmdEndQuery = ?fn (VkCommandBuffer, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdResetQueryPool = ?fn (VkCommandBuffer, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp = ?fn (VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdCopyQueryPoolResults = ?fn (VkCommandBuffer, VkQueryPool, u32, u32, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags) callconv(.C) void;
pub const PFN_vkCmdPushConstants = ?fn (VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, u32, u32, ?*const c_void) callconv(.C) void;
pub const PFN_vkCmdBeginRenderPass = ?fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, VkSubpassContents) callconv(.C) void;
pub const PFN_vkCmdNextSubpass = ?fn (VkCommandBuffer, VkSubpassContents) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass = ?fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdExecuteCommands = ?fn (VkCommandBuffer, u32, [*c]const VkCommandBuffer) callconv(.C) void;
pub extern fn vkCreateInstance(pCreateInfo: [*c]const VkInstanceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pInstance: [*c]VkInstance) VkResult;
pub extern fn vkDestroyInstance(instance: VkInstance, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkEnumeratePhysicalDevices(instance: VkInstance, pPhysicalDeviceCount: [*c]u32, pPhysicalDevices: [*c]VkPhysicalDevice) VkResult;
pub extern fn vkGetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures) void;
pub extern fn vkGetPhysicalDeviceFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: [*c]VkImageFormatProperties) VkResult;
pub extern fn vkGetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties) void;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties) void;
pub extern fn vkGetInstanceProcAddr(instance: VkInstance, pName: [*c]const u8) PFN_vkVoidFunction;
pub extern fn vkGetDeviceProcAddr(device: VkDevice, pName: [*c]const u8) PFN_vkVoidFunction;
pub extern fn vkCreateDevice(physicalDevice: VkPhysicalDevice, pCreateInfo: [*c]const VkDeviceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDevice: [*c]VkDevice) VkResult;
pub extern fn vkDestroyDevice(device: VkDevice, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkEnumerateInstanceExtensionProperties(pLayerName: [*c]const u8, pPropertyCount: [*c]u32, pProperties: [*c]VkExtensionProperties) VkResult;
pub extern fn vkEnumerateDeviceExtensionProperties(physicalDevice: VkPhysicalDevice, pLayerName: [*c]const u8, pPropertyCount: [*c]u32, pProperties: [*c]VkExtensionProperties) VkResult;
pub extern fn vkEnumerateInstanceLayerProperties(pPropertyCount: [*c]u32, pProperties: [*c]VkLayerProperties) VkResult;
pub extern fn vkEnumerateDeviceLayerProperties(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkLayerProperties) VkResult;
pub extern fn vkGetDeviceQueue(device: VkDevice, queueFamilyIndex: u32, queueIndex: u32, pQueue: [*c]VkQueue) void;
pub extern fn vkQueueSubmit(queue: VkQueue, submitCount: u32, pSubmits: [*c]const VkSubmitInfo, fence: VkFence) VkResult;
pub extern fn vkQueueWaitIdle(queue: VkQueue) VkResult;
pub extern fn vkDeviceWaitIdle(device: VkDevice) VkResult;
pub extern fn vkAllocateMemory(device: VkDevice, pAllocateInfo: [*c]const VkMemoryAllocateInfo, pAllocator: [*c]const VkAllocationCallbacks, pMemory: [*c]VkDeviceMemory) VkResult;
pub extern fn vkFreeMemory(device: VkDevice, memory: VkDeviceMemory, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkMapMemory(device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: [*c]?*c_void) VkResult;
pub extern fn vkUnmapMemory(device: VkDevice, memory: VkDeviceMemory) void;
pub extern fn vkFlushMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: [*c]const VkMappedMemoryRange) VkResult;
pub extern fn vkInvalidateMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: [*c]const VkMappedMemoryRange) VkResult;
pub extern fn vkGetDeviceMemoryCommitment(device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: [*c]VkDeviceSize) void;
pub extern fn vkBindBufferMemory(device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) VkResult;
pub extern fn vkBindImageMemory(device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) VkResult;
pub extern fn vkGetBufferMemoryRequirements(device: VkDevice, buffer: VkBuffer, pMemoryRequirements: [*c]VkMemoryRequirements) void;
pub extern fn vkGetImageMemoryRequirements(device: VkDevice, image: VkImage, pMemoryRequirements: [*c]VkMemoryRequirements) void;
pub extern fn vkGetImageSparseMemoryRequirements(device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, type: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties) void;
pub extern fn vkQueueBindSparse(queue: VkQueue, bindInfoCount: u32, pBindInfo: [*c]const VkBindSparseInfo, fence: VkFence) VkResult;
pub extern fn vkCreateFence(device: VkDevice, pCreateInfo: [*c]const VkFenceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkDestroyFence(device: VkDevice, fence: VkFence, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetFences(device: VkDevice, fenceCount: u32, pFences: [*c]const VkFence) VkResult;
pub extern fn vkGetFenceStatus(device: VkDevice, fence: VkFence) VkResult;
pub extern fn vkWaitForFences(device: VkDevice, fenceCount: u32, pFences: [*c]const VkFence, waitAll: VkBool32, timeout: u64) VkResult;
pub extern fn vkCreateSemaphore(device: VkDevice, pCreateInfo: [*c]const VkSemaphoreCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSemaphore: [*c]VkSemaphore) VkResult;
pub extern fn vkDestroySemaphore(device: VkDevice, semaphore: VkSemaphore, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateEvent(device: VkDevice, pCreateInfo: [*c]const VkEventCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pEvent: [*c]VkEvent) VkResult;
pub extern fn vkDestroyEvent(device: VkDevice, event: VkEvent, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetEventStatus(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkSetEvent(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkResetEvent(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkCreateQueryPool(device: VkDevice, pCreateInfo: [*c]const VkQueryPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pQueryPool: [*c]VkQueryPool) VkResult;
pub extern fn vkDestroyQueryPool(device: VkDevice, queryPool: VkQueryPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetQueryPoolResults(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dataSize: usize, pData: ?*c_void, stride: VkDeviceSize, flags: VkQueryResultFlags) VkResult;
pub extern fn vkCreateBuffer(device: VkDevice, pCreateInfo: [*c]const VkBufferCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pBuffer: [*c]VkBuffer) VkResult;
pub extern fn vkDestroyBuffer(device: VkDevice, buffer: VkBuffer, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateBufferView(device: VkDevice, pCreateInfo: [*c]const VkBufferViewCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pView: [*c]VkBufferView) VkResult;
pub extern fn vkDestroyBufferView(device: VkDevice, bufferView: VkBufferView, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateImage(device: VkDevice, pCreateInfo: [*c]const VkImageCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pImage: [*c]VkImage) VkResult;
pub extern fn vkDestroyImage(device: VkDevice, image: VkImage, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetImageSubresourceLayout(device: VkDevice, image: VkImage, pSubresource: [*c]const VkImageSubresource, pLayout: [*c]VkSubresourceLayout) void;
pub extern fn vkCreateImageView(device: VkDevice, pCreateInfo: [*c]const VkImageViewCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pView: [*c]VkImageView) VkResult;
pub extern fn vkDestroyImageView(device: VkDevice, imageView: VkImageView, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateShaderModule(device: VkDevice, pCreateInfo: [*c]const VkShaderModuleCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pShaderModule: [*c]VkShaderModule) VkResult;
pub extern fn vkDestroyShaderModule(device: VkDevice, shaderModule: VkShaderModule, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreatePipelineCache(device: VkDevice, pCreateInfo: [*c]const VkPipelineCacheCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelineCache: [*c]VkPipelineCache) VkResult;
pub extern fn vkDestroyPipelineCache(device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetPipelineCacheData(device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: [*c]usize, pData: ?*c_void) VkResult;
pub extern fn vkMergePipelineCaches(device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: u32, pSrcCaches: [*c]const VkPipelineCache) VkResult;
pub extern fn vkCreateGraphicsPipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkGraphicsPipelineCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkCreateComputePipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkComputePipelineCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkDestroyPipeline(device: VkDevice, pipeline: VkPipeline, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreatePipelineLayout(device: VkDevice, pCreateInfo: [*c]const VkPipelineLayoutCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelineLayout: [*c]VkPipelineLayout) VkResult;
pub extern fn vkDestroyPipelineLayout(device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateSampler(device: VkDevice, pCreateInfo: [*c]const VkSamplerCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSampler: [*c]VkSampler) VkResult;
pub extern fn vkDestroySampler(device: VkDevice, sampler: VkSampler, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorSetLayout(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSetLayout: [*c]VkDescriptorSetLayout) VkResult;
pub extern fn vkDestroyDescriptorSetLayout(device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorPool(device: VkDevice, pCreateInfo: [*c]const VkDescriptorPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorPool: [*c]VkDescriptorPool) VkResult;
pub extern fn vkDestroyDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags) VkResult;
pub extern fn vkAllocateDescriptorSets(device: VkDevice, pAllocateInfo: [*c]const VkDescriptorSetAllocateInfo, pDescriptorSets: [*c]VkDescriptorSet) VkResult;
pub extern fn vkFreeDescriptorSets(device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: u32, pDescriptorSets: [*c]const VkDescriptorSet) VkResult;
pub extern fn vkUpdateDescriptorSets(device: VkDevice, descriptorWriteCount: u32, pDescriptorWrites: [*c]const VkWriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: [*c]const VkCopyDescriptorSet) void;
pub extern fn vkCreateFramebuffer(device: VkDevice, pCreateInfo: [*c]const VkFramebufferCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pFramebuffer: [*c]VkFramebuffer) VkResult;
pub extern fn vkDestroyFramebuffer(device: VkDevice, framebuffer: VkFramebuffer, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateRenderPass(device: VkDevice, pCreateInfo: [*c]const VkRenderPassCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pRenderPass: [*c]VkRenderPass) VkResult;
pub extern fn vkDestroyRenderPass(device: VkDevice, renderPass: VkRenderPass, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetRenderAreaGranularity(device: VkDevice, renderPass: VkRenderPass, pGranularity: [*c]VkExtent2D) void;
pub extern fn vkCreateCommandPool(device: VkDevice, pCreateInfo: [*c]const VkCommandPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pCommandPool: [*c]VkCommandPool) VkResult;
pub extern fn vkDestroyCommandPool(device: VkDevice, commandPool: VkCommandPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags) VkResult;
pub extern fn vkAllocateCommandBuffers(device: VkDevice, pAllocateInfo: [*c]const VkCommandBufferAllocateInfo, pCommandBuffers: [*c]VkCommandBuffer) VkResult;
pub extern fn vkFreeCommandBuffers(device: VkDevice, commandPool: VkCommandPool, commandBufferCount: u32, pCommandBuffers: [*c]const VkCommandBuffer) void;
pub extern fn vkBeginCommandBuffer(commandBuffer: VkCommandBuffer, pBeginInfo: [*c]const VkCommandBufferBeginInfo) VkResult;
pub extern fn vkEndCommandBuffer(commandBuffer: VkCommandBuffer) VkResult;
pub extern fn vkResetCommandBuffer(commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags) VkResult;
pub extern fn vkCmdBindPipeline(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) void;
pub extern fn vkCmdSetViewport(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: [*c]const VkViewport) void;
pub extern fn vkCmdSetScissor(commandBuffer: VkCommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: [*c]const VkRect2D) void;
pub extern fn vkCmdSetLineWidth(commandBuffer: VkCommandBuffer, lineWidth: f32) void;
pub extern fn vkCmdSetDepthBias(commandBuffer: VkCommandBuffer, depthBiasConstantFactor: f32, depthBiasClamp: f32, depthBiasSlopeFactor: f32) void;
pub extern fn vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer, blendConstants: [*c]const f32) void;
pub extern fn vkCmdSetDepthBounds(commandBuffer: VkCommandBuffer, minDepthBounds: f32, maxDepthBounds: f32) void;
pub extern fn vkCmdSetStencilCompareMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: u32) void;
pub extern fn vkCmdSetStencilWriteMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: u32) void;
pub extern fn vkCmdSetStencilReference(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: u32) void;
pub extern fn vkCmdBindDescriptorSets(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: [*c]const VkDescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: [*c]const u32) void;
pub extern fn vkCmdBindIndexBuffer(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType) void;
pub extern fn vkCmdBindVertexBuffers(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdDraw(commandBuffer: VkCommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) void;
pub extern fn vkCmdDrawIndexed(commandBuffer: VkCommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: i32, firstInstance: u32) void;
pub extern fn vkCmdDrawIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDispatch(commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkCmdDispatchIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize) void;
pub extern fn vkCmdCopyBuffer(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: u32, pRegions: [*c]const VkBufferCopy) void;
pub extern fn vkCmdCopyImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageCopy) void;
pub extern fn vkCmdBlitImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageBlit, filter: VkFilter) void;
pub extern fn vkCmdCopyBufferToImage(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkBufferImageCopy) void;
pub extern fn vkCmdCopyImageToBuffer(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: u32, pRegions: [*c]const VkBufferImageCopy) void;
pub extern fn vkCmdUpdateBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: ?*const c_void) void;
pub extern fn vkCmdFillBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: u32) void;
pub extern fn vkCmdClearColorImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: [*c]const VkClearColorValue, rangeCount: u32, pRanges: [*c]const VkImageSubresourceRange) void;
pub extern fn vkCmdClearDepthStencilImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: [*c]const VkClearDepthStencilValue, rangeCount: u32, pRanges: [*c]const VkImageSubresourceRange) void;
pub extern fn vkCmdClearAttachments(commandBuffer: VkCommandBuffer, attachmentCount: u32, pAttachments: [*c]const VkClearAttachment, rectCount: u32, pRects: [*c]const VkClearRect) void;
pub extern fn vkCmdResolveImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageResolve) void;
pub extern fn vkCmdSetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) void;
pub extern fn vkCmdResetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) void;
pub extern fn vkCmdWaitEvents(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: [*c]const VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: [*c]const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: [*c]const VkImageMemoryBarrier) void;
pub extern fn vkCmdPipelineBarrier(commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: [*c]const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: [*c]const VkImageMemoryBarrier) void;
pub extern fn vkCmdBeginQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags) void;
pub extern fn vkCmdEndQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkCmdResetQueryPool(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) void;
pub extern fn vkCmdWriteTimestamp(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkCmdCopyQueryPoolResults(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags) void;
pub extern fn vkCmdPushConstants(commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: u32, size: u32, pValues: ?*const c_void) void;
pub extern fn vkCmdBeginRenderPass(commandBuffer: VkCommandBuffer, pRenderPassBegin: [*c]const VkRenderPassBeginInfo, contents: VkSubpassContents) void;
pub extern fn vkCmdNextSubpass(commandBuffer: VkCommandBuffer, contents: VkSubpassContents) void;
pub extern fn vkCmdEndRenderPass(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdExecuteCommands(commandBuffer: VkCommandBuffer, commandBufferCount: u32, pCommandBuffers: [*c]const VkCommandBuffer) void;
pub const struct_VkSamplerYcbcrConversion_T = @OpaqueType();
pub const VkSamplerYcbcrConversion = ?*struct_VkSamplerYcbcrConversion_T;
pub const struct_VkDescriptorUpdateTemplate_T = @OpaqueType();
pub const VkDescriptorUpdateTemplate = ?*struct_VkDescriptorUpdateTemplate_T;
pub const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = @enumToInt(enum_VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES);
pub const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = @enumToInt(enum_VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY);
pub const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = @enumToInt(enum_VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR);
pub const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = @enumToInt(enum_VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR);
pub const VK_POINT_CLIPPING_BEHAVIOR_BEGIN_RANGE = @enumToInt(enum_VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_BEGIN_RANGE);
pub const VK_POINT_CLIPPING_BEHAVIOR_END_RANGE = @enumToInt(enum_VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_END_RANGE);
pub const VK_POINT_CLIPPING_BEHAVIOR_RANGE_SIZE = @enumToInt(enum_VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_RANGE_SIZE);
pub const VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = @enumToInt(enum_VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM);
pub const enum_VkPointClippingBehavior = extern enum(c_int) {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1,
    VK_POINT_CLIPPING_BEHAVIOR_BEGIN_RANGE = 0,
    VK_POINT_CLIPPING_BEHAVIOR_END_RANGE = 1,
    VK_POINT_CLIPPING_BEHAVIOR_RANGE_SIZE = 2,
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647,
    _,
};
pub const VkPointClippingBehavior = enum_VkPointClippingBehavior;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = @enumToInt(enum_VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT);
pub const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = @enumToInt(enum_VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT);
pub const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = @enumToInt(enum_VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR);
pub const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = @enumToInt(enum_VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR);
pub const VK_TESSELLATION_DOMAIN_ORIGIN_BEGIN_RANGE = @enumToInt(enum_VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_BEGIN_RANGE);
pub const VK_TESSELLATION_DOMAIN_ORIGIN_END_RANGE = @enumToInt(enum_VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_END_RANGE);
pub const VK_TESSELLATION_DOMAIN_ORIGIN_RANGE_SIZE = @enumToInt(enum_VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_RANGE_SIZE);
pub const VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = @enumToInt(enum_VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM);
pub const enum_VkTessellationDomainOrigin = extern enum(c_int) {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_BEGIN_RANGE = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_END_RANGE = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_RANGE_SIZE = 2,
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647,
    _,
};
pub const VkTessellationDomainOrigin = enum_VkTessellationDomainOrigin;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_BEGIN_RANGE = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_BEGIN_RANGE);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_END_RANGE = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_END_RANGE);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RANGE_SIZE = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RANGE_SIZE);
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = @enumToInt(enum_VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM);
pub const enum_VkSamplerYcbcrModelConversion = extern enum(c_int) {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = 2,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = 3,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_BEGIN_RANGE = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_END_RANGE = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RANGE_SIZE = 5,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647,
    _,
};
pub const VkSamplerYcbcrModelConversion = enum_VkSamplerYcbcrModelConversion;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_FULL = @enumToInt(enum_VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL);
pub const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = @enumToInt(enum_VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW);
pub const VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = @enumToInt(enum_VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR);
pub const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = @enumToInt(enum_VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR);
pub const VK_SAMPLER_YCBCR_RANGE_BEGIN_RANGE = @enumToInt(enum_VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_BEGIN_RANGE);
pub const VK_SAMPLER_YCBCR_RANGE_END_RANGE = @enumToInt(enum_VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_END_RANGE);
pub const VK_SAMPLER_YCBCR_RANGE_RANGE_SIZE = @enumToInt(enum_VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_RANGE_SIZE);
pub const VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = @enumToInt(enum_VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_MAX_ENUM);
pub const enum_VkSamplerYcbcrRange = extern enum(c_int) {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1,
    VK_SAMPLER_YCBCR_RANGE_BEGIN_RANGE = 0,
    VK_SAMPLER_YCBCR_RANGE_END_RANGE = 1,
    VK_SAMPLER_YCBCR_RANGE_RANGE_SIZE = 2,
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647,
    _,
};
pub const VkSamplerYcbcrRange = enum_VkSamplerYcbcrRange;
pub const VK_CHROMA_LOCATION_COSITED_EVEN = @enumToInt(enum_VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN);
pub const VK_CHROMA_LOCATION_MIDPOINT = @enumToInt(enum_VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT);
pub const VK_CHROMA_LOCATION_COSITED_EVEN_KHR = @enumToInt(enum_VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN_KHR);
pub const VK_CHROMA_LOCATION_MIDPOINT_KHR = @enumToInt(enum_VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT_KHR);
pub const VK_CHROMA_LOCATION_BEGIN_RANGE = @enumToInt(enum_VkChromaLocation.VK_CHROMA_LOCATION_BEGIN_RANGE);
pub const VK_CHROMA_LOCATION_END_RANGE = @enumToInt(enum_VkChromaLocation.VK_CHROMA_LOCATION_END_RANGE);
pub const VK_CHROMA_LOCATION_RANGE_SIZE = @enumToInt(enum_VkChromaLocation.VK_CHROMA_LOCATION_RANGE_SIZE);
pub const VK_CHROMA_LOCATION_MAX_ENUM = @enumToInt(enum_VkChromaLocation.VK_CHROMA_LOCATION_MAX_ENUM);
pub const enum_VkChromaLocation = extern enum(c_int) {
    VK_CHROMA_LOCATION_COSITED_EVEN = 0,
    VK_CHROMA_LOCATION_MIDPOINT = 1,
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR = 0,
    VK_CHROMA_LOCATION_MIDPOINT_KHR = 1,
    VK_CHROMA_LOCATION_BEGIN_RANGE = 0,
    VK_CHROMA_LOCATION_END_RANGE = 1,
    VK_CHROMA_LOCATION_RANGE_SIZE = 2,
    VK_CHROMA_LOCATION_MAX_ENUM = 2147483647,
    _,
};
pub const VkChromaLocation = enum_VkChromaLocation;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = @enumToInt(enum_VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET);
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = @enumToInt(enum_VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR);
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = @enumToInt(enum_VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR);
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_BEGIN_RANGE = @enumToInt(enum_VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_BEGIN_RANGE);
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_END_RANGE = @enumToInt(enum_VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_END_RANGE);
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_RANGE_SIZE = @enumToInt(enum_VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_RANGE_SIZE);
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = @enumToInt(enum_VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM);
pub const enum_VkDescriptorUpdateTemplateType = extern enum(c_int) {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_BEGIN_RANGE = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_END_RANGE = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_RANGE_SIZE = 1,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647,
    _,
};
pub const VkDescriptorUpdateTemplateType = enum_VkDescriptorUpdateTemplateType;
pub const VK_SUBGROUP_FEATURE_BASIC_BIT = @enumToInt(enum_VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BASIC_BIT);
pub const VK_SUBGROUP_FEATURE_VOTE_BIT = @enumToInt(enum_VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_VOTE_BIT);
pub const VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = @enumToInt(enum_VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_ARITHMETIC_BIT);
pub const VK_SUBGROUP_FEATURE_BALLOT_BIT = @enumToInt(enum_VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BALLOT_BIT);
pub const VK_SUBGROUP_FEATURE_SHUFFLE_BIT = @enumToInt(enum_VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_BIT);
pub const VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = @enumToInt(enum_VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT);
pub const VK_SUBGROUP_FEATURE_CLUSTERED_BIT = @enumToInt(enum_VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_CLUSTERED_BIT);
pub const VK_SUBGROUP_FEATURE_QUAD_BIT = @enumToInt(enum_VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_QUAD_BIT);
pub const VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = @enumToInt(enum_VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV);
pub const VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_VkSubgroupFeatureFlagBits = extern enum(c_int) {
    VK_SUBGROUP_FEATURE_BASIC_BIT = 1,
    VK_SUBGROUP_FEATURE_VOTE_BIT = 2,
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
    VK_SUBGROUP_FEATURE_BALLOT_BIT = 8,
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
    VK_SUBGROUP_FEATURE_QUAD_BIT = 128,
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256,
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkSubgroupFeatureFlagBits = enum_VkSubgroupFeatureFlagBits;
pub const VkSubgroupFeatureFlags = VkFlags;
pub const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = @enumToInt(enum_VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT);
pub const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = @enumToInt(enum_VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT);
pub const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = @enumToInt(enum_VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT);
pub const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = @enumToInt(enum_VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT);
pub const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = @enumToInt(enum_VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR);
pub const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = @enumToInt(enum_VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR);
pub const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = @enumToInt(enum_VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR);
pub const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = @enumToInt(enum_VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR);
pub const VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_VkPeerMemoryFeatureFlagBits = extern enum(c_int) {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8,
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkPeerMemoryFeatureFlagBits = enum_VkPeerMemoryFeatureFlagBits;
pub const VkPeerMemoryFeatureFlags = VkFlags;
pub const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = @enumToInt(enum_VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT);
pub const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = @enumToInt(enum_VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR);
pub const VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM);
pub const enum_VkMemoryAllocateFlagBits = extern enum(c_int) {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1,
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkMemoryAllocateFlagBits = enum_VkMemoryAllocateFlagBits;
pub const VkMemoryAllocateFlags = VkFlags;
pub const VkCommandPoolTrimFlags = VkFlags;
pub const VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM);
pub const enum_VkExternalMemoryHandleTypeFlagBits = extern enum(c_int) {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = 8,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = 16,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = 32,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = 64,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkExternalMemoryHandleTypeFlagBits = enum_VkExternalMemoryHandleTypeFlagBits;
pub const VkExternalMemoryHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = @enumToInt(enum_VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT);
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = @enumToInt(enum_VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT);
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = @enumToInt(enum_VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT);
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = @enumToInt(enum_VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR);
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = @enumToInt(enum_VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR);
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = @enumToInt(enum_VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR);
pub const VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_VkExternalMemoryFeatureFlagBits = extern enum(c_int) {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkExternalMemoryFeatureFlagBits = enum_VkExternalMemoryFeatureFlagBits;
pub const VkExternalMemoryFeatureFlags = VkFlags;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = @enumToInt(enum_VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT);
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = @enumToInt(enum_VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT);
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = @enumToInt(enum_VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT);
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = @enumToInt(enum_VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT);
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = @enumToInt(enum_VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR);
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = @enumToInt(enum_VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR);
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = @enumToInt(enum_VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR);
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = @enumToInt(enum_VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR);
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM);
pub const enum_VkExternalFenceHandleTypeFlagBits = extern enum(c_int) {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkExternalFenceHandleTypeFlagBits = enum_VkExternalFenceHandleTypeFlagBits;
pub const VkExternalFenceHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = @enumToInt(enum_VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT);
pub const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = @enumToInt(enum_VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT);
pub const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = @enumToInt(enum_VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR);
pub const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = @enumToInt(enum_VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR);
pub const VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_VkExternalFenceFeatureFlagBits = extern enum(c_int) {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2,
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkExternalFenceFeatureFlagBits = enum_VkExternalFenceFeatureFlagBits;
pub const VkExternalFenceFeatureFlags = VkFlags;
pub const VK_FENCE_IMPORT_TEMPORARY_BIT = @enumToInt(enum_VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT);
pub const VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = @enumToInt(enum_VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT_KHR);
pub const VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkFenceImportFlagBits.VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM);
pub const enum_VkFenceImportFlagBits = extern enum(c_int) {
    VK_FENCE_IMPORT_TEMPORARY_BIT = 1,
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = 1,
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkFenceImportFlagBits = enum_VkFenceImportFlagBits;
pub const VkFenceImportFlags = VkFlags;
pub const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = @enumToInt(enum_VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT);
pub const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = @enumToInt(enum_VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR);
pub const VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM);
pub const enum_VkSemaphoreImportFlagBits = extern enum(c_int) {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1,
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkSemaphoreImportFlagBits = enum_VkSemaphoreImportFlagBits;
pub const VkSemaphoreImportFlags = VkFlags;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = @enumToInt(enum_VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT);
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = @enumToInt(enum_VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT);
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = @enumToInt(enum_VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT);
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = @enumToInt(enum_VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT);
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = @enumToInt(enum_VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT);
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = @enumToInt(enum_VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR);
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = @enumToInt(enum_VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR);
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = @enumToInt(enum_VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR);
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = @enumToInt(enum_VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR);
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = @enumToInt(enum_VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR);
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM);
pub const enum_VkExternalSemaphoreHandleTypeFlagBits = extern enum(c_int) {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkExternalSemaphoreHandleTypeFlagBits = enum_VkExternalSemaphoreHandleTypeFlagBits;
pub const VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = @enumToInt(enum_VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT);
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = @enumToInt(enum_VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT);
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = @enumToInt(enum_VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR);
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = @enumToInt(enum_VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR);
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = @enumToInt(enum_VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM);
pub const enum_VkExternalSemaphoreFeatureFlagBits = extern enum(c_int) {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2,
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
    _,
};
pub const VkExternalSemaphoreFeatureFlagBits = enum_VkExternalSemaphoreFeatureFlagBits;
pub const VkExternalSemaphoreFeatureFlags = VkFlags;
pub const struct_VkPhysicalDeviceSubgroupProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    subgroupSize: u32,
    supportedStages: VkShaderStageFlags,
    supportedOperations: VkSubgroupFeatureFlags,
    quadOperationsInAllStages: VkBool32,
};
pub const VkPhysicalDeviceSubgroupProperties = struct_VkPhysicalDeviceSubgroupProperties;
pub const struct_VkBindBufferMemoryInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    buffer: VkBuffer,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
};
pub const VkBindBufferMemoryInfo = struct_VkBindBufferMemoryInfo;
pub const struct_VkBindImageMemoryInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    image: VkImage,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
};
pub const VkBindImageMemoryInfo = struct_VkBindImageMemoryInfo;
pub const struct_VkPhysicalDevice16BitStorageFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    storageBuffer16BitAccess: VkBool32,
    uniformAndStorageBuffer16BitAccess: VkBool32,
    storagePushConstant16: VkBool32,
    storageInputOutput16: VkBool32,
};
pub const VkPhysicalDevice16BitStorageFeatures = struct_VkPhysicalDevice16BitStorageFeatures;
pub const struct_VkMemoryDedicatedRequirements = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    prefersDedicatedAllocation: VkBool32,
    requiresDedicatedAllocation: VkBool32,
};
pub const VkMemoryDedicatedRequirements = struct_VkMemoryDedicatedRequirements;
pub const struct_VkMemoryDedicatedAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    image: VkImage,
    buffer: VkBuffer,
};
pub const VkMemoryDedicatedAllocateInfo = struct_VkMemoryDedicatedAllocateInfo;
pub const struct_VkMemoryAllocateFlagsInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkMemoryAllocateFlags,
    deviceMask: u32,
};
pub const VkMemoryAllocateFlagsInfo = struct_VkMemoryAllocateFlagsInfo;
pub const struct_VkDeviceGroupRenderPassBeginInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    deviceMask: u32,
    deviceRenderAreaCount: u32,
    pDeviceRenderAreas: [*c]const VkRect2D,
};
pub const VkDeviceGroupRenderPassBeginInfo = struct_VkDeviceGroupRenderPassBeginInfo;
pub const struct_VkDeviceGroupCommandBufferBeginInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    deviceMask: u32,
};
pub const VkDeviceGroupCommandBufferBeginInfo = struct_VkDeviceGroupCommandBufferBeginInfo;
pub const struct_VkDeviceGroupSubmitInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphoreDeviceIndices: [*c]const u32,
    commandBufferCount: u32,
    pCommandBufferDeviceMasks: [*c]const u32,
    signalSemaphoreCount: u32,
    pSignalSemaphoreDeviceIndices: [*c]const u32,
};
pub const VkDeviceGroupSubmitInfo = struct_VkDeviceGroupSubmitInfo;
pub const struct_VkDeviceGroupBindSparseInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    resourceDeviceIndex: u32,
    memoryDeviceIndex: u32,
};
pub const VkDeviceGroupBindSparseInfo = struct_VkDeviceGroupBindSparseInfo;
pub const struct_VkBindBufferMemoryDeviceGroupInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    deviceIndexCount: u32,
    pDeviceIndices: [*c]const u32,
};
pub const VkBindBufferMemoryDeviceGroupInfo = struct_VkBindBufferMemoryDeviceGroupInfo;
pub const struct_VkBindImageMemoryDeviceGroupInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    deviceIndexCount: u32,
    pDeviceIndices: [*c]const u32,
    splitInstanceBindRegionCount: u32,
    pSplitInstanceBindRegions: [*c]const VkRect2D,
};
pub const VkBindImageMemoryDeviceGroupInfo = struct_VkBindImageMemoryDeviceGroupInfo;
pub const struct_VkPhysicalDeviceGroupProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    physicalDeviceCount: u32,
    physicalDevices: [32]VkPhysicalDevice,
    subsetAllocation: VkBool32,
};
pub const VkPhysicalDeviceGroupProperties = struct_VkPhysicalDeviceGroupProperties;
pub const struct_VkDeviceGroupDeviceCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    physicalDeviceCount: u32,
    pPhysicalDevices: [*c]const VkPhysicalDevice,
};
pub const VkDeviceGroupDeviceCreateInfo = struct_VkDeviceGroupDeviceCreateInfo;
pub const struct_VkBufferMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    buffer: VkBuffer,
};
pub const VkBufferMemoryRequirementsInfo2 = struct_VkBufferMemoryRequirementsInfo2;
pub const struct_VkImageMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    image: VkImage,
};
pub const VkImageMemoryRequirementsInfo2 = struct_VkImageMemoryRequirementsInfo2;
pub const struct_VkImageSparseMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    image: VkImage,
};
pub const VkImageSparseMemoryRequirementsInfo2 = struct_VkImageSparseMemoryRequirementsInfo2;
pub const struct_VkMemoryRequirements2 = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    memoryRequirements: VkMemoryRequirements,
};
pub const VkMemoryRequirements2 = struct_VkMemoryRequirements2;
pub const VkMemoryRequirements2KHR = VkMemoryRequirements2;
pub const struct_VkSparseImageMemoryRequirements2 = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    memoryRequirements: VkSparseImageMemoryRequirements,
};
pub const VkSparseImageMemoryRequirements2 = struct_VkSparseImageMemoryRequirements2;
pub const struct_VkPhysicalDeviceFeatures2 = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    features: VkPhysicalDeviceFeatures,
};
pub const VkPhysicalDeviceFeatures2 = struct_VkPhysicalDeviceFeatures2;
pub const struct_VkPhysicalDeviceProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    properties: VkPhysicalDeviceProperties,
};
pub const VkPhysicalDeviceProperties2 = struct_VkPhysicalDeviceProperties2;
pub const struct_VkFormatProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    formatProperties: VkFormatProperties,
};
pub const VkFormatProperties2 = struct_VkFormatProperties2;
pub const struct_VkImageFormatProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    imageFormatProperties: VkImageFormatProperties,
};
pub const VkImageFormatProperties2 = struct_VkImageFormatProperties2;
pub const struct_VkPhysicalDeviceImageFormatInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    format: VkFormat,
    type: VkImageType,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    flags: VkImageCreateFlags,
};
pub const VkPhysicalDeviceImageFormatInfo2 = struct_VkPhysicalDeviceImageFormatInfo2;
pub const struct_VkQueueFamilyProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    queueFamilyProperties: VkQueueFamilyProperties,
};
pub const VkQueueFamilyProperties2 = struct_VkQueueFamilyProperties2;
pub const struct_VkPhysicalDeviceMemoryProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    memoryProperties: VkPhysicalDeviceMemoryProperties,
};
pub const VkPhysicalDeviceMemoryProperties2 = struct_VkPhysicalDeviceMemoryProperties2;
pub const struct_VkSparseImageFormatProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    properties: VkSparseImageFormatProperties,
};
pub const VkSparseImageFormatProperties2 = struct_VkSparseImageFormatProperties2;
pub const struct_VkPhysicalDeviceSparseImageFormatInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    format: VkFormat,
    type: VkImageType,
    samples: VkSampleCountFlagBits,
    usage: VkImageUsageFlags,
    tiling: VkImageTiling,
};
pub const VkPhysicalDeviceSparseImageFormatInfo2 = struct_VkPhysicalDeviceSparseImageFormatInfo2;
pub const struct_VkPhysicalDevicePointClippingProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    pointClippingBehavior: VkPointClippingBehavior,
};
pub const VkPhysicalDevicePointClippingProperties = struct_VkPhysicalDevicePointClippingProperties;
pub const struct_VkInputAttachmentAspectReference = extern struct {
    subpass: u32,
    inputAttachmentIndex: u32,
    aspectMask: VkImageAspectFlags,
};
pub const VkInputAttachmentAspectReference = struct_VkInputAttachmentAspectReference;
pub const struct_VkRenderPassInputAttachmentAspectCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    aspectReferenceCount: u32,
    pAspectReferences: [*c]const VkInputAttachmentAspectReference,
};
pub const VkRenderPassInputAttachmentAspectCreateInfo = struct_VkRenderPassInputAttachmentAspectCreateInfo;
pub const struct_VkImageViewUsageCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    usage: VkImageUsageFlags,
};
pub const VkImageViewUsageCreateInfo = struct_VkImageViewUsageCreateInfo;
pub const struct_VkPipelineTessellationDomainOriginStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    domainOrigin: VkTessellationDomainOrigin,
};
pub const VkPipelineTessellationDomainOriginStateCreateInfo = struct_VkPipelineTessellationDomainOriginStateCreateInfo;
pub const struct_VkRenderPassMultiviewCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    subpassCount: u32,
    pViewMasks: [*c]const u32,
    dependencyCount: u32,
    pViewOffsets: [*c]const i32,
    correlationMaskCount: u32,
    pCorrelationMasks: [*c]const u32,
};
pub const VkRenderPassMultiviewCreateInfo = struct_VkRenderPassMultiviewCreateInfo;
pub const struct_VkPhysicalDeviceMultiviewFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    multiview: VkBool32,
    multiviewGeometryShader: VkBool32,
    multiviewTessellationShader: VkBool32,
};
pub const VkPhysicalDeviceMultiviewFeatures = struct_VkPhysicalDeviceMultiviewFeatures;
pub const struct_VkPhysicalDeviceMultiviewProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
};
pub const VkPhysicalDeviceMultiviewProperties = struct_VkPhysicalDeviceMultiviewProperties;
pub const struct_VkPhysicalDeviceVariablePointersFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    variablePointersStorageBuffer: VkBool32,
    variablePointers: VkBool32,
};
pub const VkPhysicalDeviceVariablePointersFeatures = struct_VkPhysicalDeviceVariablePointersFeatures;
pub const VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;
pub const struct_VkPhysicalDeviceProtectedMemoryFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    protectedMemory: VkBool32,
};
pub const VkPhysicalDeviceProtectedMemoryFeatures = struct_VkPhysicalDeviceProtectedMemoryFeatures;
pub const struct_VkPhysicalDeviceProtectedMemoryProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    protectedNoFault: VkBool32,
};
pub const VkPhysicalDeviceProtectedMemoryProperties = struct_VkPhysicalDeviceProtectedMemoryProperties;
pub const struct_VkDeviceQueueInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueIndex: u32,
};
pub const VkDeviceQueueInfo2 = struct_VkDeviceQueueInfo2;
pub const struct_VkProtectedSubmitInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    protectedSubmit: VkBool32,
};
pub const VkProtectedSubmitInfo = struct_VkProtectedSubmitInfo;
pub const struct_VkSamplerYcbcrConversionCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    format: VkFormat,
    ycbcrModel: VkSamplerYcbcrModelConversion,
    ycbcrRange: VkSamplerYcbcrRange,
    components: VkComponentMapping,
    xChromaOffset: VkChromaLocation,
    yChromaOffset: VkChromaLocation,
    chromaFilter: VkFilter,
    forceExplicitReconstruction: VkBool32,
};
pub const VkSamplerYcbcrConversionCreateInfo = struct_VkSamplerYcbcrConversionCreateInfo;
pub const struct_VkSamplerYcbcrConversionInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    conversion: VkSamplerYcbcrConversion,
};
pub const VkSamplerYcbcrConversionInfo = struct_VkSamplerYcbcrConversionInfo;
pub const struct_VkBindImagePlaneMemoryInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    planeAspect: VkImageAspectFlagBits,
};
pub const VkBindImagePlaneMemoryInfo = struct_VkBindImagePlaneMemoryInfo;
pub const struct_VkImagePlaneMemoryRequirementsInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    planeAspect: VkImageAspectFlagBits,
};
pub const VkImagePlaneMemoryRequirementsInfo = struct_VkImagePlaneMemoryRequirementsInfo;
pub const struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    samplerYcbcrConversion: VkBool32,
};
pub const VkPhysicalDeviceSamplerYcbcrConversionFeatures = struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub const struct_VkSamplerYcbcrConversionImageFormatProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    combinedImageSamplerDescriptorCount: u32,
};
pub const VkSamplerYcbcrConversionImageFormatProperties = struct_VkSamplerYcbcrConversionImageFormatProperties;
pub const struct_VkDescriptorUpdateTemplateEntry = extern struct {
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    offset: usize,
    stride: usize,
};
pub const VkDescriptorUpdateTemplateEntry = struct_VkDescriptorUpdateTemplateEntry;
pub const struct_VkDescriptorUpdateTemplateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkDescriptorUpdateTemplateCreateFlags,
    descriptorUpdateEntryCount: u32,
    pDescriptorUpdateEntries: [*c]const VkDescriptorUpdateTemplateEntry,
    templateType: VkDescriptorUpdateTemplateType,
    descriptorSetLayout: VkDescriptorSetLayout,
    pipelineBindPoint: VkPipelineBindPoint,
    pipelineLayout: VkPipelineLayout,
    set: u32,
};
pub const VkDescriptorUpdateTemplateCreateInfo = struct_VkDescriptorUpdateTemplateCreateInfo;
pub const struct_VkExternalMemoryProperties = extern struct {
    externalMemoryFeatures: VkExternalMemoryFeatureFlags,
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlags,
};
pub const VkExternalMemoryProperties = struct_VkExternalMemoryProperties;
pub const struct_VkPhysicalDeviceExternalImageFormatInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
};
pub const VkPhysicalDeviceExternalImageFormatInfo = struct_VkPhysicalDeviceExternalImageFormatInfo;
pub const struct_VkExternalImageFormatProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    externalMemoryProperties: VkExternalMemoryProperties,
};
pub const VkExternalImageFormatProperties = struct_VkExternalImageFormatProperties;
pub const struct_VkPhysicalDeviceExternalBufferInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkBufferCreateFlags,
    usage: VkBufferUsageFlags,
    handleType: VkExternalMemoryHandleTypeFlagBits,
};
pub const VkPhysicalDeviceExternalBufferInfo = struct_VkPhysicalDeviceExternalBufferInfo;
pub const struct_VkExternalBufferProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    externalMemoryProperties: VkExternalMemoryProperties,
};
pub const VkExternalBufferProperties = struct_VkExternalBufferProperties;
pub const struct_VkPhysicalDeviceIDProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    deviceUUID: [16]u8,
    driverUUID: [16]u8,
    deviceLUID: [8]u8,
    deviceNodeMask: u32,
    deviceLUIDValid: VkBool32,
};
pub const VkPhysicalDeviceIDProperties = struct_VkPhysicalDeviceIDProperties;
pub const struct_VkExternalMemoryImageCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
};
pub const VkExternalMemoryImageCreateInfo = struct_VkExternalMemoryImageCreateInfo;
pub const struct_VkExternalMemoryBufferCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
};
pub const VkExternalMemoryBufferCreateInfo = struct_VkExternalMemoryBufferCreateInfo;
pub const struct_VkExportMemoryAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
};
pub const VkExportMemoryAllocateInfo = struct_VkExportMemoryAllocateInfo;
pub const struct_VkPhysicalDeviceExternalFenceInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleType: VkExternalFenceHandleTypeFlagBits,
};
pub const VkPhysicalDeviceExternalFenceInfo = struct_VkPhysicalDeviceExternalFenceInfo;
pub const struct_VkExternalFenceProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
    compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
    externalFenceFeatures: VkExternalFenceFeatureFlags,
};
pub const VkExternalFenceProperties = struct_VkExternalFenceProperties;
pub const struct_VkExportFenceCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleTypes: VkExternalFenceHandleTypeFlags,
};
pub const VkExportFenceCreateInfo = struct_VkExportFenceCreateInfo;
pub const struct_VkExportSemaphoreCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleTypes: VkExternalSemaphoreHandleTypeFlags,
};
pub const VkExportSemaphoreCreateInfo = struct_VkExportSemaphoreCreateInfo;
pub const struct_VkPhysicalDeviceExternalSemaphoreInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
};
pub const VkPhysicalDeviceExternalSemaphoreInfo = struct_VkPhysicalDeviceExternalSemaphoreInfo;
pub const struct_VkExternalSemaphoreProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags,
};
pub const VkExternalSemaphoreProperties = struct_VkExternalSemaphoreProperties;
pub const struct_VkPhysicalDeviceMaintenance3Properties = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: VkDeviceSize,
};
pub const VkPhysicalDeviceMaintenance3Properties = struct_VkPhysicalDeviceMaintenance3Properties;
pub const struct_VkDescriptorSetLayoutSupport = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    supported: VkBool32,
};
pub const VkDescriptorSetLayoutSupport = struct_VkDescriptorSetLayoutSupport;
pub const struct_VkPhysicalDeviceShaderDrawParametersFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shaderDrawParameters: VkBool32,
};
pub const VkPhysicalDeviceShaderDrawParametersFeatures = struct_VkPhysicalDeviceShaderDrawParametersFeatures;
pub const VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;
pub const PFN_vkEnumerateInstanceVersion = ?fn ([*c]u32) callconv(.C) VkResult;
pub const PFN_vkBindBufferMemory2 = ?fn (VkDevice, u32, [*c]const VkBindBufferMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory2 = ?fn (VkDevice, u32, [*c]const VkBindImageMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupPeerMemoryFeatures = ?fn (VkDevice, u32, u32, u32, [*c]VkPeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMask = ?fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBase = ?fn (VkCommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDeviceGroups = ?fn (VkInstance, [*c]u32, [*c]VkPhysicalDeviceGroupProperties) callconv(.C) VkResult;
pub const PFN_vkGetImageMemoryRequirements2 = ?fn (VkDevice, [*c]const VkImageMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2 = ?fn (VkDevice, [*c]const VkBufferMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2 = ?fn (VkDevice, [*c]const VkImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFeatures2 = ?fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2 = ?fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2 = ?fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2 = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceImageFormatInfo2, [*c]VkImageFormatProperties2) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = ?fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2 = ?fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]VkSparseImageFormatProperties2) callconv(.C) void;
pub const PFN_vkTrimCommandPool = ?fn (VkDevice, VkCommandPool, VkCommandPoolTrimFlags) callconv(.C) void;
pub const PFN_vkGetDeviceQueue2 = ?fn (VkDevice, [*c]const VkDeviceQueueInfo2, [*c]VkQueue) callconv(.C) void;
pub const PFN_vkCreateSamplerYcbcrConversion = ?fn (VkDevice, [*c]const VkSamplerYcbcrConversionCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSamplerYcbcrConversion) callconv(.C) VkResult;
pub const PFN_vkDestroySamplerYcbcrConversion = ?fn (VkDevice, VkSamplerYcbcrConversion, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorUpdateTemplate = ?fn (VkDevice, [*c]const VkDescriptorUpdateTemplateCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorUpdateTemplate) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorUpdateTemplate = ?fn (VkDevice, VkDescriptorUpdateTemplate, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplate = ?fn (VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ?*const c_void) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalBufferProperties = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalBufferInfo, [*c]VkExternalBufferProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalFenceProperties = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalFenceInfo, [*c]VkExternalFenceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalSemaphoreInfo, [*c]VkExternalSemaphoreProperties) callconv(.C) void;
pub const PFN_vkGetDescriptorSetLayoutSupport = ?fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]VkDescriptorSetLayoutSupport) callconv(.C) void;
pub extern fn vkEnumerateInstanceVersion(pApiVersion: [*c]u32) VkResult;
pub extern fn vkBindBufferMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindBufferMemoryInfo) VkResult;
pub extern fn vkBindImageMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindImageMemoryInfo) VkResult;
pub extern fn vkGetDeviceGroupPeerMemoryFeatures(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: [*c]VkPeerMemoryFeatureFlags) void;
pub extern fn vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer, deviceMask: u32) void;
pub extern fn vkCmdDispatchBase(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkEnumeratePhysicalDeviceGroups(instance: VkInstance, pPhysicalDeviceGroupCount: [*c]u32, pPhysicalDeviceGroupProperties: [*c]VkPhysicalDeviceGroupProperties) VkResult;
pub extern fn vkGetImageMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkImageMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetBufferMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetImageSparseMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub extern fn vkGetPhysicalDeviceFeatures2(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures2) void;
pub extern fn vkGetPhysicalDeviceProperties2(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties2) void;
pub extern fn vkGetPhysicalDeviceFormatProperties2(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties2) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties2(physicalDevice: VkPhysicalDevice, pImageFormatInfo: [*c]const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: [*c]VkImageFormatProperties2) VkResult;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties2) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties2(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties2) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: VkPhysicalDevice, pFormatInfo: [*c]const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties2) void;
pub extern fn vkTrimCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) void;
pub extern fn vkGetDeviceQueue2(device: VkDevice, pQueueInfo: [*c]const VkDeviceQueueInfo2, pQueue: [*c]VkQueue) void;
pub extern fn vkCreateSamplerYcbcrConversion(device: VkDevice, pCreateInfo: [*c]const VkSamplerYcbcrConversionCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pYcbcrConversion: [*c]VkSamplerYcbcrConversion) VkResult;
pub extern fn vkDestroySamplerYcbcrConversion(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorUpdateTemplate(device: VkDevice, pCreateInfo: [*c]const VkDescriptorUpdateTemplateCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorUpdateTemplate: [*c]VkDescriptorUpdateTemplate) VkResult;
pub extern fn vkDestroyDescriptorUpdateTemplate(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkUpdateDescriptorSetWithTemplate(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: ?*const c_void) void;
pub extern fn vkGetPhysicalDeviceExternalBufferProperties(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: [*c]const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: [*c]VkExternalBufferProperties) void;
pub extern fn vkGetPhysicalDeviceExternalFenceProperties(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: [*c]const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: [*c]VkExternalFenceProperties) void;
pub extern fn vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: [*c]const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: [*c]VkExternalSemaphoreProperties) void;
pub extern fn vkGetDescriptorSetLayoutSupport(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pSupport: [*c]VkDescriptorSetLayoutSupport) void;
pub const struct_VkSurfaceKHR_T = @OpaqueType();
pub const VkSurfaceKHR = ?*struct_VkSurfaceKHR_T;
pub const VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_SRGB_NONLINEAR_KHR);
pub const VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT);
pub const VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT);
pub const VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT);
pub const VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT);
pub const VK_COLOR_SPACE_BT709_LINEAR_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_BT709_LINEAR_EXT);
pub const VK_COLOR_SPACE_BT709_NONLINEAR_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_BT709_NONLINEAR_EXT);
pub const VK_COLOR_SPACE_BT2020_LINEAR_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_BT2020_LINEAR_EXT);
pub const VK_COLOR_SPACE_HDR10_ST2084_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_ST2084_EXT);
pub const VK_COLOR_SPACE_DOLBYVISION_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_DOLBYVISION_EXT);
pub const VK_COLOR_SPACE_HDR10_HLG_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_HLG_EXT);
pub const VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT);
pub const VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT);
pub const VK_COLOR_SPACE_PASS_THROUGH_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_PASS_THROUGH_EXT);
pub const VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT);
pub const VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_NATIVE_AMD);
pub const VK_COLORSPACE_SRGB_NONLINEAR_KHR = @enumToInt(enum_VkColorSpaceKHR.VK_COLORSPACE_SRGB_NONLINEAR_KHR);
pub const VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_LINEAR_EXT);
pub const VK_COLOR_SPACE_BEGIN_RANGE_KHR = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_BEGIN_RANGE_KHR);
pub const VK_COLOR_SPACE_END_RANGE_KHR = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_END_RANGE_KHR);
pub const VK_COLOR_SPACE_RANGE_SIZE_KHR = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_RANGE_SIZE_KHR);
pub const VK_COLOR_SPACE_MAX_ENUM_KHR = @enumToInt(enum_VkColorSpaceKHR.VK_COLOR_SPACE_MAX_ENUM_KHR);
pub const enum_VkColorSpaceKHR = extern enum(c_int) {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
    VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
    VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
    VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
    VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
    VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
    VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
    VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0,
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003,
    VK_COLOR_SPACE_BEGIN_RANGE_KHR = 0,
    VK_COLOR_SPACE_END_RANGE_KHR = 0,
    VK_COLOR_SPACE_RANGE_SIZE_KHR = 1,
    VK_COLOR_SPACE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const VkColorSpaceKHR = enum_VkColorSpaceKHR;
pub const VK_PRESENT_MODE_IMMEDIATE_KHR = @enumToInt(enum_VkPresentModeKHR.VK_PRESENT_MODE_IMMEDIATE_KHR);
pub const VK_PRESENT_MODE_MAILBOX_KHR = @enumToInt(enum_VkPresentModeKHR.VK_PRESENT_MODE_MAILBOX_KHR);
pub const VK_PRESENT_MODE_FIFO_KHR = @enumToInt(enum_VkPresentModeKHR.VK_PRESENT_MODE_FIFO_KHR);
pub const VK_PRESENT_MODE_FIFO_RELAXED_KHR = @enumToInt(enum_VkPresentModeKHR.VK_PRESENT_MODE_FIFO_RELAXED_KHR);
pub const VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = @enumToInt(enum_VkPresentModeKHR.VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR);
pub const VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = @enumToInt(enum_VkPresentModeKHR.VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR);
pub const VK_PRESENT_MODE_BEGIN_RANGE_KHR = @enumToInt(enum_VkPresentModeKHR.VK_PRESENT_MODE_BEGIN_RANGE_KHR);
pub const VK_PRESENT_MODE_END_RANGE_KHR = @enumToInt(enum_VkPresentModeKHR.VK_PRESENT_MODE_END_RANGE_KHR);
pub const VK_PRESENT_MODE_RANGE_SIZE_KHR = @enumToInt(enum_VkPresentModeKHR.VK_PRESENT_MODE_RANGE_SIZE_KHR);
pub const VK_PRESENT_MODE_MAX_ENUM_KHR = @enumToInt(enum_VkPresentModeKHR.VK_PRESENT_MODE_MAX_ENUM_KHR);
pub const enum_VkPresentModeKHR = extern enum(c_int) {
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
    VK_PRESENT_MODE_MAILBOX_KHR = 1,
    VK_PRESENT_MODE_FIFO_KHR = 2,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
    VK_PRESENT_MODE_BEGIN_RANGE_KHR = 0,
    VK_PRESENT_MODE_END_RANGE_KHR = 3,
    VK_PRESENT_MODE_RANGE_SIZE_KHR = 4,
    VK_PRESENT_MODE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const VkPresentModeKHR = enum_VkPresentModeKHR;
pub const VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = @enumToInt(enum_VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR);
pub const VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = @enumToInt(enum_VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR);
pub const VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = @enumToInt(enum_VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR);
pub const VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = @enumToInt(enum_VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR);
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = @enumToInt(enum_VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR);
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = @enumToInt(enum_VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR);
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = @enumToInt(enum_VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR);
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = @enumToInt(enum_VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR);
pub const VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = @enumToInt(enum_VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR);
pub const VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_VkSurfaceTransformFlagBitsKHR = extern enum(c_int) {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2,
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4,
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const VkSurfaceTransformFlagBitsKHR = enum_VkSurfaceTransformFlagBitsKHR;
pub const VkSurfaceTransformFlagsKHR = VkFlags;
pub const VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = @enumToInt(enum_VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR);
pub const VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = @enumToInt(enum_VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR);
pub const VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = @enumToInt(enum_VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR);
pub const VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = @enumToInt(enum_VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR);
pub const VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_VkCompositeAlphaFlagBitsKHR = extern enum(c_int) {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const VkCompositeAlphaFlagBitsKHR = enum_VkCompositeAlphaFlagBitsKHR;
pub const VkCompositeAlphaFlagsKHR = VkFlags;
pub const struct_VkSurfaceCapabilitiesKHR = extern struct {
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: VkExtent2D,
    minImageExtent: VkExtent2D,
    maxImageExtent: VkExtent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    currentTransform: VkSurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    supportedUsageFlags: VkImageUsageFlags,
};
pub const VkSurfaceCapabilitiesKHR = struct_VkSurfaceCapabilitiesKHR;
pub const struct_VkSurfaceFormatKHR = extern struct {
    format: VkFormat,
    colorSpace: VkColorSpaceKHR,
};
pub const VkSurfaceFormatKHR = struct_VkSurfaceFormatKHR;
pub const PFN_vkDestroySurfaceKHR = ?fn (VkInstance, VkSurfaceKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSurfaceSupportKHR = ?fn (VkPhysicalDevice, u32, VkSurfaceKHR, [*c]VkBool32) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = ?fn (VkPhysicalDevice, VkSurfaceKHR, [*c]VkSurfaceCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = ?fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkSurfaceFormatKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = ?fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkPresentModeKHR) callconv(.C) VkResult;
pub extern fn vkDestroySurfaceKHR(instance: VkInstance, surface: VkSurfaceKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, surface: VkSurfaceKHR, pSupported: [*c]VkBool32) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilitiesKHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: [*c]u32, pSurfaceFormats: [*c]VkSurfaceFormatKHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: [*c]u32, pPresentModes: [*c]VkPresentModeKHR) VkResult;
pub const struct_VkSwapchainKHR_T = @OpaqueType();
pub const VkSwapchainKHR = ?*struct_VkSwapchainKHR_T;
pub const VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = @enumToInt(enum_VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR);
pub const VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = @enumToInt(enum_VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR);
pub const VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = @enumToInt(enum_VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR);
pub const VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_VkSwapchainCreateFlagBitsKHR = extern enum(c_int) {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2,
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4,
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const VkSwapchainCreateFlagBitsKHR = enum_VkSwapchainCreateFlagBitsKHR;
pub const VkSwapchainCreateFlagsKHR = VkFlags;
pub const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = @enumToInt(enum_VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR);
pub const VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = @enumToInt(enum_VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR);
pub const VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = @enumToInt(enum_VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR);
pub const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = @enumToInt(enum_VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR);
pub const VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_VkDeviceGroupPresentModeFlagBitsKHR = extern enum(c_int) {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1,
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2,
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4,
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8,
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const VkDeviceGroupPresentModeFlagBitsKHR = enum_VkDeviceGroupPresentModeFlagBitsKHR;
pub const VkDeviceGroupPresentModeFlagsKHR = VkFlags;
pub const struct_VkSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkSwapchainCreateFlagsKHR,
    surface: VkSurfaceKHR,
    minImageCount: u32,
    imageFormat: VkFormat,
    imageColorSpace: VkColorSpaceKHR,
    imageExtent: VkExtent2D,
    imageArrayLayers: u32,
    imageUsage: VkImageUsageFlags,
    imageSharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
    preTransform: VkSurfaceTransformFlagBitsKHR,
    compositeAlpha: VkCompositeAlphaFlagBitsKHR,
    presentMode: VkPresentModeKHR,
    clipped: VkBool32,
    oldSwapchain: VkSwapchainKHR,
};
pub const VkSwapchainCreateInfoKHR = struct_VkSwapchainCreateInfoKHR;
pub const struct_VkPresentInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: [*c]const VkSemaphore,
    swapchainCount: u32,
    pSwapchains: [*c]const VkSwapchainKHR,
    pImageIndices: [*c]const u32,
    pResults: [*c]VkResult,
};
pub const VkPresentInfoKHR = struct_VkPresentInfoKHR;
pub const struct_VkImageSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    swapchain: VkSwapchainKHR,
};
pub const VkImageSwapchainCreateInfoKHR = struct_VkImageSwapchainCreateInfoKHR;
pub const struct_VkBindImageMemorySwapchainInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    swapchain: VkSwapchainKHR,
    imageIndex: u32,
};
pub const VkBindImageMemorySwapchainInfoKHR = struct_VkBindImageMemorySwapchainInfoKHR;
pub const struct_VkAcquireNextImageInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    swapchain: VkSwapchainKHR,
    timeout: u64,
    semaphore: VkSemaphore,
    fence: VkFence,
    deviceMask: u32,
};
pub const VkAcquireNextImageInfoKHR = struct_VkAcquireNextImageInfoKHR;
pub const struct_VkDeviceGroupPresentCapabilitiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    presentMask: [32]u32,
    modes: VkDeviceGroupPresentModeFlagsKHR,
};
pub const VkDeviceGroupPresentCapabilitiesKHR = struct_VkDeviceGroupPresentCapabilitiesKHR;
pub const struct_VkDeviceGroupPresentInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    swapchainCount: u32,
    pDeviceMasks: [*c]const u32,
    mode: VkDeviceGroupPresentModeFlagBitsKHR,
};
pub const VkDeviceGroupPresentInfoKHR = struct_VkDeviceGroupPresentInfoKHR;
pub const struct_VkDeviceGroupSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    modes: VkDeviceGroupPresentModeFlagsKHR,
};
pub const VkDeviceGroupSwapchainCreateInfoKHR = struct_VkDeviceGroupSwapchainCreateInfoKHR;
pub const PFN_vkCreateSwapchainKHR = ?fn (VkDevice, [*c]const VkSwapchainCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSwapchainKHR) callconv(.C) VkResult;
pub const PFN_vkDestroySwapchainKHR = ?fn (VkDevice, VkSwapchainKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetSwapchainImagesKHR = ?fn (VkDevice, VkSwapchainKHR, [*c]u32, [*c]VkImage) callconv(.C) VkResult;
pub const PFN_vkAcquireNextImageKHR = ?fn (VkDevice, VkSwapchainKHR, u64, VkSemaphore, VkFence, [*c]u32) callconv(.C) VkResult;
pub const PFN_vkQueuePresentKHR = ?fn (VkQueue, [*c]const VkPresentInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupPresentCapabilitiesKHR = ?fn (VkDevice, [*c]VkDeviceGroupPresentCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupSurfacePresentModesKHR = ?fn (VkDevice, VkSurfaceKHR, [*c]VkDeviceGroupPresentModeFlagsKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDevicePresentRectanglesKHR = ?fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkRect2D) callconv(.C) VkResult;
pub const PFN_vkAcquireNextImage2KHR = ?fn (VkDevice, [*c]const VkAcquireNextImageInfoKHR, [*c]u32) callconv(.C) VkResult;
pub extern fn vkCreateSwapchainKHR(device: VkDevice, pCreateInfo: [*c]const VkSwapchainCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSwapchain: [*c]VkSwapchainKHR) VkResult;
pub extern fn vkDestroySwapchainKHR(device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetSwapchainImagesKHR(device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: [*c]u32, pSwapchainImages: [*c]VkImage) VkResult;
pub extern fn vkAcquireNextImageKHR(device: VkDevice, swapchain: VkSwapchainKHR, timeout: u64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: [*c]u32) VkResult;
pub extern fn vkQueuePresentKHR(queue: VkQueue, pPresentInfo: [*c]const VkPresentInfoKHR) VkResult;
pub extern fn vkGetDeviceGroupPresentCapabilitiesKHR(device: VkDevice, pDeviceGroupPresentCapabilities: [*c]VkDeviceGroupPresentCapabilitiesKHR) VkResult;
pub extern fn vkGetDeviceGroupSurfacePresentModesKHR(device: VkDevice, surface: VkSurfaceKHR, pModes: [*c]VkDeviceGroupPresentModeFlagsKHR) VkResult;
pub extern fn vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: [*c]u32, pRects: [*c]VkRect2D) VkResult;
pub extern fn vkAcquireNextImage2KHR(device: VkDevice, pAcquireInfo: [*c]const VkAcquireNextImageInfoKHR, pImageIndex: [*c]u32) VkResult;
pub const struct_VkDisplayKHR_T = @OpaqueType();
pub const VkDisplayKHR = ?*struct_VkDisplayKHR_T;
pub const struct_VkDisplayModeKHR_T = @OpaqueType();
pub const VkDisplayModeKHR = ?*struct_VkDisplayModeKHR_T;
pub const VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = @enumToInt(enum_VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR);
pub const VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = @enumToInt(enum_VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR);
pub const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = @enumToInt(enum_VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR);
pub const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = @enumToInt(enum_VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR);
pub const VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_VkDisplayPlaneAlphaFlagBitsKHR = extern enum(c_int) {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1,
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8,
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const VkDisplayPlaneAlphaFlagBitsKHR = enum_VkDisplayPlaneAlphaFlagBitsKHR;
pub const VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub const VkDisplayModeCreateFlagsKHR = VkFlags;
pub const VkDisplaySurfaceCreateFlagsKHR = VkFlags;
pub const struct_VkDisplayPropertiesKHR = extern struct {
    display: VkDisplayKHR,
    displayName: [*c]const u8,
    physicalDimensions: VkExtent2D,
    physicalResolution: VkExtent2D,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    planeReorderPossible: VkBool32,
    persistentContent: VkBool32,
};
pub const VkDisplayPropertiesKHR = struct_VkDisplayPropertiesKHR;
pub const struct_VkDisplayModeParametersKHR = extern struct {
    visibleRegion: VkExtent2D,
    refreshRate: u32,
};
pub const VkDisplayModeParametersKHR = struct_VkDisplayModeParametersKHR;
pub const struct_VkDisplayModePropertiesKHR = extern struct {
    displayMode: VkDisplayModeKHR,
    parameters: VkDisplayModeParametersKHR,
};
pub const VkDisplayModePropertiesKHR = struct_VkDisplayModePropertiesKHR;
pub const struct_VkDisplayModeCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkDisplayModeCreateFlagsKHR,
    parameters: VkDisplayModeParametersKHR,
};
pub const VkDisplayModeCreateInfoKHR = struct_VkDisplayModeCreateInfoKHR;
pub const struct_VkDisplayPlaneCapabilitiesKHR = extern struct {
    supportedAlpha: VkDisplayPlaneAlphaFlagsKHR,
    minSrcPosition: VkOffset2D,
    maxSrcPosition: VkOffset2D,
    minSrcExtent: VkExtent2D,
    maxSrcExtent: VkExtent2D,
    minDstPosition: VkOffset2D,
    maxDstPosition: VkOffset2D,
    minDstExtent: VkExtent2D,
    maxDstExtent: VkExtent2D,
};
pub const VkDisplayPlaneCapabilitiesKHR = struct_VkDisplayPlaneCapabilitiesKHR;
pub const struct_VkDisplayPlanePropertiesKHR = extern struct {
    currentDisplay: VkDisplayKHR,
    currentStackIndex: u32,
};
pub const VkDisplayPlanePropertiesKHR = struct_VkDisplayPlanePropertiesKHR;
pub const struct_VkDisplaySurfaceCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkDisplaySurfaceCreateFlagsKHR,
    displayMode: VkDisplayModeKHR,
    planeIndex: u32,
    planeStackIndex: u32,
    transform: VkSurfaceTransformFlagBitsKHR,
    globalAlpha: f32,
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR,
    imageExtent: VkExtent2D,
};
pub const VkDisplaySurfaceCreateInfoKHR = struct_VkDisplaySurfaceCreateInfoKHR;
pub const PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = ?fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = ?fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPlanePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneSupportedDisplaysKHR = ?fn (VkPhysicalDevice, u32, [*c]u32, [*c]VkDisplayKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayModePropertiesKHR = ?fn (VkPhysicalDevice, VkDisplayKHR, [*c]u32, [*c]VkDisplayModePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateDisplayModeKHR = ?fn (VkPhysicalDevice, VkDisplayKHR, [*c]const VkDisplayModeCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkDisplayModeKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneCapabilitiesKHR = ?fn (VkPhysicalDevice, VkDisplayModeKHR, u32, [*c]VkDisplayPlaneCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateDisplayPlaneSurfaceKHR = ?fn (VkInstance, [*c]const VkDisplaySurfaceCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSurfaceKHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPropertiesKHR) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPlanePropertiesKHR) VkResult;
pub extern fn vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice: VkPhysicalDevice, planeIndex: u32, pDisplayCount: [*c]u32, pDisplays: [*c]VkDisplayKHR) VkResult;
pub extern fn vkGetDisplayModePropertiesKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayModePropertiesKHR) VkResult;
pub extern fn vkCreateDisplayModeKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: [*c]const VkDisplayModeCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pMode: [*c]VkDisplayModeKHR) VkResult;
pub extern fn vkGetDisplayPlaneCapabilitiesKHR(physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: u32, pCapabilities: [*c]VkDisplayPlaneCapabilitiesKHR) VkResult;
pub extern fn vkCreateDisplayPlaneSurfaceKHR(instance: VkInstance, pCreateInfo: [*c]const VkDisplaySurfaceCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSurface: [*c]VkSurfaceKHR) VkResult;
pub const struct_VkDisplayPresentInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    srcRect: VkRect2D,
    dstRect: VkRect2D,
    persistent: VkBool32,
};
pub const VkDisplayPresentInfoKHR = struct_VkDisplayPresentInfoKHR;
pub const PFN_vkCreateSharedSwapchainsKHR = ?fn (VkDevice, u32, [*c]const VkSwapchainCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSwapchainKHR) callconv(.C) VkResult;
pub extern fn vkCreateSharedSwapchainsKHR(device: VkDevice, swapchainCount: u32, pCreateInfos: [*c]const VkSwapchainCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSwapchains: [*c]VkSwapchainKHR) VkResult;
pub const VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;
pub const VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;
pub const VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;
pub const VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;
pub const VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;
pub const VkFormatProperties2KHR = VkFormatProperties2;
pub const VkImageFormatProperties2KHR = VkImageFormatProperties2;
pub const VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;
pub const VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;
pub const VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;
pub const VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;
pub const VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;
pub const PFN_vkGetPhysicalDeviceFeatures2KHR = ?fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2KHR = ?fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2KHR = ?fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceImageFormatInfo2, [*c]VkImageFormatProperties2) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = ?fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2KHR = ?fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]VkSparseImageFormatProperties2) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceFeatures2KHR(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures2) void;
pub extern fn vkGetPhysicalDeviceProperties2KHR(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties2) void;
pub extern fn vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties2) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pImageFormatInfo: [*c]const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: [*c]VkImageFormatProperties2) VkResult;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties2) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties2) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pFormatInfo: [*c]const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties2) void;
pub const VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
pub const VkPeerMemoryFeatureFlagBitsKHR = VkPeerMemoryFeatureFlagBits;
pub const VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
pub const VkMemoryAllocateFlagBitsKHR = VkMemoryAllocateFlagBits;
pub const VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;
pub const VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;
pub const VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;
pub const VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;
pub const VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;
pub const VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;
pub const VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;
pub const PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = ?fn (VkDevice, u32, u32, u32, [*c]VkPeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMaskKHR = ?fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBaseKHR = ?fn (VkCommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub extern fn vkGetDeviceGroupPeerMemoryFeaturesKHR(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: [*c]VkPeerMemoryFeatureFlags) void;
pub extern fn vkCmdSetDeviceMaskKHR(commandBuffer: VkCommandBuffer, deviceMask: u32) void;
pub extern fn vkCmdDispatchBaseKHR(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub const VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
pub const PFN_vkTrimCommandPoolKHR = ?fn (VkDevice, VkCommandPool, VkCommandPoolTrimFlags) callconv(.C) void;
pub extern fn vkTrimCommandPoolKHR(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) void;
pub const VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;
pub const VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;
pub const PFN_vkEnumeratePhysicalDeviceGroupsKHR = ?fn (VkInstance, [*c]u32, [*c]VkPhysicalDeviceGroupProperties) callconv(.C) VkResult;
pub extern fn vkEnumeratePhysicalDeviceGroupsKHR(instance: VkInstance, pPhysicalDeviceGroupCount: [*c]u32, pPhysicalDeviceGroupProperties: [*c]VkPhysicalDeviceGroupProperties) VkResult;
pub const VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
pub const VkExternalMemoryHandleTypeFlagBitsKHR = VkExternalMemoryHandleTypeFlagBits;
pub const VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
pub const VkExternalMemoryFeatureFlagBitsKHR = VkExternalMemoryFeatureFlagBits;
pub const VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;
pub const VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
pub const VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;
pub const VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;
pub const VkExternalBufferPropertiesKHR = VkExternalBufferProperties;
pub const VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;
pub const PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalBufferInfo, [*c]VkExternalBufferProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: [*c]const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: [*c]VkExternalBufferProperties) void;
pub const VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;
pub const VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;
pub const VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;
pub const struct_VkImportMemoryFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    fd: c_int,
};
pub const VkImportMemoryFdInfoKHR = struct_VkImportMemoryFdInfoKHR;
pub const struct_VkMemoryFdPropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    memoryTypeBits: u32,
};
pub const VkMemoryFdPropertiesKHR = struct_VkMemoryFdPropertiesKHR;
pub const struct_VkMemoryGetFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    memory: VkDeviceMemory,
    handleType: VkExternalMemoryHandleTypeFlagBits,
};
pub const VkMemoryGetFdInfoKHR = struct_VkMemoryGetFdInfoKHR;
pub const PFN_vkGetMemoryFdKHR = ?fn (VkDevice, [*c]const VkMemoryGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub const PFN_vkGetMemoryFdPropertiesKHR = ?fn (VkDevice, VkExternalMemoryHandleTypeFlagBits, c_int, [*c]VkMemoryFdPropertiesKHR) callconv(.C) VkResult;
pub extern fn vkGetMemoryFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkMemoryGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub extern fn vkGetMemoryFdPropertiesKHR(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: c_int, pMemoryFdProperties: [*c]VkMemoryFdPropertiesKHR) VkResult;
pub const VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
pub const VkExternalSemaphoreHandleTypeFlagBitsKHR = VkExternalSemaphoreHandleTypeFlagBits;
pub const VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
pub const VkExternalSemaphoreFeatureFlagBitsKHR = VkExternalSemaphoreFeatureFlagBits;
pub const VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
pub const VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;
pub const PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalSemaphoreInfo, [*c]VkExternalSemaphoreProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: [*c]const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: [*c]VkExternalSemaphoreProperties) void;
pub const VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
pub const VkSemaphoreImportFlagBitsKHR = VkSemaphoreImportFlagBits;
pub const VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
pub const struct_VkImportSemaphoreFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    semaphore: VkSemaphore,
    flags: VkSemaphoreImportFlags,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
    fd: c_int,
};
pub const VkImportSemaphoreFdInfoKHR = struct_VkImportSemaphoreFdInfoKHR;
pub const struct_VkSemaphoreGetFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    semaphore: VkSemaphore,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
};
pub const VkSemaphoreGetFdInfoKHR = struct_VkSemaphoreGetFdInfoKHR;
pub const PFN_vkImportSemaphoreFdKHR = ?fn (VkDevice, [*c]const VkImportSemaphoreFdInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetSemaphoreFdKHR = ?fn (VkDevice, [*c]const VkSemaphoreGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub extern fn vkImportSemaphoreFdKHR(device: VkDevice, pImportSemaphoreFdInfo: [*c]const VkImportSemaphoreFdInfoKHR) VkResult;
pub extern fn vkGetSemaphoreFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkSemaphoreGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub const struct_VkPhysicalDevicePushDescriptorPropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    maxPushDescriptors: u32,
};
pub const VkPhysicalDevicePushDescriptorPropertiesKHR = struct_VkPhysicalDevicePushDescriptorPropertiesKHR;
pub const PFN_vkCmdPushDescriptorSetKHR = ?fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const VkWriteDescriptorSet) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSetWithTemplateKHR = ?fn (VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, u32, ?*const c_void) callconv(.C) void;
pub extern fn vkCmdPushDescriptorSetKHR(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: [*c]const VkWriteDescriptorSet) void;
pub extern fn vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: u32, pData: ?*const c_void) void;
pub const struct_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shaderFloat16: VkBool32,
    shaderInt8: VkBool32,
};
pub const VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = struct_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;
pub const VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;
pub const VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;
pub const struct_VkRectLayerKHR = extern struct {
    offset: VkOffset2D,
    extent: VkExtent2D,
    layer: u32,
};
pub const VkRectLayerKHR = struct_VkRectLayerKHR;
pub const struct_VkPresentRegionKHR = extern struct {
    rectangleCount: u32,
    pRectangles: [*c]const VkRectLayerKHR,
};
pub const VkPresentRegionKHR = struct_VkPresentRegionKHR;
pub const struct_VkPresentRegionsKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    swapchainCount: u32,
    pRegions: [*c]const VkPresentRegionKHR,
};
pub const VkPresentRegionsKHR = struct_VkPresentRegionsKHR;
pub const VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
pub const VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType;
pub const VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
pub const VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;
pub const VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;
pub const PFN_vkCreateDescriptorUpdateTemplateKHR = ?fn (VkDevice, [*c]const VkDescriptorUpdateTemplateCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorUpdateTemplate) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorUpdateTemplateKHR = ?fn (VkDevice, VkDescriptorUpdateTemplate, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplateKHR = ?fn (VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ?*const c_void) callconv(.C) void;
pub extern fn vkCreateDescriptorUpdateTemplateKHR(device: VkDevice, pCreateInfo: [*c]const VkDescriptorUpdateTemplateCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorUpdateTemplate: [*c]VkDescriptorUpdateTemplate) VkResult;
pub extern fn vkDestroyDescriptorUpdateTemplateKHR(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkUpdateDescriptorSetWithTemplateKHR(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: ?*const c_void) void;
pub const struct_VkPhysicalDeviceImagelessFramebufferFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    imagelessFramebuffer: VkBool32,
};
pub const VkPhysicalDeviceImagelessFramebufferFeaturesKHR = struct_VkPhysicalDeviceImagelessFramebufferFeaturesKHR;
pub const struct_VkFramebufferAttachmentImageInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkImageCreateFlags,
    usage: VkImageUsageFlags,
    width: u32,
    height: u32,
    layerCount: u32,
    viewFormatCount: u32,
    pViewFormats: [*c]const VkFormat,
};
pub const VkFramebufferAttachmentImageInfoKHR = struct_VkFramebufferAttachmentImageInfoKHR;
pub const struct_VkFramebufferAttachmentsCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    attachmentImageInfoCount: u32,
    pAttachmentImageInfos: [*c]const VkFramebufferAttachmentImageInfoKHR,
};
pub const VkFramebufferAttachmentsCreateInfoKHR = struct_VkFramebufferAttachmentsCreateInfoKHR;
pub const struct_VkRenderPassAttachmentBeginInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    attachmentCount: u32,
    pAttachments: [*c]const VkImageView,
};
pub const VkRenderPassAttachmentBeginInfoKHR = struct_VkRenderPassAttachmentBeginInfoKHR;
pub const struct_VkAttachmentDescription2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
};
pub const VkAttachmentDescription2KHR = struct_VkAttachmentDescription2KHR;
pub const struct_VkAttachmentReference2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    attachment: u32,
    layout: VkImageLayout,
    aspectMask: VkImageAspectFlags,
};
pub const VkAttachmentReference2KHR = struct_VkAttachmentReference2KHR;
pub const struct_VkSubpassDescription2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    viewMask: u32,
    inputAttachmentCount: u32,
    pInputAttachments: [*c]const VkAttachmentReference2KHR,
    colorAttachmentCount: u32,
    pColorAttachments: [*c]const VkAttachmentReference2KHR,
    pResolveAttachments: [*c]const VkAttachmentReference2KHR,
    pDepthStencilAttachment: [*c]const VkAttachmentReference2KHR,
    preserveAttachmentCount: u32,
    pPreserveAttachments: [*c]const u32,
};
pub const VkSubpassDescription2KHR = struct_VkSubpassDescription2KHR;
pub const struct_VkSubpassDependency2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
    viewOffset: i32,
};
pub const VkSubpassDependency2KHR = struct_VkSubpassDependency2KHR;
pub const struct_VkRenderPassCreateInfo2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: [*c]const VkAttachmentDescription2KHR,
    subpassCount: u32,
    pSubpasses: [*c]const VkSubpassDescription2KHR,
    dependencyCount: u32,
    pDependencies: [*c]const VkSubpassDependency2KHR,
    correlatedViewMaskCount: u32,
    pCorrelatedViewMasks: [*c]const u32,
};
pub const VkRenderPassCreateInfo2KHR = struct_VkRenderPassCreateInfo2KHR;
pub const struct_VkSubpassBeginInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    contents: VkSubpassContents,
};
pub const VkSubpassBeginInfoKHR = struct_VkSubpassBeginInfoKHR;
pub const struct_VkSubpassEndInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
};
pub const VkSubpassEndInfoKHR = struct_VkSubpassEndInfoKHR;
pub const PFN_vkCreateRenderPass2KHR = ?fn (VkDevice, [*c]const VkRenderPassCreateInfo2KHR, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkCmdBeginRenderPass2KHR = ?fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, [*c]const VkSubpassBeginInfoKHR) callconv(.C) void;
pub const PFN_vkCmdNextSubpass2KHR = ?fn (VkCommandBuffer, [*c]const VkSubpassBeginInfoKHR, [*c]const VkSubpassEndInfoKHR) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass2KHR = ?fn (VkCommandBuffer, [*c]const VkSubpassEndInfoKHR) callconv(.C) void;
pub extern fn vkCreateRenderPass2KHR(device: VkDevice, pCreateInfo: [*c]const VkRenderPassCreateInfo2KHR, pAllocator: [*c]const VkAllocationCallbacks, pRenderPass: [*c]VkRenderPass) VkResult;
pub extern fn vkCmdBeginRenderPass2KHR(commandBuffer: VkCommandBuffer, pRenderPassBegin: [*c]const VkRenderPassBeginInfo, pSubpassBeginInfo: [*c]const VkSubpassBeginInfoKHR) void;
pub extern fn vkCmdNextSubpass2KHR(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: [*c]const VkSubpassBeginInfoKHR, pSubpassEndInfo: [*c]const VkSubpassEndInfoKHR) void;
pub extern fn vkCmdEndRenderPass2KHR(commandBuffer: VkCommandBuffer, pSubpassEndInfo: [*c]const VkSubpassEndInfoKHR) void;
pub const struct_VkSharedPresentSurfaceCapabilitiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    sharedPresentSupportedUsageFlags: VkImageUsageFlags,
};
pub const VkSharedPresentSurfaceCapabilitiesKHR = struct_VkSharedPresentSurfaceCapabilitiesKHR;
pub const PFN_vkGetSwapchainStatusKHR = ?fn (VkDevice, VkSwapchainKHR) callconv(.C) VkResult;
pub extern fn vkGetSwapchainStatusKHR(device: VkDevice, swapchain: VkSwapchainKHR) VkResult;
pub const VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
pub const VkExternalFenceHandleTypeFlagBitsKHR = VkExternalFenceHandleTypeFlagBits;
pub const VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
pub const VkExternalFenceFeatureFlagBitsKHR = VkExternalFenceFeatureFlagBits;
pub const VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
pub const VkExternalFencePropertiesKHR = VkExternalFenceProperties;
pub const PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalFenceInfo, [*c]VkExternalFenceProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: [*c]const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: [*c]VkExternalFenceProperties) void;
pub const VkFenceImportFlagsKHR = VkFenceImportFlags;
pub const VkFenceImportFlagBitsKHR = VkFenceImportFlagBits;
pub const VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
pub const struct_VkImportFenceFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    fence: VkFence,
    flags: VkFenceImportFlags,
    handleType: VkExternalFenceHandleTypeFlagBits,
    fd: c_int,
};
pub const VkImportFenceFdInfoKHR = struct_VkImportFenceFdInfoKHR;
pub const struct_VkFenceGetFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    fence: VkFence,
    handleType: VkExternalFenceHandleTypeFlagBits,
};
pub const VkFenceGetFdInfoKHR = struct_VkFenceGetFdInfoKHR;
pub const PFN_vkImportFenceFdKHR = ?fn (VkDevice, [*c]const VkImportFenceFdInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetFenceFdKHR = ?fn (VkDevice, [*c]const VkFenceGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub extern fn vkImportFenceFdKHR(device: VkDevice, pImportFenceFdInfo: [*c]const VkImportFenceFdInfoKHR) VkResult;
pub extern fn vkGetFenceFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkFenceGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub const VkPointClippingBehaviorKHR = VkPointClippingBehavior;
pub const VkTessellationDomainOriginKHR = VkTessellationDomainOrigin;
pub const VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;
pub const VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;
pub const VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;
pub const VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;
pub const VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;
pub const struct_VkPhysicalDeviceSurfaceInfo2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    surface: VkSurfaceKHR,
};
pub const VkPhysicalDeviceSurfaceInfo2KHR = struct_VkPhysicalDeviceSurfaceInfo2KHR;
pub const struct_VkSurfaceCapabilities2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    surfaceCapabilities: VkSurfaceCapabilitiesKHR,
};
pub const VkSurfaceCapabilities2KHR = struct_VkSurfaceCapabilities2KHR;
pub const struct_VkSurfaceFormat2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    surfaceFormat: VkSurfaceFormatKHR,
};
pub const VkSurfaceFormat2KHR = struct_VkSurfaceFormat2KHR;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSurfaceInfo2KHR, [*c]VkSurfaceCapabilities2KHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = ?fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSurfaceInfo2KHR, [*c]u32, [*c]VkSurfaceFormat2KHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: [*c]const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilities2KHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: [*c]const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: [*c]u32, pSurfaceFormats: [*c]VkSurfaceFormat2KHR) VkResult;
pub const VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub const VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub const struct_VkDisplayProperties2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    displayProperties: VkDisplayPropertiesKHR,
};
pub const VkDisplayProperties2KHR = struct_VkDisplayProperties2KHR;
pub const struct_VkDisplayPlaneProperties2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    displayPlaneProperties: VkDisplayPlanePropertiesKHR,
};
pub const VkDisplayPlaneProperties2KHR = struct_VkDisplayPlaneProperties2KHR;
pub const struct_VkDisplayModeProperties2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    displayModeProperties: VkDisplayModePropertiesKHR,
};
pub const VkDisplayModeProperties2KHR = struct_VkDisplayModeProperties2KHR;
pub const struct_VkDisplayPlaneInfo2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    mode: VkDisplayModeKHR,
    planeIndex: u32,
};
pub const VkDisplayPlaneInfo2KHR = struct_VkDisplayPlaneInfo2KHR;
pub const struct_VkDisplayPlaneCapabilities2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    capabilities: VkDisplayPlaneCapabilitiesKHR,
};
pub const VkDisplayPlaneCapabilities2KHR = struct_VkDisplayPlaneCapabilities2KHR;
pub const PFN_vkGetPhysicalDeviceDisplayProperties2KHR = ?fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = ?fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPlaneProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayModeProperties2KHR = ?fn (VkPhysicalDevice, VkDisplayKHR, [*c]u32, [*c]VkDisplayModeProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneCapabilities2KHR = ?fn (VkPhysicalDevice, [*c]const VkDisplayPlaneInfo2KHR, [*c]VkDisplayPlaneCapabilities2KHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayProperties2KHR) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPlaneProperties2KHR) VkResult;
pub extern fn vkGetDisplayModeProperties2KHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayModeProperties2KHR) VkResult;
pub extern fn vkGetDisplayPlaneCapabilities2KHR(physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: [*c]const VkDisplayPlaneInfo2KHR, pCapabilities: [*c]VkDisplayPlaneCapabilities2KHR) VkResult;
pub const VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;
pub const VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;
pub const VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;
pub const VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;
pub const VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;
pub const VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;
pub const PFN_vkGetImageMemoryRequirements2KHR = ?fn (VkDevice, [*c]const VkImageMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2KHR = ?fn (VkDevice, [*c]const VkBufferMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2KHR = ?fn (VkDevice, [*c]const VkImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub extern fn vkGetImageMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkImageMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetBufferMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetImageSparseMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub const struct_VkImageFormatListCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    viewFormatCount: u32,
    pViewFormats: [*c]const VkFormat,
};
pub const VkImageFormatListCreateInfoKHR = struct_VkImageFormatListCreateInfoKHR;
pub const VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
pub const VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion;
pub const VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange;
pub const VkChromaLocationKHR = VkChromaLocation;
pub const VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;
pub const VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;
pub const VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;
pub const VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;
pub const VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub const VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;
pub const PFN_vkCreateSamplerYcbcrConversionKHR = ?fn (VkDevice, [*c]const VkSamplerYcbcrConversionCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSamplerYcbcrConversion) callconv(.C) VkResult;
pub const PFN_vkDestroySamplerYcbcrConversionKHR = ?fn (VkDevice, VkSamplerYcbcrConversion, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub extern fn vkCreateSamplerYcbcrConversionKHR(device: VkDevice, pCreateInfo: [*c]const VkSamplerYcbcrConversionCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pYcbcrConversion: [*c]VkSamplerYcbcrConversion) VkResult;
pub extern fn vkDestroySamplerYcbcrConversionKHR(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: [*c]const VkAllocationCallbacks) void;
pub const VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;
pub const VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;
pub const PFN_vkBindBufferMemory2KHR = ?fn (VkDevice, u32, [*c]const VkBindBufferMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory2KHR = ?fn (VkDevice, u32, [*c]const VkBindImageMemoryInfo) callconv(.C) VkResult;
pub extern fn vkBindBufferMemory2KHR(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindBufferMemoryInfo) VkResult;
pub extern fn vkBindImageMemory2KHR(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindImageMemoryInfo) VkResult;
pub const VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;
pub const VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;
pub const PFN_vkGetDescriptorSetLayoutSupportKHR = ?fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]VkDescriptorSetLayoutSupport) callconv(.C) void;
pub extern fn vkGetDescriptorSetLayoutSupportKHR(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pSupport: [*c]VkDescriptorSetLayoutSupport) void;
pub const PFN_vkCmdDrawIndirectCountKHR = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountKHR = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const struct_VkPhysicalDevice8BitStorageFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    storageBuffer8BitAccess: VkBool32,
    uniformAndStorageBuffer8BitAccess: VkBool32,
    storagePushConstant8: VkBool32,
};
pub const VkPhysicalDevice8BitStorageFeaturesKHR = struct_VkPhysicalDevice8BitStorageFeaturesKHR;
pub const struct_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shaderBufferInt64Atomics: VkBool32,
    shaderSharedInt64Atomics: VkBool32,
};
pub const VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = struct_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;
pub const VK_DRIVER_ID_AMD_PROPRIETARY_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_AMD_PROPRIETARY_KHR);
pub const VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR);
pub const VK_DRIVER_ID_MESA_RADV_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_MESA_RADV_KHR);
pub const VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR);
pub const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR);
pub const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR);
pub const VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR);
pub const VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR);
pub const VK_DRIVER_ID_ARM_PROPRIETARY_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_ARM_PROPRIETARY_KHR);
pub const VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR);
pub const VK_DRIVER_ID_GGP_PROPRIETARY_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_GGP_PROPRIETARY_KHR);
pub const VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR);
pub const VK_DRIVER_ID_BEGIN_RANGE_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_BEGIN_RANGE_KHR);
pub const VK_DRIVER_ID_END_RANGE_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_END_RANGE_KHR);
pub const VK_DRIVER_ID_RANGE_SIZE_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_RANGE_SIZE_KHR);
pub const VK_DRIVER_ID_MAX_ENUM_KHR = @enumToInt(enum_VkDriverIdKHR.VK_DRIVER_ID_MAX_ENUM_KHR);
pub const enum_VkDriverIdKHR = extern enum(c_int) {
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1,
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2,
    VK_DRIVER_ID_MESA_RADV_KHR = 3,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8,
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10,
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12,
    VK_DRIVER_ID_BEGIN_RANGE_KHR = 1,
    VK_DRIVER_ID_END_RANGE_KHR = 12,
    VK_DRIVER_ID_RANGE_SIZE_KHR = 12,
    VK_DRIVER_ID_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const VkDriverIdKHR = enum_VkDriverIdKHR;
pub const struct_VkConformanceVersionKHR = extern struct {
    major: u8,
    minor: u8,
    subminor: u8,
    patch: u8,
};
pub const VkConformanceVersionKHR = struct_VkConformanceVersionKHR;
pub const struct_VkPhysicalDeviceDriverPropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    driverID: VkDriverIdKHR,
    driverName: [256]u8,
    driverInfo: [256]u8,
    conformanceVersion: VkConformanceVersionKHR,
};
pub const VkPhysicalDeviceDriverPropertiesKHR = struct_VkPhysicalDeviceDriverPropertiesKHR;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = @enumToInt(enum_VkShaderFloatControlsIndependenceKHR.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR);
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = @enumToInt(enum_VkShaderFloatControlsIndependenceKHR.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR);
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = @enumToInt(enum_VkShaderFloatControlsIndependenceKHR.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR);
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_BEGIN_RANGE_KHR = @enumToInt(enum_VkShaderFloatControlsIndependenceKHR.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_BEGIN_RANGE_KHR);
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_END_RANGE_KHR = @enumToInt(enum_VkShaderFloatControlsIndependenceKHR.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_END_RANGE_KHR);
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_RANGE_SIZE_KHR = @enumToInt(enum_VkShaderFloatControlsIndependenceKHR.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_RANGE_SIZE_KHR);
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM_KHR = @enumToInt(enum_VkShaderFloatControlsIndependenceKHR.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM_KHR);
pub const enum_VkShaderFloatControlsIndependenceKHR = extern enum(c_int) {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_BEGIN_RANGE_KHR = 0,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_END_RANGE_KHR = 2,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_RANGE_SIZE_KHR = 3,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const VkShaderFloatControlsIndependenceKHR = enum_VkShaderFloatControlsIndependenceKHR;
pub const struct_VkPhysicalDeviceFloatControlsPropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    denormBehaviorIndependence: VkShaderFloatControlsIndependenceKHR,
    roundingModeIndependence: VkShaderFloatControlsIndependenceKHR,
    shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    shaderDenormPreserveFloat16: VkBool32,
    shaderDenormPreserveFloat32: VkBool32,
    shaderDenormPreserveFloat64: VkBool32,
    shaderDenormFlushToZeroFloat16: VkBool32,
    shaderDenormFlushToZeroFloat32: VkBool32,
    shaderDenormFlushToZeroFloat64: VkBool32,
    shaderRoundingModeRTEFloat16: VkBool32,
    shaderRoundingModeRTEFloat32: VkBool32,
    shaderRoundingModeRTEFloat64: VkBool32,
    shaderRoundingModeRTZFloat16: VkBool32,
    shaderRoundingModeRTZFloat32: VkBool32,
    shaderRoundingModeRTZFloat64: VkBool32,
};
pub const VkPhysicalDeviceFloatControlsPropertiesKHR = struct_VkPhysicalDeviceFloatControlsPropertiesKHR;
pub const VK_RESOLVE_MODE_NONE_KHR = @enumToInt(enum_VkResolveModeFlagBitsKHR.VK_RESOLVE_MODE_NONE_KHR);
pub const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = @enumToInt(enum_VkResolveModeFlagBitsKHR.VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR);
pub const VK_RESOLVE_MODE_AVERAGE_BIT_KHR = @enumToInt(enum_VkResolveModeFlagBitsKHR.VK_RESOLVE_MODE_AVERAGE_BIT_KHR);
pub const VK_RESOLVE_MODE_MIN_BIT_KHR = @enumToInt(enum_VkResolveModeFlagBitsKHR.VK_RESOLVE_MODE_MIN_BIT_KHR);
pub const VK_RESOLVE_MODE_MAX_BIT_KHR = @enumToInt(enum_VkResolveModeFlagBitsKHR.VK_RESOLVE_MODE_MAX_BIT_KHR);
pub const VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM_KHR = @enumToInt(enum_VkResolveModeFlagBitsKHR.VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM_KHR);
pub const enum_VkResolveModeFlagBitsKHR = extern enum(c_int) {
    VK_RESOLVE_MODE_NONE_KHR = 0,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1,
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 2,
    VK_RESOLVE_MODE_MIN_BIT_KHR = 4,
    VK_RESOLVE_MODE_MAX_BIT_KHR = 8,
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const VkResolveModeFlagBitsKHR = enum_VkResolveModeFlagBitsKHR;
pub const VkResolveModeFlagsKHR = VkFlags;
pub const struct_VkSubpassDescriptionDepthStencilResolveKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    depthResolveMode: VkResolveModeFlagBitsKHR,
    stencilResolveMode: VkResolveModeFlagBitsKHR,
    pDepthStencilResolveAttachment: [*c]const VkAttachmentReference2KHR,
};
pub const VkSubpassDescriptionDepthStencilResolveKHR = struct_VkSubpassDescriptionDepthStencilResolveKHR;
pub const struct_VkPhysicalDeviceDepthStencilResolvePropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    supportedDepthResolveModes: VkResolveModeFlagsKHR,
    supportedStencilResolveModes: VkResolveModeFlagsKHR,
    independentResolveNone: VkBool32,
    independentResolve: VkBool32,
};
pub const VkPhysicalDeviceDepthStencilResolvePropertiesKHR = struct_VkPhysicalDeviceDepthStencilResolvePropertiesKHR;
pub const struct_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    vulkanMemoryModel: VkBool32,
    vulkanMemoryModelDeviceScope: VkBool32,
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
};
pub const VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = struct_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;
pub const struct_VkSurfaceProtectedCapabilitiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    supportsProtected: VkBool32,
};
pub const VkSurfaceProtectedCapabilitiesKHR = struct_VkSurfaceProtectedCapabilitiesKHR;
pub const struct_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    uniformBufferStandardLayout: VkBool32,
};
pub const VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = struct_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = @enumToInt(enum_VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR);
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = @enumToInt(enum_VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR);
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = @enumToInt(enum_VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR);
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = @enumToInt(enum_VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR);
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BEGIN_RANGE_KHR = @enumToInt(enum_VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BEGIN_RANGE_KHR);
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_END_RANGE_KHR = @enumToInt(enum_VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_END_RANGE_KHR);
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_RANGE_SIZE_KHR = @enumToInt(enum_VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_RANGE_SIZE_KHR);
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = @enumToInt(enum_VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR);
pub const enum_VkPipelineExecutableStatisticFormatKHR = extern enum(c_int) {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BEGIN_RANGE_KHR = 0,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_END_RANGE_KHR = 3,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_RANGE_SIZE_KHR = 4,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 2147483647,
    _,
};
pub const VkPipelineExecutableStatisticFormatKHR = enum_VkPipelineExecutableStatisticFormatKHR;
pub const struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    pipelineExecutableInfo: VkBool32,
};
pub const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
pub const struct_VkPipelineInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    pipeline: VkPipeline,
};
pub const VkPipelineInfoKHR = struct_VkPipelineInfoKHR;
pub const struct_VkPipelineExecutablePropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    stages: VkShaderStageFlags,
    name: [256]u8,
    description: [256]u8,
    subgroupSize: u32,
};
pub const VkPipelineExecutablePropertiesKHR = struct_VkPipelineExecutablePropertiesKHR;
pub const struct_VkPipelineExecutableInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    pipeline: VkPipeline,
    executableIndex: u32,
};
pub const VkPipelineExecutableInfoKHR = struct_VkPipelineExecutableInfoKHR;
pub const union_VkPipelineExecutableStatisticValueKHR = extern union {
    b32: VkBool32,
    i64: i64,
    u64: u64,
    f64: f64,
};
pub const VkPipelineExecutableStatisticValueKHR = union_VkPipelineExecutableStatisticValueKHR;
pub const struct_VkPipelineExecutableStatisticKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    name: [256]u8,
    description: [256]u8,
    format: VkPipelineExecutableStatisticFormatKHR,
    value: VkPipelineExecutableStatisticValueKHR,
};
pub const VkPipelineExecutableStatisticKHR = struct_VkPipelineExecutableStatisticKHR;
pub const struct_VkPipelineExecutableInternalRepresentationKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    name: [256]u8,
    description: [256]u8,
    isText: VkBool32,
    dataSize: usize,
    pData: ?*c_void,
};
pub const VkPipelineExecutableInternalRepresentationKHR = struct_VkPipelineExecutableInternalRepresentationKHR;
pub const PFN_vkGetPipelineExecutablePropertiesKHR = ?fn (VkDevice, [*c]const VkPipelineInfoKHR, [*c]u32, [*c]VkPipelineExecutablePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineExecutableStatisticsKHR = ?fn (VkDevice, [*c]const VkPipelineExecutableInfoKHR, [*c]u32, [*c]VkPipelineExecutableStatisticKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineExecutableInternalRepresentationsKHR = ?fn (VkDevice, [*c]const VkPipelineExecutableInfoKHR, [*c]u32, [*c]VkPipelineExecutableInternalRepresentationKHR) callconv(.C) VkResult;
pub extern fn vkGetPipelineExecutablePropertiesKHR(device: VkDevice, pPipelineInfo: [*c]const VkPipelineInfoKHR, pExecutableCount: [*c]u32, pProperties: [*c]VkPipelineExecutablePropertiesKHR) VkResult;
pub extern fn vkGetPipelineExecutableStatisticsKHR(device: VkDevice, pExecutableInfo: [*c]const VkPipelineExecutableInfoKHR, pStatisticCount: [*c]u32, pStatistics: [*c]VkPipelineExecutableStatisticKHR) VkResult;
pub extern fn vkGetPipelineExecutableInternalRepresentationsKHR(device: VkDevice, pExecutableInfo: [*c]const VkPipelineExecutableInfoKHR, pInternalRepresentationCount: [*c]u32, pInternalRepresentations: [*c]VkPipelineExecutableInternalRepresentationKHR) VkResult;
pub const struct_VkDebugReportCallbackEXT_T = @OpaqueType();
pub const VkDebugReportCallbackEXT = ?*struct_VkDebugReportCallbackEXT_T;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT);
pub const VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = @enumToInt(enum_VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT);
pub const enum_VkDebugReportObjectTypeEXT = extern enum(c_int) {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
    VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT = 31,
    VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT = 32,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_BEGIN_RANGE_EXT = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_END_RANGE_EXT = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT = 34,
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkDebugReportObjectTypeEXT = enum_VkDebugReportObjectTypeEXT;
pub const VK_DEBUG_REPORT_INFORMATION_BIT_EXT = @enumToInt(enum_VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_INFORMATION_BIT_EXT);
pub const VK_DEBUG_REPORT_WARNING_BIT_EXT = @enumToInt(enum_VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_WARNING_BIT_EXT);
pub const VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = @enumToInt(enum_VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT);
pub const VK_DEBUG_REPORT_ERROR_BIT_EXT = @enumToInt(enum_VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_ERROR_BIT_EXT);
pub const VK_DEBUG_REPORT_DEBUG_BIT_EXT = @enumToInt(enum_VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_DEBUG_BIT_EXT);
pub const VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_VkDebugReportFlagBitsEXT = extern enum(c_int) {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1,
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 2,
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4,
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 8,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16,
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkDebugReportFlagBitsEXT = enum_VkDebugReportFlagBitsEXT;
pub const VkDebugReportFlagsEXT = VkFlags;
pub const PFN_vkDebugReportCallbackEXT = ?fn (VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8, ?*c_void) callconv(.Stdcall) VkBool32;
pub const struct_VkDebugReportCallbackCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkDebugReportFlagsEXT,
    pfnCallback: PFN_vkDebugReportCallbackEXT,
    pUserData: ?*c_void,
};
pub const VkDebugReportCallbackCreateInfoEXT = struct_VkDebugReportCallbackCreateInfoEXT;
pub const PFN_vkCreateDebugReportCallbackEXT = ?fn (VkInstance, [*c]const VkDebugReportCallbackCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkDebugReportCallbackEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyDebugReportCallbackEXT = ?fn (VkInstance, VkDebugReportCallbackEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDebugReportMessageEXT = ?fn (VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8) callconv(.C) void;
pub extern fn vkCreateDebugReportCallbackEXT(instance: VkInstance, pCreateInfo: [*c]const VkDebugReportCallbackCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pCallback: [*c]VkDebugReportCallbackEXT) VkResult;
pub extern fn vkDestroyDebugReportCallbackEXT(instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkDebugReportMessageEXT(instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, object: u64, location: usize, messageCode: i32, pLayerPrefix: [*c]const u8, pMessage: [*c]const u8) void;
pub const VK_RASTERIZATION_ORDER_STRICT_AMD = @enumToInt(enum_VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_STRICT_AMD);
pub const VK_RASTERIZATION_ORDER_RELAXED_AMD = @enumToInt(enum_VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_RELAXED_AMD);
pub const VK_RASTERIZATION_ORDER_BEGIN_RANGE_AMD = @enumToInt(enum_VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_BEGIN_RANGE_AMD);
pub const VK_RASTERIZATION_ORDER_END_RANGE_AMD = @enumToInt(enum_VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_END_RANGE_AMD);
pub const VK_RASTERIZATION_ORDER_RANGE_SIZE_AMD = @enumToInt(enum_VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_RANGE_SIZE_AMD);
pub const VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = @enumToInt(enum_VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_MAX_ENUM_AMD);
pub const enum_VkRasterizationOrderAMD = extern enum(c_int) {
    VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
    VK_RASTERIZATION_ORDER_BEGIN_RANGE_AMD = 0,
    VK_RASTERIZATION_ORDER_END_RANGE_AMD = 1,
    VK_RASTERIZATION_ORDER_RANGE_SIZE_AMD = 2,
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647,
    _,
};
pub const VkRasterizationOrderAMD = enum_VkRasterizationOrderAMD;
pub const struct_VkPipelineRasterizationStateRasterizationOrderAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    rasterizationOrder: VkRasterizationOrderAMD,
};
pub const VkPipelineRasterizationStateRasterizationOrderAMD = struct_VkPipelineRasterizationStateRasterizationOrderAMD;
pub const struct_VkDebugMarkerObjectNameInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    pObjectName: [*c]const u8,
};
pub const VkDebugMarkerObjectNameInfoEXT = struct_VkDebugMarkerObjectNameInfoEXT;
pub const struct_VkDebugMarkerObjectTagInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    tagName: u64,
    tagSize: usize,
    pTag: ?*const c_void,
};
pub const VkDebugMarkerObjectTagInfoEXT = struct_VkDebugMarkerObjectTagInfoEXT;
pub const struct_VkDebugMarkerMarkerInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    pMarkerName: [*c]const u8,
    color: [4]f32,
};
pub const VkDebugMarkerMarkerInfoEXT = struct_VkDebugMarkerMarkerInfoEXT;
pub const PFN_vkDebugMarkerSetObjectTagEXT = ?fn (VkDevice, [*c]const VkDebugMarkerObjectTagInfoEXT) callconv(.C) VkResult;
pub const PFN_vkDebugMarkerSetObjectNameEXT = ?fn (VkDevice, [*c]const VkDebugMarkerObjectNameInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCmdDebugMarkerBeginEXT = ?fn (VkCommandBuffer, [*c]const VkDebugMarkerMarkerInfoEXT) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerEndEXT = ?fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerInsertEXT = ?fn (VkCommandBuffer, [*c]const VkDebugMarkerMarkerInfoEXT) callconv(.C) void;
pub extern fn vkDebugMarkerSetObjectTagEXT(device: VkDevice, pTagInfo: [*c]const VkDebugMarkerObjectTagInfoEXT) VkResult;
pub extern fn vkDebugMarkerSetObjectNameEXT(device: VkDevice, pNameInfo: [*c]const VkDebugMarkerObjectNameInfoEXT) VkResult;
pub extern fn vkCmdDebugMarkerBeginEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkDebugMarkerMarkerInfoEXT) void;
pub extern fn vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdDebugMarkerInsertEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkDebugMarkerMarkerInfoEXT) void;
pub const struct_VkDedicatedAllocationImageCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    dedicatedAllocation: VkBool32,
};
pub const VkDedicatedAllocationImageCreateInfoNV = struct_VkDedicatedAllocationImageCreateInfoNV;
pub const struct_VkDedicatedAllocationBufferCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    dedicatedAllocation: VkBool32,
};
pub const VkDedicatedAllocationBufferCreateInfoNV = struct_VkDedicatedAllocationBufferCreateInfoNV;
pub const struct_VkDedicatedAllocationMemoryAllocateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    image: VkImage,
    buffer: VkBuffer,
};
pub const VkDedicatedAllocationMemoryAllocateInfoNV = struct_VkDedicatedAllocationMemoryAllocateInfoNV;
pub const VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    transformFeedback: VkBool32,
    geometryStreams: VkBool32,
};
pub const VkPhysicalDeviceTransformFeedbackFeaturesEXT = struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT;
pub const struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    maxTransformFeedbackStreams: u32,
    maxTransformFeedbackBuffers: u32,
    maxTransformFeedbackBufferSize: VkDeviceSize,
    maxTransformFeedbackStreamDataSize: u32,
    maxTransformFeedbackBufferDataSize: u32,
    maxTransformFeedbackBufferDataStride: u32,
    transformFeedbackQueries: VkBool32,
    transformFeedbackStreamsLinesTriangles: VkBool32,
    transformFeedbackRasterizationStreamSelect: VkBool32,
    transformFeedbackDraw: VkBool32,
};
pub const VkPhysicalDeviceTransformFeedbackPropertiesEXT = struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT;
pub const struct_VkPipelineRasterizationStateStreamCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineRasterizationStateStreamCreateFlagsEXT,
    rasterizationStream: u32,
};
pub const VkPipelineRasterizationStateStreamCreateInfoEXT = struct_VkPipelineRasterizationStateStreamCreateInfoEXT;
pub const PFN_vkCmdBindTransformFeedbackBuffersEXT = ?fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginTransformFeedbackEXT = ?fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdEndTransformFeedbackEXT = ?fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginQueryIndexedEXT = ?fn (VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags, u32) callconv(.C) void;
pub const PFN_vkCmdEndQueryIndexedEXT = ?fn (VkCommandBuffer, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirectByteCountEXT = ?fn (VkCommandBuffer, u32, u32, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdBindTransformFeedbackBuffersEXT(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize, pSizes: [*c]const VkDeviceSize) void;
pub extern fn vkCmdBeginTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: [*c]const VkBuffer, pCounterBufferOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdEndTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: [*c]const VkBuffer, pCounterBufferOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdBeginQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags, index: u32) void;
pub extern fn vkCmdEndQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, index: u32) void;
pub extern fn vkCmdDrawIndirectByteCountEXT(commandBuffer: VkCommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: u32, vertexStride: u32) void;
pub const struct_VkImageViewHandleInfoNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    imageView: VkImageView,
    descriptorType: VkDescriptorType,
    sampler: VkSampler,
};
pub const VkImageViewHandleInfoNVX = struct_VkImageViewHandleInfoNVX;
pub const PFN_vkGetImageViewHandleNVX = ?fn (VkDevice, [*c]const VkImageViewHandleInfoNVX) callconv(.C) u32;
pub extern fn vkGetImageViewHandleNVX(device: VkDevice, pInfo: [*c]const VkImageViewHandleInfoNVX) u32;
pub const PFN_vkCmdDrawIndirectCountAMD = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountAMD = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const struct_VkTextureLODGatherFormatPropertiesAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    supportsTextureGatherLODBiasAMD: VkBool32,
};
pub const VkTextureLODGatherFormatPropertiesAMD = struct_VkTextureLODGatherFormatPropertiesAMD;
pub const VK_SHADER_INFO_TYPE_STATISTICS_AMD = @enumToInt(enum_VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_STATISTICS_AMD);
pub const VK_SHADER_INFO_TYPE_BINARY_AMD = @enumToInt(enum_VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_BINARY_AMD);
pub const VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = @enumToInt(enum_VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD);
pub const VK_SHADER_INFO_TYPE_BEGIN_RANGE_AMD = @enumToInt(enum_VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_BEGIN_RANGE_AMD);
pub const VK_SHADER_INFO_TYPE_END_RANGE_AMD = @enumToInt(enum_VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_END_RANGE_AMD);
pub const VK_SHADER_INFO_TYPE_RANGE_SIZE_AMD = @enumToInt(enum_VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_RANGE_SIZE_AMD);
pub const VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = @enumToInt(enum_VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_MAX_ENUM_AMD);
pub const enum_VkShaderInfoTypeAMD = extern enum(c_int) {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
    VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
    VK_SHADER_INFO_TYPE_BEGIN_RANGE_AMD = 0,
    VK_SHADER_INFO_TYPE_END_RANGE_AMD = 2,
    VK_SHADER_INFO_TYPE_RANGE_SIZE_AMD = 3,
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647,
    _,
};
pub const VkShaderInfoTypeAMD = enum_VkShaderInfoTypeAMD;
pub const struct_VkShaderResourceUsageAMD = extern struct {
    numUsedVgprs: u32,
    numUsedSgprs: u32,
    ldsSizePerLocalWorkGroup: u32,
    ldsUsageSizeInBytes: usize,
    scratchMemUsageInBytes: usize,
};
pub const VkShaderResourceUsageAMD = struct_VkShaderResourceUsageAMD;
pub const struct_VkShaderStatisticsInfoAMD = extern struct {
    shaderStageMask: VkShaderStageFlags,
    resourceUsage: VkShaderResourceUsageAMD,
    numPhysicalVgprs: u32,
    numPhysicalSgprs: u32,
    numAvailableVgprs: u32,
    numAvailableSgprs: u32,
    computeWorkGroupSize: [3]u32,
};
pub const VkShaderStatisticsInfoAMD = struct_VkShaderStatisticsInfoAMD;
pub const PFN_vkGetShaderInfoAMD = ?fn (VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, [*c]usize, ?*c_void) callconv(.C) VkResult;
pub extern fn vkGetShaderInfoAMD(device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: [*c]usize, pInfo: ?*c_void) VkResult;
pub const struct_VkPhysicalDeviceCornerSampledImageFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    cornerSampledImage: VkBool32,
};
pub const VkPhysicalDeviceCornerSampledImageFeaturesNV = struct_VkPhysicalDeviceCornerSampledImageFeaturesNV;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV);
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = @enumToInt(enum_VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV);
pub const enum_VkExternalMemoryHandleTypeFlagBitsNV = extern enum(c_int) {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkExternalMemoryHandleTypeFlagBitsNV = enum_VkExternalMemoryHandleTypeFlagBitsNV;
pub const VkExternalMemoryHandleTypeFlagsNV = VkFlags;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = @enumToInt(enum_VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV);
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = @enumToInt(enum_VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV);
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = @enumToInt(enum_VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV);
pub const VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = @enumToInt(enum_VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV);
pub const enum_VkExternalMemoryFeatureFlagBitsNV = extern enum(c_int) {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkExternalMemoryFeatureFlagBitsNV = enum_VkExternalMemoryFeatureFlagBitsNV;
pub const VkExternalMemoryFeatureFlagsNV = VkFlags;
pub const struct_VkExternalImageFormatPropertiesNV = extern struct {
    imageFormatProperties: VkImageFormatProperties,
    externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV,
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
};
pub const VkExternalImageFormatPropertiesNV = struct_VkExternalImageFormatPropertiesNV;
pub const PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = ?fn (VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, [*c]VkExternalImageFormatPropertiesNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice: VkPhysicalDevice, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: [*c]VkExternalImageFormatPropertiesNV) VkResult;
pub const struct_VkExternalMemoryImageCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlagsNV,
};
pub const VkExternalMemoryImageCreateInfoNV = struct_VkExternalMemoryImageCreateInfoNV;
pub const struct_VkExportMemoryAllocateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleTypes: VkExternalMemoryHandleTypeFlagsNV,
};
pub const VkExportMemoryAllocateInfoNV = struct_VkExportMemoryAllocateInfoNV;
pub const VK_VALIDATION_CHECK_ALL_EXT = @enumToInt(enum_VkValidationCheckEXT.VK_VALIDATION_CHECK_ALL_EXT);
pub const VK_VALIDATION_CHECK_SHADERS_EXT = @enumToInt(enum_VkValidationCheckEXT.VK_VALIDATION_CHECK_SHADERS_EXT);
pub const VK_VALIDATION_CHECK_BEGIN_RANGE_EXT = @enumToInt(enum_VkValidationCheckEXT.VK_VALIDATION_CHECK_BEGIN_RANGE_EXT);
pub const VK_VALIDATION_CHECK_END_RANGE_EXT = @enumToInt(enum_VkValidationCheckEXT.VK_VALIDATION_CHECK_END_RANGE_EXT);
pub const VK_VALIDATION_CHECK_RANGE_SIZE_EXT = @enumToInt(enum_VkValidationCheckEXT.VK_VALIDATION_CHECK_RANGE_SIZE_EXT);
pub const VK_VALIDATION_CHECK_MAX_ENUM_EXT = @enumToInt(enum_VkValidationCheckEXT.VK_VALIDATION_CHECK_MAX_ENUM_EXT);
pub const enum_VkValidationCheckEXT = extern enum(c_int) {
    VK_VALIDATION_CHECK_ALL_EXT = 0,
    VK_VALIDATION_CHECK_SHADERS_EXT = 1,
    VK_VALIDATION_CHECK_BEGIN_RANGE_EXT = 0,
    VK_VALIDATION_CHECK_END_RANGE_EXT = 1,
    VK_VALIDATION_CHECK_RANGE_SIZE_EXT = 2,
    VK_VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkValidationCheckEXT = enum_VkValidationCheckEXT;
pub const struct_VkValidationFlagsEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    disabledValidationCheckCount: u32,
    pDisabledValidationChecks: [*c]const VkValidationCheckEXT,
};
pub const VkValidationFlagsEXT = struct_VkValidationFlagsEXT;
pub const struct_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    textureCompressionASTC_HDR: VkBool32,
};
pub const VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = struct_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;
pub const struct_VkImageViewASTCDecodeModeEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    decodeMode: VkFormat,
};
pub const VkImageViewASTCDecodeModeEXT = struct_VkImageViewASTCDecodeModeEXT;
pub const struct_VkPhysicalDeviceASTCDecodeFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    decodeModeSharedExponent: VkBool32,
};
pub const VkPhysicalDeviceASTCDecodeFeaturesEXT = struct_VkPhysicalDeviceASTCDecodeFeaturesEXT;
pub const VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = @enumToInt(enum_VkConditionalRenderingFlagBitsEXT.VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT);
pub const VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_VkConditionalRenderingFlagBitsEXT.VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_VkConditionalRenderingFlagBitsEXT = extern enum(c_int) {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1,
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkConditionalRenderingFlagBitsEXT = enum_VkConditionalRenderingFlagBitsEXT;
pub const VkConditionalRenderingFlagsEXT = VkFlags;
pub const struct_VkConditionalRenderingBeginInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    flags: VkConditionalRenderingFlagsEXT,
};
pub const VkConditionalRenderingBeginInfoEXT = struct_VkConditionalRenderingBeginInfoEXT;
pub const struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    conditionalRendering: VkBool32,
    inheritedConditionalRendering: VkBool32,
};
pub const VkPhysicalDeviceConditionalRenderingFeaturesEXT = struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT;
pub const struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    conditionalRenderingEnable: VkBool32,
};
pub const VkCommandBufferInheritanceConditionalRenderingInfoEXT = struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT;
pub const PFN_vkCmdBeginConditionalRenderingEXT = ?fn (VkCommandBuffer, [*c]const VkConditionalRenderingBeginInfoEXT) callconv(.C) void;
pub const PFN_vkCmdEndConditionalRenderingEXT = ?fn (VkCommandBuffer) callconv(.C) void;
pub extern fn vkCmdBeginConditionalRenderingEXT(commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: [*c]const VkConditionalRenderingBeginInfoEXT) void;
pub extern fn vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer) void;
pub const struct_VkObjectTableNVX_T = @OpaqueType();
pub const VkObjectTableNVX = ?*struct_VkObjectTableNVX_T;
pub const struct_VkIndirectCommandsLayoutNVX_T = @OpaqueType();
pub const VkIndirectCommandsLayoutNVX = ?*struct_VkIndirectCommandsLayoutNVX_T;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX);
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX);
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX);
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX);
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX);
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX);
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX);
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX);
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_BEGIN_RANGE_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_BEGIN_RANGE_NVX);
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_END_RANGE_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_END_RANGE_NVX);
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_RANGE_SIZE_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_RANGE_SIZE_NVX);
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NVX = @enumToInt(enum_VkIndirectCommandsTokenTypeNVX.VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NVX);
pub const enum_VkIndirectCommandsTokenTypeNVX = extern enum(c_int) {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX = 1,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX = 2,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX = 3,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX = 4,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX = 5,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX = 6,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX = 7,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_BEGIN_RANGE_NVX = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_END_RANGE_NVX = 7,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_RANGE_SIZE_NVX = 8,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NVX = 2147483647,
    _,
};
pub const VkIndirectCommandsTokenTypeNVX = enum_VkIndirectCommandsTokenTypeNVX;
pub const VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX = @enumToInt(enum_VkObjectEntryTypeNVX.VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX);
pub const VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX = @enumToInt(enum_VkObjectEntryTypeNVX.VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX);
pub const VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX = @enumToInt(enum_VkObjectEntryTypeNVX.VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX);
pub const VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX = @enumToInt(enum_VkObjectEntryTypeNVX.VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX);
pub const VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX = @enumToInt(enum_VkObjectEntryTypeNVX.VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX);
pub const VK_OBJECT_ENTRY_TYPE_BEGIN_RANGE_NVX = @enumToInt(enum_VkObjectEntryTypeNVX.VK_OBJECT_ENTRY_TYPE_BEGIN_RANGE_NVX);
pub const VK_OBJECT_ENTRY_TYPE_END_RANGE_NVX = @enumToInt(enum_VkObjectEntryTypeNVX.VK_OBJECT_ENTRY_TYPE_END_RANGE_NVX);
pub const VK_OBJECT_ENTRY_TYPE_RANGE_SIZE_NVX = @enumToInt(enum_VkObjectEntryTypeNVX.VK_OBJECT_ENTRY_TYPE_RANGE_SIZE_NVX);
pub const VK_OBJECT_ENTRY_TYPE_MAX_ENUM_NVX = @enumToInt(enum_VkObjectEntryTypeNVX.VK_OBJECT_ENTRY_TYPE_MAX_ENUM_NVX);
pub const enum_VkObjectEntryTypeNVX = extern enum(c_int) {
    VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX = 0,
    VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX = 1,
    VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX = 2,
    VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX = 3,
    VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX = 4,
    VK_OBJECT_ENTRY_TYPE_BEGIN_RANGE_NVX = 0,
    VK_OBJECT_ENTRY_TYPE_END_RANGE_NVX = 4,
    VK_OBJECT_ENTRY_TYPE_RANGE_SIZE_NVX = 5,
    VK_OBJECT_ENTRY_TYPE_MAX_ENUM_NVX = 2147483647,
    _,
};
pub const VkObjectEntryTypeNVX = enum_VkObjectEntryTypeNVX;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX = @enumToInt(enum_VkIndirectCommandsLayoutUsageFlagBitsNVX.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX);
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX = @enumToInt(enum_VkIndirectCommandsLayoutUsageFlagBitsNVX.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX);
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX = @enumToInt(enum_VkIndirectCommandsLayoutUsageFlagBitsNVX.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX);
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX = @enumToInt(enum_VkIndirectCommandsLayoutUsageFlagBitsNVX.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX);
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NVX = @enumToInt(enum_VkIndirectCommandsLayoutUsageFlagBitsNVX.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NVX);
pub const enum_VkIndirectCommandsLayoutUsageFlagBitsNVX = extern enum(c_int) {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX = 1,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX = 2,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX = 4,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX = 8,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NVX = 2147483647,
    _,
};
pub const VkIndirectCommandsLayoutUsageFlagBitsNVX = enum_VkIndirectCommandsLayoutUsageFlagBitsNVX;
pub const VkIndirectCommandsLayoutUsageFlagsNVX = VkFlags;
pub const VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX = @enumToInt(enum_VkObjectEntryUsageFlagBitsNVX.VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX);
pub const VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX = @enumToInt(enum_VkObjectEntryUsageFlagBitsNVX.VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX);
pub const VK_OBJECT_ENTRY_USAGE_FLAG_BITS_MAX_ENUM_NVX = @enumToInt(enum_VkObjectEntryUsageFlagBitsNVX.VK_OBJECT_ENTRY_USAGE_FLAG_BITS_MAX_ENUM_NVX);
pub const enum_VkObjectEntryUsageFlagBitsNVX = extern enum(c_int) {
    VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX = 1,
    VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX = 2,
    VK_OBJECT_ENTRY_USAGE_FLAG_BITS_MAX_ENUM_NVX = 2147483647,
    _,
};
pub const VkObjectEntryUsageFlagBitsNVX = enum_VkObjectEntryUsageFlagBitsNVX;
pub const VkObjectEntryUsageFlagsNVX = VkFlags;
pub const struct_VkDeviceGeneratedCommandsFeaturesNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    computeBindingPointSupport: VkBool32,
};
pub const VkDeviceGeneratedCommandsFeaturesNVX = struct_VkDeviceGeneratedCommandsFeaturesNVX;
pub const struct_VkDeviceGeneratedCommandsLimitsNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    maxIndirectCommandsLayoutTokenCount: u32,
    maxObjectEntryCounts: u32,
    minSequenceCountBufferOffsetAlignment: u32,
    minSequenceIndexBufferOffsetAlignment: u32,
    minCommandsTokenBufferOffsetAlignment: u32,
};
pub const VkDeviceGeneratedCommandsLimitsNVX = struct_VkDeviceGeneratedCommandsLimitsNVX;
pub const struct_VkIndirectCommandsTokenNVX = extern struct {
    tokenType: VkIndirectCommandsTokenTypeNVX,
    buffer: VkBuffer,
    offset: VkDeviceSize,
};
pub const VkIndirectCommandsTokenNVX = struct_VkIndirectCommandsTokenNVX;
pub const struct_VkIndirectCommandsLayoutTokenNVX = extern struct {
    tokenType: VkIndirectCommandsTokenTypeNVX,
    bindingUnit: u32,
    dynamicCount: u32,
    divisor: u32,
};
pub const VkIndirectCommandsLayoutTokenNVX = struct_VkIndirectCommandsLayoutTokenNVX;
pub const struct_VkIndirectCommandsLayoutCreateInfoNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    pipelineBindPoint: VkPipelineBindPoint,
    flags: VkIndirectCommandsLayoutUsageFlagsNVX,
    tokenCount: u32,
    pTokens: [*c]const VkIndirectCommandsLayoutTokenNVX,
};
pub const VkIndirectCommandsLayoutCreateInfoNVX = struct_VkIndirectCommandsLayoutCreateInfoNVX;
pub const struct_VkCmdProcessCommandsInfoNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    objectTable: VkObjectTableNVX,
    indirectCommandsLayout: VkIndirectCommandsLayoutNVX,
    indirectCommandsTokenCount: u32,
    pIndirectCommandsTokens: [*c]const VkIndirectCommandsTokenNVX,
    maxSequencesCount: u32,
    targetCommandBuffer: VkCommandBuffer,
    sequencesCountBuffer: VkBuffer,
    sequencesCountOffset: VkDeviceSize,
    sequencesIndexBuffer: VkBuffer,
    sequencesIndexOffset: VkDeviceSize,
};
pub const VkCmdProcessCommandsInfoNVX = struct_VkCmdProcessCommandsInfoNVX;
pub const struct_VkCmdReserveSpaceForCommandsInfoNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    objectTable: VkObjectTableNVX,
    indirectCommandsLayout: VkIndirectCommandsLayoutNVX,
    maxSequencesCount: u32,
};
pub const VkCmdReserveSpaceForCommandsInfoNVX = struct_VkCmdReserveSpaceForCommandsInfoNVX;
pub const struct_VkObjectTableCreateInfoNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    objectCount: u32,
    pObjectEntryTypes: [*c]const VkObjectEntryTypeNVX,
    pObjectEntryCounts: [*c]const u32,
    pObjectEntryUsageFlags: [*c]const VkObjectEntryUsageFlagsNVX,
    maxUniformBuffersPerDescriptor: u32,
    maxStorageBuffersPerDescriptor: u32,
    maxStorageImagesPerDescriptor: u32,
    maxSampledImagesPerDescriptor: u32,
    maxPipelineLayouts: u32,
};
pub const VkObjectTableCreateInfoNVX = struct_VkObjectTableCreateInfoNVX;
pub const struct_VkObjectTableEntryNVX = extern struct {
    type: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
};
pub const VkObjectTableEntryNVX = struct_VkObjectTableEntryNVX;
pub const struct_VkObjectTablePipelineEntryNVX = extern struct {
    type: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
    pipeline: VkPipeline,
};
pub const VkObjectTablePipelineEntryNVX = struct_VkObjectTablePipelineEntryNVX;
pub const struct_VkObjectTableDescriptorSetEntryNVX = extern struct {
    type: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
    pipelineLayout: VkPipelineLayout,
    descriptorSet: VkDescriptorSet,
};
pub const VkObjectTableDescriptorSetEntryNVX = struct_VkObjectTableDescriptorSetEntryNVX;
pub const struct_VkObjectTableVertexBufferEntryNVX = extern struct {
    type: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
    buffer: VkBuffer,
};
pub const VkObjectTableVertexBufferEntryNVX = struct_VkObjectTableVertexBufferEntryNVX;
pub const struct_VkObjectTableIndexBufferEntryNVX = extern struct {
    type: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
    buffer: VkBuffer,
    indexType: VkIndexType,
};
pub const VkObjectTableIndexBufferEntryNVX = struct_VkObjectTableIndexBufferEntryNVX;
pub const struct_VkObjectTablePushConstantEntryNVX = extern struct {
    type: VkObjectEntryTypeNVX,
    flags: VkObjectEntryUsageFlagsNVX,
    pipelineLayout: VkPipelineLayout,
    stageFlags: VkShaderStageFlags,
};
pub const VkObjectTablePushConstantEntryNVX = struct_VkObjectTablePushConstantEntryNVX;
pub const PFN_vkCmdProcessCommandsNVX = ?fn (VkCommandBuffer, [*c]const VkCmdProcessCommandsInfoNVX) callconv(.C) void;
pub const PFN_vkCmdReserveSpaceForCommandsNVX = ?fn (VkCommandBuffer, [*c]const VkCmdReserveSpaceForCommandsInfoNVX) callconv(.C) void;
pub const PFN_vkCreateIndirectCommandsLayoutNVX = ?fn (VkDevice, [*c]const VkIndirectCommandsLayoutCreateInfoNVX, [*c]const VkAllocationCallbacks, [*c]VkIndirectCommandsLayoutNVX) callconv(.C) VkResult;
pub const PFN_vkDestroyIndirectCommandsLayoutNVX = ?fn (VkDevice, VkIndirectCommandsLayoutNVX, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateObjectTableNVX = ?fn (VkDevice, [*c]const VkObjectTableCreateInfoNVX, [*c]const VkAllocationCallbacks, [*c]VkObjectTableNVX) callconv(.C) VkResult;
pub const PFN_vkDestroyObjectTableNVX = ?fn (VkDevice, VkObjectTableNVX, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkRegisterObjectsNVX = ?fn (VkDevice, VkObjectTableNVX, u32, [*c]const [*c]const VkObjectTableEntryNVX, [*c]const u32) callconv(.C) VkResult;
pub const PFN_vkUnregisterObjectsNVX = ?fn (VkDevice, VkObjectTableNVX, u32, [*c]const VkObjectEntryTypeNVX, [*c]const u32) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX = ?fn (VkPhysicalDevice, [*c]VkDeviceGeneratedCommandsFeaturesNVX, [*c]VkDeviceGeneratedCommandsLimitsNVX) callconv(.C) void;
pub extern fn vkCmdProcessCommandsNVX(commandBuffer: VkCommandBuffer, pProcessCommandsInfo: [*c]const VkCmdProcessCommandsInfoNVX) void;
pub extern fn vkCmdReserveSpaceForCommandsNVX(commandBuffer: VkCommandBuffer, pReserveSpaceInfo: [*c]const VkCmdReserveSpaceForCommandsInfoNVX) void;
pub extern fn vkCreateIndirectCommandsLayoutNVX(device: VkDevice, pCreateInfo: [*c]const VkIndirectCommandsLayoutCreateInfoNVX, pAllocator: [*c]const VkAllocationCallbacks, pIndirectCommandsLayout: [*c]VkIndirectCommandsLayoutNVX) VkResult;
pub extern fn vkDestroyIndirectCommandsLayoutNVX(device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNVX, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateObjectTableNVX(device: VkDevice, pCreateInfo: [*c]const VkObjectTableCreateInfoNVX, pAllocator: [*c]const VkAllocationCallbacks, pObjectTable: [*c]VkObjectTableNVX) VkResult;
pub extern fn vkDestroyObjectTableNVX(device: VkDevice, objectTable: VkObjectTableNVX, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkRegisterObjectsNVX(device: VkDevice, objectTable: VkObjectTableNVX, objectCount: u32, ppObjectTableEntries: [*c]const [*c]const VkObjectTableEntryNVX, pObjectIndices: [*c]const u32) VkResult;
pub extern fn vkUnregisterObjectsNVX(device: VkDevice, objectTable: VkObjectTableNVX, objectCount: u32, pObjectEntryTypes: [*c]const VkObjectEntryTypeNVX, pObjectIndices: [*c]const u32) VkResult;
pub extern fn vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkDeviceGeneratedCommandsFeaturesNVX, pLimits: [*c]VkDeviceGeneratedCommandsLimitsNVX) void;
pub const struct_VkViewportWScalingNV = extern struct {
    xcoeff: f32,
    ycoeff: f32,
};
pub const VkViewportWScalingNV = struct_VkViewportWScalingNV;
pub const struct_VkPipelineViewportWScalingStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    viewportWScalingEnable: VkBool32,
    viewportCount: u32,
    pViewportWScalings: [*c]const VkViewportWScalingNV,
};
pub const VkPipelineViewportWScalingStateCreateInfoNV = struct_VkPipelineViewportWScalingStateCreateInfoNV;
pub const PFN_vkCmdSetViewportWScalingNV = ?fn (VkCommandBuffer, u32, u32, [*c]const VkViewportWScalingNV) callconv(.C) void;
pub extern fn vkCmdSetViewportWScalingNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: [*c]const VkViewportWScalingNV) void;
pub const PFN_vkReleaseDisplayEXT = ?fn (VkPhysicalDevice, VkDisplayKHR) callconv(.C) VkResult;
pub extern fn vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) VkResult;
pub const VK_SURFACE_COUNTER_VBLANK_EXT = @enumToInt(enum_VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_VBLANK_EXT);
pub const VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_VkSurfaceCounterFlagBitsEXT = extern enum(c_int) {
    VK_SURFACE_COUNTER_VBLANK_EXT = 1,
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkSurfaceCounterFlagBitsEXT = enum_VkSurfaceCounterFlagBitsEXT;
pub const VkSurfaceCounterFlagsEXT = VkFlags;
pub const struct_VkSurfaceCapabilities2EXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: VkExtent2D,
    minImageExtent: VkExtent2D,
    maxImageExtent: VkExtent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    currentTransform: VkSurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    supportedUsageFlags: VkImageUsageFlags,
    supportedSurfaceCounters: VkSurfaceCounterFlagsEXT,
};
pub const VkSurfaceCapabilities2EXT = struct_VkSurfaceCapabilities2EXT;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = ?fn (VkPhysicalDevice, VkSurfaceKHR, [*c]VkSurfaceCapabilities2EXT) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilities2EXT) VkResult;
pub const VK_DISPLAY_POWER_STATE_OFF_EXT = @enumToInt(enum_VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_OFF_EXT);
pub const VK_DISPLAY_POWER_STATE_SUSPEND_EXT = @enumToInt(enum_VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_SUSPEND_EXT);
pub const VK_DISPLAY_POWER_STATE_ON_EXT = @enumToInt(enum_VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_ON_EXT);
pub const VK_DISPLAY_POWER_STATE_BEGIN_RANGE_EXT = @enumToInt(enum_VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_BEGIN_RANGE_EXT);
pub const VK_DISPLAY_POWER_STATE_END_RANGE_EXT = @enumToInt(enum_VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_END_RANGE_EXT);
pub const VK_DISPLAY_POWER_STATE_RANGE_SIZE_EXT = @enumToInt(enum_VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_RANGE_SIZE_EXT);
pub const VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = @enumToInt(enum_VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT);
pub const enum_VkDisplayPowerStateEXT = extern enum(c_int) {
    VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
    VK_DISPLAY_POWER_STATE_ON_EXT = 2,
    VK_DISPLAY_POWER_STATE_BEGIN_RANGE_EXT = 0,
    VK_DISPLAY_POWER_STATE_END_RANGE_EXT = 2,
    VK_DISPLAY_POWER_STATE_RANGE_SIZE_EXT = 3,
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkDisplayPowerStateEXT = enum_VkDisplayPowerStateEXT;
pub const VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = @enumToInt(enum_VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT);
pub const VK_DEVICE_EVENT_TYPE_BEGIN_RANGE_EXT = @enumToInt(enum_VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_BEGIN_RANGE_EXT);
pub const VK_DEVICE_EVENT_TYPE_END_RANGE_EXT = @enumToInt(enum_VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_END_RANGE_EXT);
pub const VK_DEVICE_EVENT_TYPE_RANGE_SIZE_EXT = @enumToInt(enum_VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_RANGE_SIZE_EXT);
pub const VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = @enumToInt(enum_VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT);
pub const enum_VkDeviceEventTypeEXT = extern enum(c_int) {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
    VK_DEVICE_EVENT_TYPE_BEGIN_RANGE_EXT = 0,
    VK_DEVICE_EVENT_TYPE_END_RANGE_EXT = 0,
    VK_DEVICE_EVENT_TYPE_RANGE_SIZE_EXT = 1,
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkDeviceEventTypeEXT = enum_VkDeviceEventTypeEXT;
pub const VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = @enumToInt(enum_VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT);
pub const VK_DISPLAY_EVENT_TYPE_BEGIN_RANGE_EXT = @enumToInt(enum_VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_BEGIN_RANGE_EXT);
pub const VK_DISPLAY_EVENT_TYPE_END_RANGE_EXT = @enumToInt(enum_VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_END_RANGE_EXT);
pub const VK_DISPLAY_EVENT_TYPE_RANGE_SIZE_EXT = @enumToInt(enum_VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_RANGE_SIZE_EXT);
pub const VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = @enumToInt(enum_VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT);
pub const enum_VkDisplayEventTypeEXT = extern enum(c_int) {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_BEGIN_RANGE_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_END_RANGE_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_RANGE_SIZE_EXT = 1,
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkDisplayEventTypeEXT = enum_VkDisplayEventTypeEXT;
pub const struct_VkDisplayPowerInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    powerState: VkDisplayPowerStateEXT,
};
pub const VkDisplayPowerInfoEXT = struct_VkDisplayPowerInfoEXT;
pub const struct_VkDeviceEventInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    deviceEvent: VkDeviceEventTypeEXT,
};
pub const VkDeviceEventInfoEXT = struct_VkDeviceEventInfoEXT;
pub const struct_VkDisplayEventInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    displayEvent: VkDisplayEventTypeEXT,
};
pub const VkDisplayEventInfoEXT = struct_VkDisplayEventInfoEXT;
pub const struct_VkSwapchainCounterCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    surfaceCounters: VkSurfaceCounterFlagsEXT,
};
pub const VkSwapchainCounterCreateInfoEXT = struct_VkSwapchainCounterCreateInfoEXT;
pub const PFN_vkDisplayPowerControlEXT = ?fn (VkDevice, VkDisplayKHR, [*c]const VkDisplayPowerInfoEXT) callconv(.C) VkResult;
pub const PFN_vkRegisterDeviceEventEXT = ?fn (VkDevice, [*c]const VkDeviceEventInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkRegisterDisplayEventEXT = ?fn (VkDevice, VkDisplayKHR, [*c]const VkDisplayEventInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkGetSwapchainCounterEXT = ?fn (VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, [*c]u64) callconv(.C) VkResult;
pub extern fn vkDisplayPowerControlEXT(device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: [*c]const VkDisplayPowerInfoEXT) VkResult;
pub extern fn vkRegisterDeviceEventEXT(device: VkDevice, pDeviceEventInfo: [*c]const VkDeviceEventInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkRegisterDisplayEventEXT(device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: [*c]const VkDisplayEventInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkGetSwapchainCounterEXT(device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: [*c]u64) VkResult;
pub const struct_VkRefreshCycleDurationGOOGLE = extern struct {
    refreshDuration: u64,
};
pub const VkRefreshCycleDurationGOOGLE = struct_VkRefreshCycleDurationGOOGLE;
pub const struct_VkPastPresentationTimingGOOGLE = extern struct {
    presentID: u32,
    desiredPresentTime: u64,
    actualPresentTime: u64,
    earliestPresentTime: u64,
    presentMargin: u64,
};
pub const VkPastPresentationTimingGOOGLE = struct_VkPastPresentationTimingGOOGLE;
pub const struct_VkPresentTimeGOOGLE = extern struct {
    presentID: u32,
    desiredPresentTime: u64,
};
pub const VkPresentTimeGOOGLE = struct_VkPresentTimeGOOGLE;
pub const struct_VkPresentTimesInfoGOOGLE = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    swapchainCount: u32,
    pTimes: [*c]const VkPresentTimeGOOGLE,
};
pub const VkPresentTimesInfoGOOGLE = struct_VkPresentTimesInfoGOOGLE;
pub const PFN_vkGetRefreshCycleDurationGOOGLE = ?fn (VkDevice, VkSwapchainKHR, [*c]VkRefreshCycleDurationGOOGLE) callconv(.C) VkResult;
pub const PFN_vkGetPastPresentationTimingGOOGLE = ?fn (VkDevice, VkSwapchainKHR, [*c]u32, [*c]VkPastPresentationTimingGOOGLE) callconv(.C) VkResult;
pub extern fn vkGetRefreshCycleDurationGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: [*c]VkRefreshCycleDurationGOOGLE) VkResult;
pub extern fn vkGetPastPresentationTimingGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: [*c]u32, pPresentationTimings: [*c]VkPastPresentationTimingGOOGLE) VkResult;
pub const struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    perViewPositionAllComponents: VkBool32,
};
pub const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV);
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV);
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV);
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV);
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV);
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV);
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV);
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV);
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_BEGIN_RANGE_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_BEGIN_RANGE_NV);
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_END_RANGE_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_END_RANGE_NV);
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_RANGE_SIZE_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_RANGE_SIZE_NV);
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = @enumToInt(enum_VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV);
pub const enum_VkViewportCoordinateSwizzleNV = extern enum(c_int) {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
    VK_VIEWPORT_COORDINATE_SWIZZLE_BEGIN_RANGE_NV = 0,
    VK_VIEWPORT_COORDINATE_SWIZZLE_END_RANGE_NV = 7,
    VK_VIEWPORT_COORDINATE_SWIZZLE_RANGE_SIZE_NV = 8,
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkViewportCoordinateSwizzleNV = enum_VkViewportCoordinateSwizzleNV;
pub const VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
pub const struct_VkViewportSwizzleNV = extern struct {
    x: VkViewportCoordinateSwizzleNV,
    y: VkViewportCoordinateSwizzleNV,
    z: VkViewportCoordinateSwizzleNV,
    w: VkViewportCoordinateSwizzleNV,
};
pub const VkViewportSwizzleNV = struct_VkViewportSwizzleNV;
pub const struct_VkPipelineViewportSwizzleStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineViewportSwizzleStateCreateFlagsNV,
    viewportCount: u32,
    pViewportSwizzles: [*c]const VkViewportSwizzleNV,
};
pub const VkPipelineViewportSwizzleStateCreateInfoNV = struct_VkPipelineViewportSwizzleStateCreateInfoNV;
pub const VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = @enumToInt(enum_VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT);
pub const VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = @enumToInt(enum_VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT);
pub const VK_DISCARD_RECTANGLE_MODE_BEGIN_RANGE_EXT = @enumToInt(enum_VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_BEGIN_RANGE_EXT);
pub const VK_DISCARD_RECTANGLE_MODE_END_RANGE_EXT = @enumToInt(enum_VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_END_RANGE_EXT);
pub const VK_DISCARD_RECTANGLE_MODE_RANGE_SIZE_EXT = @enumToInt(enum_VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_RANGE_SIZE_EXT);
pub const VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = @enumToInt(enum_VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT);
pub const enum_VkDiscardRectangleModeEXT = extern enum(c_int) {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
    VK_DISCARD_RECTANGLE_MODE_BEGIN_RANGE_EXT = 0,
    VK_DISCARD_RECTANGLE_MODE_END_RANGE_EXT = 1,
    VK_DISCARD_RECTANGLE_MODE_RANGE_SIZE_EXT = 2,
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkDiscardRectangleModeEXT = enum_VkDiscardRectangleModeEXT;
pub const VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    maxDiscardRectangles: u32,
};
pub const VkPhysicalDeviceDiscardRectanglePropertiesEXT = struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT;
pub const struct_VkPipelineDiscardRectangleStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineDiscardRectangleStateCreateFlagsEXT,
    discardRectangleMode: VkDiscardRectangleModeEXT,
    discardRectangleCount: u32,
    pDiscardRectangles: [*c]const VkRect2D,
};
pub const VkPipelineDiscardRectangleStateCreateInfoEXT = struct_VkPipelineDiscardRectangleStateCreateInfoEXT;
pub const PFN_vkCmdSetDiscardRectangleEXT = ?fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub extern fn vkCmdSetDiscardRectangleEXT(commandBuffer: VkCommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: [*c]const VkRect2D) void;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = @enumToInt(enum_VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT);
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = @enumToInt(enum_VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT);
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = @enumToInt(enum_VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT);
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_BEGIN_RANGE_EXT = @enumToInt(enum_VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_BEGIN_RANGE_EXT);
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_END_RANGE_EXT = @enumToInt(enum_VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_END_RANGE_EXT);
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_RANGE_SIZE_EXT = @enumToInt(enum_VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_RANGE_SIZE_EXT);
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = @enumToInt(enum_VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT);
pub const enum_VkConservativeRasterizationModeEXT = extern enum(c_int) {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
    VK_CONSERVATIVE_RASTERIZATION_MODE_BEGIN_RANGE_EXT = 0,
    VK_CONSERVATIVE_RASTERIZATION_MODE_END_RANGE_EXT = 2,
    VK_CONSERVATIVE_RASTERIZATION_MODE_RANGE_SIZE_EXT = 3,
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkConservativeRasterizationModeEXT = enum_VkConservativeRasterizationModeEXT;
pub const VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    primitiveOverestimationSize: f32,
    maxExtraPrimitiveOverestimationSize: f32,
    extraPrimitiveOverestimationSizeGranularity: f32,
    primitiveUnderestimation: VkBool32,
    conservativePointAndLineRasterization: VkBool32,
    degenerateTrianglesRasterized: VkBool32,
    degenerateLinesRasterized: VkBool32,
    fullyCoveredFragmentShaderInputVariable: VkBool32,
    conservativeRasterizationPostDepthCoverage: VkBool32,
};
pub const VkPhysicalDeviceConservativeRasterizationPropertiesEXT = struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
pub const struct_VkPipelineRasterizationConservativeStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT,
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    extraPrimitiveOverestimationSize: f32,
};
pub const VkPipelineRasterizationConservativeStateCreateInfoEXT = struct_VkPipelineRasterizationConservativeStateCreateInfoEXT;
pub const VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    depthClipEnable: VkBool32,
};
pub const VkPhysicalDeviceDepthClipEnableFeaturesEXT = struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT;
pub const struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
    depthClipEnable: VkBool32,
};
pub const VkPipelineRasterizationDepthClipStateCreateInfoEXT = struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT;
pub const struct_VkXYColorEXT = extern struct {
    x: f32,
    y: f32,
};
pub const VkXYColorEXT = struct_VkXYColorEXT;
pub const struct_VkHdrMetadataEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    displayPrimaryRed: VkXYColorEXT,
    displayPrimaryGreen: VkXYColorEXT,
    displayPrimaryBlue: VkXYColorEXT,
    whitePoint: VkXYColorEXT,
    maxLuminance: f32,
    minLuminance: f32,
    maxContentLightLevel: f32,
    maxFrameAverageLightLevel: f32,
};
pub const VkHdrMetadataEXT = struct_VkHdrMetadataEXT;
pub const PFN_vkSetHdrMetadataEXT = ?fn (VkDevice, u32, [*c]const VkSwapchainKHR, [*c]const VkHdrMetadataEXT) callconv(.C) void;
pub extern fn vkSetHdrMetadataEXT(device: VkDevice, swapchainCount: u32, pSwapchains: [*c]const VkSwapchainKHR, pMetadata: [*c]const VkHdrMetadataEXT) void;
pub const struct_VkDebugUtilsMessengerEXT_T = @OpaqueType();
pub const VkDebugUtilsMessengerEXT = ?*struct_VkDebugUtilsMessengerEXT_T;
pub const VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
pub const VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = @enumToInt(enum_VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT);
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = @enumToInt(enum_VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT);
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = @enumToInt(enum_VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT);
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = @enumToInt(enum_VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT);
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_VkDebugUtilsMessageSeverityFlagBitsEXT = extern enum(c_int) {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkDebugUtilsMessageSeverityFlagBitsEXT = enum_VkDebugUtilsMessageSeverityFlagBitsEXT;
pub const VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = @enumToInt(enum_VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT);
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = @enumToInt(enum_VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT);
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = @enumToInt(enum_VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT);
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_VkDebugUtilsMessageTypeFlagBitsEXT = extern enum(c_int) {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkDebugUtilsMessageTypeFlagBitsEXT = enum_VkDebugUtilsMessageTypeFlagBitsEXT;
pub const VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub const struct_VkDebugUtilsObjectNameInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    objectType: VkObjectType,
    objectHandle: u64,
    pObjectName: [*c]const u8,
};
pub const VkDebugUtilsObjectNameInfoEXT = struct_VkDebugUtilsObjectNameInfoEXT;
pub const struct_VkDebugUtilsObjectTagInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    objectType: VkObjectType,
    objectHandle: u64,
    tagName: u64,
    tagSize: usize,
    pTag: ?*const c_void,
};
pub const VkDebugUtilsObjectTagInfoEXT = struct_VkDebugUtilsObjectTagInfoEXT;
pub const struct_VkDebugUtilsLabelEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    pLabelName: [*c]const u8,
    color: [4]f32,
};
pub const VkDebugUtilsLabelEXT = struct_VkDebugUtilsLabelEXT;
pub const struct_VkDebugUtilsMessengerCallbackDataEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkDebugUtilsMessengerCallbackDataFlagsEXT,
    pMessageIdName: [*c]const u8,
    messageIdNumber: i32,
    pMessage: [*c]const u8,
    queueLabelCount: u32,
    pQueueLabels: [*c]const VkDebugUtilsLabelEXT,
    cmdBufLabelCount: u32,
    pCmdBufLabels: [*c]const VkDebugUtilsLabelEXT,
    objectCount: u32,
    pObjects: [*c]const VkDebugUtilsObjectNameInfoEXT,
};
pub const VkDebugUtilsMessengerCallbackDataEXT = struct_VkDebugUtilsMessengerCallbackDataEXT;
pub const PFN_vkDebugUtilsMessengerCallbackEXT = ?fn (VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, [*c]const VkDebugUtilsMessengerCallbackDataEXT, ?*c_void) callconv(.C) VkBool32;
pub const struct_VkDebugUtilsMessengerCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkDebugUtilsMessengerCreateFlagsEXT,
    messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT,
    messageType: VkDebugUtilsMessageTypeFlagsEXT,
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
    pUserData: ?*c_void,
};
pub const VkDebugUtilsMessengerCreateInfoEXT = struct_VkDebugUtilsMessengerCreateInfoEXT;
pub const PFN_vkSetDebugUtilsObjectNameEXT = ?fn (VkDevice, [*c]const VkDebugUtilsObjectNameInfoEXT) callconv(.C) VkResult;
pub const PFN_vkSetDebugUtilsObjectTagEXT = ?fn (VkDevice, [*c]const VkDebugUtilsObjectTagInfoEXT) callconv(.C) VkResult;
pub const PFN_vkQueueBeginDebugUtilsLabelEXT = ?fn (VkQueue, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkQueueEndDebugUtilsLabelEXT = ?fn (VkQueue) callconv(.C) void;
pub const PFN_vkQueueInsertDebugUtilsLabelEXT = ?fn (VkQueue, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdBeginDebugUtilsLabelEXT = ?fn (VkCommandBuffer, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdEndDebugUtilsLabelEXT = ?fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdInsertDebugUtilsLabelEXT = ?fn (VkCommandBuffer, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCreateDebugUtilsMessengerEXT = ?fn (VkInstance, [*c]const VkDebugUtilsMessengerCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkDebugUtilsMessengerEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyDebugUtilsMessengerEXT = ?fn (VkInstance, VkDebugUtilsMessengerEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSubmitDebugUtilsMessageEXT = ?fn (VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, [*c]const VkDebugUtilsMessengerCallbackDataEXT) callconv(.C) void;
pub extern fn vkSetDebugUtilsObjectNameEXT(device: VkDevice, pNameInfo: [*c]const VkDebugUtilsObjectNameInfoEXT) VkResult;
pub extern fn vkSetDebugUtilsObjectTagEXT(device: VkDevice, pTagInfo: [*c]const VkDebugUtilsObjectTagInfoEXT) VkResult;
pub extern fn vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkQueueEndDebugUtilsLabelEXT(queue: VkQueue) void;
pub extern fn vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCmdBeginDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdInsertDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCreateDebugUtilsMessengerEXT(instance: VkInstance, pCreateInfo: [*c]const VkDebugUtilsMessengerCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pMessenger: [*c]VkDebugUtilsMessengerEXT) VkResult;
pub extern fn vkDestroyDebugUtilsMessengerEXT(instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkSubmitDebugUtilsMessageEXT(instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: [*c]const VkDebugUtilsMessengerCallbackDataEXT) void;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = @enumToInt(enum_VkSamplerReductionModeEXT.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT);
pub const VK_SAMPLER_REDUCTION_MODE_MIN_EXT = @enumToInt(enum_VkSamplerReductionModeEXT.VK_SAMPLER_REDUCTION_MODE_MIN_EXT);
pub const VK_SAMPLER_REDUCTION_MODE_MAX_EXT = @enumToInt(enum_VkSamplerReductionModeEXT.VK_SAMPLER_REDUCTION_MODE_MAX_EXT);
pub const VK_SAMPLER_REDUCTION_MODE_BEGIN_RANGE_EXT = @enumToInt(enum_VkSamplerReductionModeEXT.VK_SAMPLER_REDUCTION_MODE_BEGIN_RANGE_EXT);
pub const VK_SAMPLER_REDUCTION_MODE_END_RANGE_EXT = @enumToInt(enum_VkSamplerReductionModeEXT.VK_SAMPLER_REDUCTION_MODE_END_RANGE_EXT);
pub const VK_SAMPLER_REDUCTION_MODE_RANGE_SIZE_EXT = @enumToInt(enum_VkSamplerReductionModeEXT.VK_SAMPLER_REDUCTION_MODE_RANGE_SIZE_EXT);
pub const VK_SAMPLER_REDUCTION_MODE_MAX_ENUM_EXT = @enumToInt(enum_VkSamplerReductionModeEXT.VK_SAMPLER_REDUCTION_MODE_MAX_ENUM_EXT);
pub const enum_VkSamplerReductionModeEXT = extern enum(c_int) {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0,
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1,
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2,
    VK_SAMPLER_REDUCTION_MODE_BEGIN_RANGE_EXT = 0,
    VK_SAMPLER_REDUCTION_MODE_END_RANGE_EXT = 2,
    VK_SAMPLER_REDUCTION_MODE_RANGE_SIZE_EXT = 3,
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkSamplerReductionModeEXT = enum_VkSamplerReductionModeEXT;
pub const struct_VkSamplerReductionModeCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    reductionMode: VkSamplerReductionModeEXT,
};
pub const VkSamplerReductionModeCreateInfoEXT = struct_VkSamplerReductionModeCreateInfoEXT;
pub const struct_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    filterMinmaxSingleComponentFormats: VkBool32,
    filterMinmaxImageComponentMapping: VkBool32,
};
pub const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = struct_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;
pub const struct_VkPhysicalDeviceInlineUniformBlockFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    inlineUniformBlock: VkBool32,
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
};
pub const VkPhysicalDeviceInlineUniformBlockFeaturesEXT = struct_VkPhysicalDeviceInlineUniformBlockFeaturesEXT;
pub const struct_VkPhysicalDeviceInlineUniformBlockPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    maxInlineUniformBlockSize: u32,
    maxPerStageDescriptorInlineUniformBlocks: u32,
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    maxDescriptorSetInlineUniformBlocks: u32,
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
};
pub const VkPhysicalDeviceInlineUniformBlockPropertiesEXT = struct_VkPhysicalDeviceInlineUniformBlockPropertiesEXT;
pub const struct_VkWriteDescriptorSetInlineUniformBlockEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    dataSize: u32,
    pData: ?*const c_void,
};
pub const VkWriteDescriptorSetInlineUniformBlockEXT = struct_VkWriteDescriptorSetInlineUniformBlockEXT;
pub const struct_VkDescriptorPoolInlineUniformBlockCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    maxInlineUniformBlockBindings: u32,
};
pub const VkDescriptorPoolInlineUniformBlockCreateInfoEXT = struct_VkDescriptorPoolInlineUniformBlockCreateInfoEXT;
pub const struct_VkSampleLocationEXT = extern struct {
    x: f32,
    y: f32,
};
pub const VkSampleLocationEXT = struct_VkSampleLocationEXT;
pub const struct_VkSampleLocationsInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    sampleLocationsPerPixel: VkSampleCountFlagBits,
    sampleLocationGridSize: VkExtent2D,
    sampleLocationsCount: u32,
    pSampleLocations: [*c]const VkSampleLocationEXT,
};
pub const VkSampleLocationsInfoEXT = struct_VkSampleLocationsInfoEXT;
pub const struct_VkAttachmentSampleLocationsEXT = extern struct {
    attachmentIndex: u32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
};
pub const VkAttachmentSampleLocationsEXT = struct_VkAttachmentSampleLocationsEXT;
pub const struct_VkSubpassSampleLocationsEXT = extern struct {
    subpassIndex: u32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
};
pub const VkSubpassSampleLocationsEXT = struct_VkSubpassSampleLocationsEXT;
pub const struct_VkRenderPassSampleLocationsBeginInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    attachmentInitialSampleLocationsCount: u32,
    pAttachmentInitialSampleLocations: [*c]const VkAttachmentSampleLocationsEXT,
    postSubpassSampleLocationsCount: u32,
    pPostSubpassSampleLocations: [*c]const VkSubpassSampleLocationsEXT,
};
pub const VkRenderPassSampleLocationsBeginInfoEXT = struct_VkRenderPassSampleLocationsBeginInfoEXT;
pub const struct_VkPipelineSampleLocationsStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    sampleLocationsEnable: VkBool32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
};
pub const VkPipelineSampleLocationsStateCreateInfoEXT = struct_VkPipelineSampleLocationsStateCreateInfoEXT;
pub const struct_VkPhysicalDeviceSampleLocationsPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    sampleLocationSampleCounts: VkSampleCountFlags,
    maxSampleLocationGridSize: VkExtent2D,
    sampleLocationCoordinateRange: [2]f32,
    sampleLocationSubPixelBits: u32,
    variableSampleLocations: VkBool32,
};
pub const VkPhysicalDeviceSampleLocationsPropertiesEXT = struct_VkPhysicalDeviceSampleLocationsPropertiesEXT;
pub const struct_VkMultisamplePropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    maxSampleLocationGridSize: VkExtent2D,
};
pub const VkMultisamplePropertiesEXT = struct_VkMultisamplePropertiesEXT;
pub const PFN_vkCmdSetSampleLocationsEXT = ?fn (VkCommandBuffer, [*c]const VkSampleLocationsInfoEXT) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = ?fn (VkPhysicalDevice, VkSampleCountFlagBits, [*c]VkMultisamplePropertiesEXT) callconv(.C) void;
pub extern fn vkCmdSetSampleLocationsEXT(commandBuffer: VkCommandBuffer, pSampleLocationsInfo: [*c]const VkSampleLocationsInfoEXT) void;
pub extern fn vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: [*c]VkMultisamplePropertiesEXT) void;
pub const VK_BLEND_OVERLAP_UNCORRELATED_EXT = @enumToInt(enum_VkBlendOverlapEXT.VK_BLEND_OVERLAP_UNCORRELATED_EXT);
pub const VK_BLEND_OVERLAP_DISJOINT_EXT = @enumToInt(enum_VkBlendOverlapEXT.VK_BLEND_OVERLAP_DISJOINT_EXT);
pub const VK_BLEND_OVERLAP_CONJOINT_EXT = @enumToInt(enum_VkBlendOverlapEXT.VK_BLEND_OVERLAP_CONJOINT_EXT);
pub const VK_BLEND_OVERLAP_BEGIN_RANGE_EXT = @enumToInt(enum_VkBlendOverlapEXT.VK_BLEND_OVERLAP_BEGIN_RANGE_EXT);
pub const VK_BLEND_OVERLAP_END_RANGE_EXT = @enumToInt(enum_VkBlendOverlapEXT.VK_BLEND_OVERLAP_END_RANGE_EXT);
pub const VK_BLEND_OVERLAP_RANGE_SIZE_EXT = @enumToInt(enum_VkBlendOverlapEXT.VK_BLEND_OVERLAP_RANGE_SIZE_EXT);
pub const VK_BLEND_OVERLAP_MAX_ENUM_EXT = @enumToInt(enum_VkBlendOverlapEXT.VK_BLEND_OVERLAP_MAX_ENUM_EXT);
pub const enum_VkBlendOverlapEXT = extern enum(c_int) {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
    VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
    VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
    VK_BLEND_OVERLAP_BEGIN_RANGE_EXT = 0,
    VK_BLEND_OVERLAP_END_RANGE_EXT = 2,
    VK_BLEND_OVERLAP_RANGE_SIZE_EXT = 3,
    VK_BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkBlendOverlapEXT = enum_VkBlendOverlapEXT;
pub const struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    advancedBlendCoherentOperations: VkBool32,
};
pub const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
pub const struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    advancedBlendMaxColorAttachments: u32,
    advancedBlendIndependentBlend: VkBool32,
    advancedBlendNonPremultipliedSrcColor: VkBool32,
    advancedBlendNonPremultipliedDstColor: VkBool32,
    advancedBlendCorrelatedOverlap: VkBool32,
    advancedBlendAllOperations: VkBool32,
};
pub const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
pub const struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    srcPremultiplied: VkBool32,
    dstPremultiplied: VkBool32,
    blendOverlap: VkBlendOverlapEXT,
};
pub const VkPipelineColorBlendAdvancedStateCreateInfoEXT = struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT;
pub const VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
pub const struct_VkPipelineCoverageToColorStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineCoverageToColorStateCreateFlagsNV,
    coverageToColorEnable: VkBool32,
    coverageToColorLocation: u32,
};
pub const VkPipelineCoverageToColorStateCreateInfoNV = struct_VkPipelineCoverageToColorStateCreateInfoNV;
pub const VK_COVERAGE_MODULATION_MODE_NONE_NV = @enumToInt(enum_VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_NONE_NV);
pub const VK_COVERAGE_MODULATION_MODE_RGB_NV = @enumToInt(enum_VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGB_NV);
pub const VK_COVERAGE_MODULATION_MODE_ALPHA_NV = @enumToInt(enum_VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_ALPHA_NV);
pub const VK_COVERAGE_MODULATION_MODE_RGBA_NV = @enumToInt(enum_VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGBA_NV);
pub const VK_COVERAGE_MODULATION_MODE_BEGIN_RANGE_NV = @enumToInt(enum_VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_BEGIN_RANGE_NV);
pub const VK_COVERAGE_MODULATION_MODE_END_RANGE_NV = @enumToInt(enum_VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_END_RANGE_NV);
pub const VK_COVERAGE_MODULATION_MODE_RANGE_SIZE_NV = @enumToInt(enum_VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RANGE_SIZE_NV);
pub const VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = @enumToInt(enum_VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV);
pub const enum_VkCoverageModulationModeNV = extern enum(c_int) {
    VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
    VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
    VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
    VK_COVERAGE_MODULATION_MODE_BEGIN_RANGE_NV = 0,
    VK_COVERAGE_MODULATION_MODE_END_RANGE_NV = 3,
    VK_COVERAGE_MODULATION_MODE_RANGE_SIZE_NV = 4,
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkCoverageModulationModeNV = enum_VkCoverageModulationModeNV;
pub const VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
pub const struct_VkPipelineCoverageModulationStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineCoverageModulationStateCreateFlagsNV,
    coverageModulationMode: VkCoverageModulationModeNV,
    coverageModulationTableEnable: VkBool32,
    coverageModulationTableCount: u32,
    pCoverageModulationTable: [*c]const f32,
};
pub const VkPipelineCoverageModulationStateCreateInfoNV = struct_VkPipelineCoverageModulationStateCreateInfoNV;
pub const struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shaderSMCount: u32,
    shaderWarpsPerSM: u32,
};
pub const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;
pub const struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shaderSMBuiltins: VkBool32,
};
pub const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;
pub const struct_VkDrmFormatModifierPropertiesEXT = extern struct {
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags,
};
pub const VkDrmFormatModifierPropertiesEXT = struct_VkDrmFormatModifierPropertiesEXT;
pub const struct_VkDrmFormatModifierPropertiesListEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    drmFormatModifierCount: u32,
    pDrmFormatModifierProperties: [*c]VkDrmFormatModifierPropertiesEXT,
};
pub const VkDrmFormatModifierPropertiesListEXT = struct_VkDrmFormatModifierPropertiesListEXT;
pub const struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    drmFormatModifier: u64,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
};
pub const VkPhysicalDeviceImageDrmFormatModifierInfoEXT = struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
pub const struct_VkImageDrmFormatModifierListCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    drmFormatModifierCount: u32,
    pDrmFormatModifiers: [*c]const u64,
};
pub const VkImageDrmFormatModifierListCreateInfoEXT = struct_VkImageDrmFormatModifierListCreateInfoEXT;
pub const struct_VkImageDrmFormatModifierExplicitCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    pPlaneLayouts: [*c]const VkSubresourceLayout,
};
pub const VkImageDrmFormatModifierExplicitCreateInfoEXT = struct_VkImageDrmFormatModifierExplicitCreateInfoEXT;
pub const struct_VkImageDrmFormatModifierPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    drmFormatModifier: u64,
};
pub const VkImageDrmFormatModifierPropertiesEXT = struct_VkImageDrmFormatModifierPropertiesEXT;
pub const PFN_vkGetImageDrmFormatModifierPropertiesEXT = ?fn (VkDevice, VkImage, [*c]VkImageDrmFormatModifierPropertiesEXT) callconv(.C) VkResult;
pub extern fn vkGetImageDrmFormatModifierPropertiesEXT(device: VkDevice, image: VkImage, pProperties: [*c]VkImageDrmFormatModifierPropertiesEXT) VkResult;
pub const struct_VkValidationCacheEXT_T = @OpaqueType();
pub const VkValidationCacheEXT = ?*struct_VkValidationCacheEXT_T;
pub const VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = @enumToInt(enum_VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT);
pub const VK_VALIDATION_CACHE_HEADER_VERSION_BEGIN_RANGE_EXT = @enumToInt(enum_VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_BEGIN_RANGE_EXT);
pub const VK_VALIDATION_CACHE_HEADER_VERSION_END_RANGE_EXT = @enumToInt(enum_VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_END_RANGE_EXT);
pub const VK_VALIDATION_CACHE_HEADER_VERSION_RANGE_SIZE_EXT = @enumToInt(enum_VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_RANGE_SIZE_EXT);
pub const VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = @enumToInt(enum_VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT);
pub const enum_VkValidationCacheHeaderVersionEXT = extern enum(c_int) {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_BEGIN_RANGE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_END_RANGE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_RANGE_SIZE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkValidationCacheHeaderVersionEXT = enum_VkValidationCacheHeaderVersionEXT;
pub const VkValidationCacheCreateFlagsEXT = VkFlags;
pub const struct_VkValidationCacheCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkValidationCacheCreateFlagsEXT,
    initialDataSize: usize,
    pInitialData: ?*const c_void,
};
pub const VkValidationCacheCreateInfoEXT = struct_VkValidationCacheCreateInfoEXT;
pub const struct_VkShaderModuleValidationCacheCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    validationCache: VkValidationCacheEXT,
};
pub const VkShaderModuleValidationCacheCreateInfoEXT = struct_VkShaderModuleValidationCacheCreateInfoEXT;
pub const PFN_vkCreateValidationCacheEXT = ?fn (VkDevice, [*c]const VkValidationCacheCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkValidationCacheEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyValidationCacheEXT = ?fn (VkDevice, VkValidationCacheEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkMergeValidationCachesEXT = ?fn (VkDevice, VkValidationCacheEXT, u32, [*c]const VkValidationCacheEXT) callconv(.C) VkResult;
pub const PFN_vkGetValidationCacheDataEXT = ?fn (VkDevice, VkValidationCacheEXT, [*c]usize, ?*c_void) callconv(.C) VkResult;
pub extern fn vkCreateValidationCacheEXT(device: VkDevice, pCreateInfo: [*c]const VkValidationCacheCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pValidationCache: [*c]VkValidationCacheEXT) VkResult;
pub extern fn vkDestroyValidationCacheEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkMergeValidationCachesEXT(device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: u32, pSrcCaches: [*c]const VkValidationCacheEXT) VkResult;
pub extern fn vkGetValidationCacheDataEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: [*c]usize, pData: ?*c_void) VkResult;
pub const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = @enumToInt(enum_VkDescriptorBindingFlagBitsEXT.VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT);
pub const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = @enumToInt(enum_VkDescriptorBindingFlagBitsEXT.VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT);
pub const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = @enumToInt(enum_VkDescriptorBindingFlagBitsEXT.VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT);
pub const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = @enumToInt(enum_VkDescriptorBindingFlagBitsEXT.VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT);
pub const VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_VkDescriptorBindingFlagBitsEXT.VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_VkDescriptorBindingFlagBitsEXT = extern enum(c_int) {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8,
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkDescriptorBindingFlagBitsEXT = enum_VkDescriptorBindingFlagBitsEXT;
pub const VkDescriptorBindingFlagsEXT = VkFlags;
pub const struct_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    bindingCount: u32,
    pBindingFlags: [*c]const VkDescriptorBindingFlagsEXT,
};
pub const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = struct_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;
pub const struct_VkPhysicalDeviceDescriptorIndexingFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    shaderSampledImageArrayNonUniformIndexing: VkBool32,
    shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageImageArrayNonUniformIndexing: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingUpdateUnusedWhilePending: VkBool32,
    descriptorBindingPartiallyBound: VkBool32,
    descriptorBindingVariableDescriptorCount: VkBool32,
    runtimeDescriptorArray: VkBool32,
};
pub const VkPhysicalDeviceDescriptorIndexingFeaturesEXT = struct_VkPhysicalDeviceDescriptorIndexingFeaturesEXT;
pub const struct_VkPhysicalDeviceDescriptorIndexingPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    robustBufferAccessUpdateAfterBind: VkBool32,
    quadDivergentImplicitLod: VkBool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
};
pub const VkPhysicalDeviceDescriptorIndexingPropertiesEXT = struct_VkPhysicalDeviceDescriptorIndexingPropertiesEXT;
pub const struct_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    descriptorSetCount: u32,
    pDescriptorCounts: [*c]const u32,
};
pub const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = struct_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;
pub const struct_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    maxVariableDescriptorCount: u32,
};
pub const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = struct_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;
pub const VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_BEGIN_RANGE_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_BEGIN_RANGE_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_END_RANGE_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_END_RANGE_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_RANGE_SIZE_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_RANGE_SIZE_NV);
pub const VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = @enumToInt(enum_VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV);
pub const enum_VkShadingRatePaletteEntryNV = extern enum(c_int) {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
    VK_SHADING_RATE_PALETTE_ENTRY_BEGIN_RANGE_NV = 0,
    VK_SHADING_RATE_PALETTE_ENTRY_END_RANGE_NV = 11,
    VK_SHADING_RATE_PALETTE_ENTRY_RANGE_SIZE_NV = 12,
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkShadingRatePaletteEntryNV = enum_VkShadingRatePaletteEntryNV;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = @enumToInt(enum_VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV);
pub const VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = @enumToInt(enum_VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV);
pub const VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = @enumToInt(enum_VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV);
pub const VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = @enumToInt(enum_VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV);
pub const VK_COARSE_SAMPLE_ORDER_TYPE_BEGIN_RANGE_NV = @enumToInt(enum_VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_BEGIN_RANGE_NV);
pub const VK_COARSE_SAMPLE_ORDER_TYPE_END_RANGE_NV = @enumToInt(enum_VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_END_RANGE_NV);
pub const VK_COARSE_SAMPLE_ORDER_TYPE_RANGE_SIZE_NV = @enumToInt(enum_VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_RANGE_SIZE_NV);
pub const VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = @enumToInt(enum_VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV);
pub const enum_VkCoarseSampleOrderTypeNV = extern enum(c_int) {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
    VK_COARSE_SAMPLE_ORDER_TYPE_BEGIN_RANGE_NV = 0,
    VK_COARSE_SAMPLE_ORDER_TYPE_END_RANGE_NV = 3,
    VK_COARSE_SAMPLE_ORDER_TYPE_RANGE_SIZE_NV = 4,
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkCoarseSampleOrderTypeNV = enum_VkCoarseSampleOrderTypeNV;
pub const struct_VkShadingRatePaletteNV = extern struct {
    shadingRatePaletteEntryCount: u32,
    pShadingRatePaletteEntries: [*c]const VkShadingRatePaletteEntryNV,
};
pub const VkShadingRatePaletteNV = struct_VkShadingRatePaletteNV;
pub const struct_VkPipelineViewportShadingRateImageStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    shadingRateImageEnable: VkBool32,
    viewportCount: u32,
    pShadingRatePalettes: [*c]const VkShadingRatePaletteNV,
};
pub const VkPipelineViewportShadingRateImageStateCreateInfoNV = struct_VkPipelineViewportShadingRateImageStateCreateInfoNV;
pub const struct_VkPhysicalDeviceShadingRateImageFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shadingRateImage: VkBool32,
    shadingRateCoarseSampleOrder: VkBool32,
};
pub const VkPhysicalDeviceShadingRateImageFeaturesNV = struct_VkPhysicalDeviceShadingRateImageFeaturesNV;
pub const struct_VkPhysicalDeviceShadingRateImagePropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shadingRateTexelSize: VkExtent2D,
    shadingRatePaletteSize: u32,
    shadingRateMaxCoarseSamples: u32,
};
pub const VkPhysicalDeviceShadingRateImagePropertiesNV = struct_VkPhysicalDeviceShadingRateImagePropertiesNV;
pub const struct_VkCoarseSampleLocationNV = extern struct {
    pixelX: u32,
    pixelY: u32,
    sample: u32,
};
pub const VkCoarseSampleLocationNV = struct_VkCoarseSampleLocationNV;
pub const struct_VkCoarseSampleOrderCustomNV = extern struct {
    shadingRate: VkShadingRatePaletteEntryNV,
    sampleCount: u32,
    sampleLocationCount: u32,
    pSampleLocations: [*c]const VkCoarseSampleLocationNV,
};
pub const VkCoarseSampleOrderCustomNV = struct_VkCoarseSampleOrderCustomNV;
pub const struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    sampleOrderType: VkCoarseSampleOrderTypeNV,
    customSampleOrderCount: u32,
    pCustomSampleOrders: [*c]const VkCoarseSampleOrderCustomNV,
};
pub const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
pub const PFN_vkCmdBindShadingRateImageNV = ?fn (VkCommandBuffer, VkImageView, VkImageLayout) callconv(.C) void;
pub const PFN_vkCmdSetViewportShadingRatePaletteNV = ?fn (VkCommandBuffer, u32, u32, [*c]const VkShadingRatePaletteNV) callconv(.C) void;
pub const PFN_vkCmdSetCoarseSampleOrderNV = ?fn (VkCommandBuffer, VkCoarseSampleOrderTypeNV, u32, [*c]const VkCoarseSampleOrderCustomNV) callconv(.C) void;
pub extern fn vkCmdBindShadingRateImageNV(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) void;
pub extern fn vkCmdSetViewportShadingRatePaletteNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: [*c]const VkShadingRatePaletteNV) void;
pub extern fn vkCmdSetCoarseSampleOrderNV(commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: [*c]const VkCoarseSampleOrderCustomNV) void;
pub const struct_VkAccelerationStructureNV_T = @OpaqueType();
pub const VkAccelerationStructureNV = ?*struct_VkAccelerationStructureNV_T;
pub const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = @enumToInt(enum_VkAccelerationStructureTypeNV.VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV);
pub const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = @enumToInt(enum_VkAccelerationStructureTypeNV.VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV);
pub const VK_ACCELERATION_STRUCTURE_TYPE_BEGIN_RANGE_NV = @enumToInt(enum_VkAccelerationStructureTypeNV.VK_ACCELERATION_STRUCTURE_TYPE_BEGIN_RANGE_NV);
pub const VK_ACCELERATION_STRUCTURE_TYPE_END_RANGE_NV = @enumToInt(enum_VkAccelerationStructureTypeNV.VK_ACCELERATION_STRUCTURE_TYPE_END_RANGE_NV);
pub const VK_ACCELERATION_STRUCTURE_TYPE_RANGE_SIZE_NV = @enumToInt(enum_VkAccelerationStructureTypeNV.VK_ACCELERATION_STRUCTURE_TYPE_RANGE_SIZE_NV);
pub const VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NV = @enumToInt(enum_VkAccelerationStructureTypeNV.VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NV);
pub const enum_VkAccelerationStructureTypeNV = extern enum(c_int) {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1,
    VK_ACCELERATION_STRUCTURE_TYPE_BEGIN_RANGE_NV = 0,
    VK_ACCELERATION_STRUCTURE_TYPE_END_RANGE_NV = 1,
    VK_ACCELERATION_STRUCTURE_TYPE_RANGE_SIZE_NV = 2,
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkAccelerationStructureTypeNV = enum_VkAccelerationStructureTypeNV;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = @enumToInt(enum_VkRayTracingShaderGroupTypeNV.VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV);
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = @enumToInt(enum_VkRayTracingShaderGroupTypeNV.VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV);
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = @enumToInt(enum_VkRayTracingShaderGroupTypeNV.VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV);
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_BEGIN_RANGE_NV = @enumToInt(enum_VkRayTracingShaderGroupTypeNV.VK_RAY_TRACING_SHADER_GROUP_TYPE_BEGIN_RANGE_NV);
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_END_RANGE_NV = @enumToInt(enum_VkRayTracingShaderGroupTypeNV.VK_RAY_TRACING_SHADER_GROUP_TYPE_END_RANGE_NV);
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_RANGE_SIZE_NV = @enumToInt(enum_VkRayTracingShaderGroupTypeNV.VK_RAY_TRACING_SHADER_GROUP_TYPE_RANGE_SIZE_NV);
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_NV = @enumToInt(enum_VkRayTracingShaderGroupTypeNV.VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_NV);
pub const enum_VkRayTracingShaderGroupTypeNV = extern enum(c_int) {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_BEGIN_RANGE_NV = 0,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_END_RANGE_NV = 2,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_RANGE_SIZE_NV = 3,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkRayTracingShaderGroupTypeNV = enum_VkRayTracingShaderGroupTypeNV;
pub const VK_GEOMETRY_TYPE_TRIANGLES_NV = @enumToInt(enum_VkGeometryTypeNV.VK_GEOMETRY_TYPE_TRIANGLES_NV);
pub const VK_GEOMETRY_TYPE_AABBS_NV = @enumToInt(enum_VkGeometryTypeNV.VK_GEOMETRY_TYPE_AABBS_NV);
pub const VK_GEOMETRY_TYPE_BEGIN_RANGE_NV = @enumToInt(enum_VkGeometryTypeNV.VK_GEOMETRY_TYPE_BEGIN_RANGE_NV);
pub const VK_GEOMETRY_TYPE_END_RANGE_NV = @enumToInt(enum_VkGeometryTypeNV.VK_GEOMETRY_TYPE_END_RANGE_NV);
pub const VK_GEOMETRY_TYPE_RANGE_SIZE_NV = @enumToInt(enum_VkGeometryTypeNV.VK_GEOMETRY_TYPE_RANGE_SIZE_NV);
pub const VK_GEOMETRY_TYPE_MAX_ENUM_NV = @enumToInt(enum_VkGeometryTypeNV.VK_GEOMETRY_TYPE_MAX_ENUM_NV);
pub const enum_VkGeometryTypeNV = extern enum(c_int) {
    VK_GEOMETRY_TYPE_TRIANGLES_NV = 0,
    VK_GEOMETRY_TYPE_AABBS_NV = 1,
    VK_GEOMETRY_TYPE_BEGIN_RANGE_NV = 0,
    VK_GEOMETRY_TYPE_END_RANGE_NV = 1,
    VK_GEOMETRY_TYPE_RANGE_SIZE_NV = 2,
    VK_GEOMETRY_TYPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkGeometryTypeNV = enum_VkGeometryTypeNV;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = @enumToInt(enum_VkCopyAccelerationStructureModeNV.VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV);
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = @enumToInt(enum_VkCopyAccelerationStructureModeNV.VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV);
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_BEGIN_RANGE_NV = @enumToInt(enum_VkCopyAccelerationStructureModeNV.VK_COPY_ACCELERATION_STRUCTURE_MODE_BEGIN_RANGE_NV);
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_END_RANGE_NV = @enumToInt(enum_VkCopyAccelerationStructureModeNV.VK_COPY_ACCELERATION_STRUCTURE_MODE_END_RANGE_NV);
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_RANGE_SIZE_NV = @enumToInt(enum_VkCopyAccelerationStructureModeNV.VK_COPY_ACCELERATION_STRUCTURE_MODE_RANGE_SIZE_NV);
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_NV = @enumToInt(enum_VkCopyAccelerationStructureModeNV.VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_NV);
pub const enum_VkCopyAccelerationStructureModeNV = extern enum(c_int) {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_BEGIN_RANGE_NV = 0,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_END_RANGE_NV = 1,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_RANGE_SIZE_NV = 2,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkCopyAccelerationStructureModeNV = enum_VkCopyAccelerationStructureModeNV;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = @enumToInt(enum_VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV);
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = @enumToInt(enum_VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV);
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = @enumToInt(enum_VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV);
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BEGIN_RANGE_NV = @enumToInt(enum_VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BEGIN_RANGE_NV);
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_END_RANGE_NV = @enumToInt(enum_VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_END_RANGE_NV);
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_RANGE_SIZE_NV = @enumToInt(enum_VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_RANGE_SIZE_NV);
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = @enumToInt(enum_VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV);
pub const enum_VkAccelerationStructureMemoryRequirementsTypeNV = extern enum(c_int) {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BEGIN_RANGE_NV = 0,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_END_RANGE_NV = 2,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_RANGE_SIZE_NV = 3,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkAccelerationStructureMemoryRequirementsTypeNV = enum_VkAccelerationStructureMemoryRequirementsTypeNV;
pub const VK_GEOMETRY_OPAQUE_BIT_NV = @enumToInt(enum_VkGeometryFlagBitsNV.VK_GEOMETRY_OPAQUE_BIT_NV);
pub const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = @enumToInt(enum_VkGeometryFlagBitsNV.VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV);
pub const VK_GEOMETRY_FLAG_BITS_MAX_ENUM_NV = @enumToInt(enum_VkGeometryFlagBitsNV.VK_GEOMETRY_FLAG_BITS_MAX_ENUM_NV);
pub const enum_VkGeometryFlagBitsNV = extern enum(c_int) {
    VK_GEOMETRY_OPAQUE_BIT_NV = 1,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2,
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkGeometryFlagBitsNV = enum_VkGeometryFlagBitsNV;
pub const VkGeometryFlagsNV = VkFlags;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = @enumToInt(enum_VkGeometryInstanceFlagBitsNV.VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV);
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = @enumToInt(enum_VkGeometryInstanceFlagBitsNV.VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV);
pub const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = @enumToInt(enum_VkGeometryInstanceFlagBitsNV.VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV);
pub const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = @enumToInt(enum_VkGeometryInstanceFlagBitsNV.VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV);
pub const VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_NV = @enumToInt(enum_VkGeometryInstanceFlagBitsNV.VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_NV);
pub const enum_VkGeometryInstanceFlagBitsNV = extern enum(c_int) {
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8,
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkGeometryInstanceFlagBitsNV = enum_VkGeometryInstanceFlagBitsNV;
pub const VkGeometryInstanceFlagsNV = VkFlags;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = @enumToInt(enum_VkBuildAccelerationStructureFlagBitsNV.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV);
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = @enumToInt(enum_VkBuildAccelerationStructureFlagBitsNV.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV);
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = @enumToInt(enum_VkBuildAccelerationStructureFlagBitsNV.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV);
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = @enumToInt(enum_VkBuildAccelerationStructureFlagBitsNV.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV);
pub const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = @enumToInt(enum_VkBuildAccelerationStructureFlagBitsNV.VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV);
pub const VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_NV = @enumToInt(enum_VkBuildAccelerationStructureFlagBitsNV.VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_NV);
pub const enum_VkBuildAccelerationStructureFlagBitsNV = extern enum(c_int) {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16,
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkBuildAccelerationStructureFlagBitsNV = enum_VkBuildAccelerationStructureFlagBitsNV;
pub const VkBuildAccelerationStructureFlagsNV = VkFlags;
pub const struct_VkRayTracingShaderGroupCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    type: VkRayTracingShaderGroupTypeNV,
    generalShader: u32,
    closestHitShader: u32,
    anyHitShader: u32,
    intersectionShader: u32,
};
pub const VkRayTracingShaderGroupCreateInfoNV = struct_VkRayTracingShaderGroupCreateInfoNV;
pub const struct_VkRayTracingPipelineCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: [*c]const VkPipelineShaderStageCreateInfo,
    groupCount: u32,
    pGroups: [*c]const VkRayTracingShaderGroupCreateInfoNV,
    maxRecursionDepth: u32,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
};
pub const VkRayTracingPipelineCreateInfoNV = struct_VkRayTracingPipelineCreateInfoNV;
pub const struct_VkGeometryTrianglesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    vertexData: VkBuffer,
    vertexOffset: VkDeviceSize,
    vertexCount: u32,
    vertexStride: VkDeviceSize,
    vertexFormat: VkFormat,
    indexData: VkBuffer,
    indexOffset: VkDeviceSize,
    indexCount: u32,
    indexType: VkIndexType,
    transformData: VkBuffer,
    transformOffset: VkDeviceSize,
};
pub const VkGeometryTrianglesNV = struct_VkGeometryTrianglesNV;
pub const struct_VkGeometryAABBNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    aabbData: VkBuffer,
    numAABBs: u32,
    stride: u32,
    offset: VkDeviceSize,
};
pub const VkGeometryAABBNV = struct_VkGeometryAABBNV;
pub const struct_VkGeometryDataNV = extern struct {
    triangles: VkGeometryTrianglesNV,
    aabbs: VkGeometryAABBNV,
};
pub const VkGeometryDataNV = struct_VkGeometryDataNV;
pub const struct_VkGeometryNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    geometryType: VkGeometryTypeNV,
    geometry: VkGeometryDataNV,
    flags: VkGeometryFlagsNV,
};
pub const VkGeometryNV = struct_VkGeometryNV;
pub const struct_VkAccelerationStructureInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    type: VkAccelerationStructureTypeNV,
    flags: VkBuildAccelerationStructureFlagsNV,
    instanceCount: u32,
    geometryCount: u32,
    pGeometries: [*c]const VkGeometryNV,
};
pub const VkAccelerationStructureInfoNV = struct_VkAccelerationStructureInfoNV;
pub const struct_VkAccelerationStructureCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    compactedSize: VkDeviceSize,
    info: VkAccelerationStructureInfoNV,
};
pub const VkAccelerationStructureCreateInfoNV = struct_VkAccelerationStructureCreateInfoNV;
pub const struct_VkBindAccelerationStructureMemoryInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    accelerationStructure: VkAccelerationStructureNV,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    deviceIndexCount: u32,
    pDeviceIndices: [*c]const u32,
};
pub const VkBindAccelerationStructureMemoryInfoNV = struct_VkBindAccelerationStructureMemoryInfoNV;
pub const struct_VkWriteDescriptorSetAccelerationStructureNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    accelerationStructureCount: u32,
    pAccelerationStructures: [*c]const VkAccelerationStructureNV,
};
pub const VkWriteDescriptorSetAccelerationStructureNV = struct_VkWriteDescriptorSetAccelerationStructureNV;
pub const struct_VkAccelerationStructureMemoryRequirementsInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    type: VkAccelerationStructureMemoryRequirementsTypeNV,
    accelerationStructure: VkAccelerationStructureNV,
};
pub const VkAccelerationStructureMemoryRequirementsInfoNV = struct_VkAccelerationStructureMemoryRequirementsInfoNV;
pub const struct_VkPhysicalDeviceRayTracingPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shaderGroupHandleSize: u32,
    maxRecursionDepth: u32,
    maxShaderGroupStride: u32,
    shaderGroupBaseAlignment: u32,
    maxGeometryCount: u64,
    maxInstanceCount: u64,
    maxTriangleCount: u64,
    maxDescriptorSetAccelerationStructures: u32,
};
pub const VkPhysicalDeviceRayTracingPropertiesNV = struct_VkPhysicalDeviceRayTracingPropertiesNV;
pub const PFN_vkCreateAccelerationStructureNV = ?fn (VkDevice, [*c]const VkAccelerationStructureCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkAccelerationStructureNV) callconv(.C) VkResult;
pub const PFN_vkDestroyAccelerationStructureNV = ?fn (VkDevice, VkAccelerationStructureNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureMemoryRequirementsNV = ?fn (VkDevice, [*c]const VkAccelerationStructureMemoryRequirementsInfoNV, [*c]VkMemoryRequirements2KHR) callconv(.C) void;
pub const PFN_vkBindAccelerationStructureMemoryNV = ?fn (VkDevice, u32, [*c]const VkBindAccelerationStructureMemoryInfoNV) callconv(.C) VkResult;
pub const PFN_vkCmdBuildAccelerationStructureNV = ?fn (VkCommandBuffer, [*c]const VkAccelerationStructureInfoNV, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyAccelerationStructureNV = ?fn (VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeNV) callconv(.C) void;
pub const PFN_vkCmdTraceRaysNV = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRayTracingPipelinesNV = ?fn (VkDevice, VkPipelineCache, u32, [*c]const VkRayTracingPipelineCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingShaderGroupHandlesNV = ?fn (VkDevice, VkPipeline, u32, u32, usize, ?*c_void) callconv(.C) VkResult;
pub const PFN_vkGetAccelerationStructureHandleNV = ?fn (VkDevice, VkAccelerationStructureNV, usize, ?*c_void) callconv(.C) VkResult;
pub const PFN_vkCmdWriteAccelerationStructuresPropertiesNV = ?fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureNV, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCompileDeferredNV = ?fn (VkDevice, VkPipeline, u32) callconv(.C) VkResult;
pub extern fn vkCreateAccelerationStructureNV(device: VkDevice, pCreateInfo: [*c]const VkAccelerationStructureCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pAccelerationStructure: [*c]VkAccelerationStructureNV) VkResult;
pub extern fn vkDestroyAccelerationStructureNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetAccelerationStructureMemoryRequirementsNV(device: VkDevice, pInfo: [*c]const VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: [*c]VkMemoryRequirements2KHR) void;
pub extern fn vkBindAccelerationStructureMemoryNV(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindAccelerationStructureMemoryInfoNV) VkResult;
pub extern fn vkCmdBuildAccelerationStructureNV(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, scratch: VkBuffer, scratchOffset: VkDeviceSize) void;
pub extern fn vkCmdCopyAccelerationStructureNV(commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, mode: VkCopyAccelerationStructureModeNV) void;
pub extern fn vkCmdTraceRaysNV(commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: u32, height: u32, depth: u32) void;
pub extern fn vkCreateRayTracingPipelinesNV(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkRayTracingPipelineCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkGetRayTracingShaderGroupHandlesNV(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*c_void) VkResult;
pub extern fn vkGetAccelerationStructureHandleNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, dataSize: usize, pData: ?*c_void) VkResult;
pub extern fn vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: [*c]const VkAccelerationStructureNV, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) void;
pub extern fn vkCompileDeferredNV(device: VkDevice, pipeline: VkPipeline, shader: u32) VkResult;
pub const struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    representativeFragmentTest: VkBool32,
};
pub const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
pub const struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    representativeFragmentTestEnable: VkBool32,
};
pub const VkPipelineRepresentativeFragmentTestStateCreateInfoNV = struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
pub const struct_VkPhysicalDeviceImageViewImageFormatInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    imageViewType: VkImageViewType,
};
pub const VkPhysicalDeviceImageViewImageFormatInfoEXT = struct_VkPhysicalDeviceImageViewImageFormatInfoEXT;
pub const struct_VkFilterCubicImageViewImageFormatPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    filterCubic: VkBool32,
    filterCubicMinmax: VkBool32,
};
pub const VkFilterCubicImageViewImageFormatPropertiesEXT = struct_VkFilterCubicImageViewImageFormatPropertiesEXT;
pub const VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = @enumToInt(enum_VkQueueGlobalPriorityEXT.VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT);
pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = @enumToInt(enum_VkQueueGlobalPriorityEXT.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT);
pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = @enumToInt(enum_VkQueueGlobalPriorityEXT.VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT);
pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = @enumToInt(enum_VkQueueGlobalPriorityEXT.VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT);
pub const VK_QUEUE_GLOBAL_PRIORITY_BEGIN_RANGE_EXT = @enumToInt(enum_VkQueueGlobalPriorityEXT.VK_QUEUE_GLOBAL_PRIORITY_BEGIN_RANGE_EXT);
pub const VK_QUEUE_GLOBAL_PRIORITY_END_RANGE_EXT = @enumToInt(enum_VkQueueGlobalPriorityEXT.VK_QUEUE_GLOBAL_PRIORITY_END_RANGE_EXT);
pub const VK_QUEUE_GLOBAL_PRIORITY_RANGE_SIZE_EXT = @enumToInt(enum_VkQueueGlobalPriorityEXT.VK_QUEUE_GLOBAL_PRIORITY_RANGE_SIZE_EXT);
pub const VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = @enumToInt(enum_VkQueueGlobalPriorityEXT.VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT);
pub const enum_VkQueueGlobalPriorityEXT = extern enum(c_int) {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
    VK_QUEUE_GLOBAL_PRIORITY_BEGIN_RANGE_EXT = 128,
    VK_QUEUE_GLOBAL_PRIORITY_END_RANGE_EXT = 1024,
    VK_QUEUE_GLOBAL_PRIORITY_RANGE_SIZE_EXT = 897,
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkQueueGlobalPriorityEXT = enum_VkQueueGlobalPriorityEXT;
pub const struct_VkDeviceQueueGlobalPriorityCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    globalPriority: VkQueueGlobalPriorityEXT,
};
pub const VkDeviceQueueGlobalPriorityCreateInfoEXT = struct_VkDeviceQueueGlobalPriorityCreateInfoEXT;
pub const struct_VkImportMemoryHostPointerInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    pHostPointer: ?*c_void,
};
pub const VkImportMemoryHostPointerInfoEXT = struct_VkImportMemoryHostPointerInfoEXT;
pub const struct_VkMemoryHostPointerPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    memoryTypeBits: u32,
};
pub const VkMemoryHostPointerPropertiesEXT = struct_VkMemoryHostPointerPropertiesEXT;
pub const struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    minImportedHostPointerAlignment: VkDeviceSize,
};
pub const VkPhysicalDeviceExternalMemoryHostPropertiesEXT = struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
pub const PFN_vkGetMemoryHostPointerPropertiesEXT = ?fn (VkDevice, VkExternalMemoryHandleTypeFlagBits, ?*const c_void, [*c]VkMemoryHostPointerPropertiesEXT) callconv(.C) VkResult;
pub extern fn vkGetMemoryHostPointerPropertiesEXT(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: ?*const c_void, pMemoryHostPointerProperties: [*c]VkMemoryHostPointerPropertiesEXT) VkResult;
pub const PFN_vkCmdWriteBufferMarkerAMD = ?fn (VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, u32) callconv(.C) void;
pub extern fn vkCmdWriteBufferMarkerAMD(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32) void;
pub const VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = @enumToInt(enum_VkPipelineCompilerControlFlagBitsAMD.VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD);
pub const enum_VkPipelineCompilerControlFlagBitsAMD = extern enum(c_int) {
    VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 2147483647,
    _,
};
pub const VkPipelineCompilerControlFlagBitsAMD = enum_VkPipelineCompilerControlFlagBitsAMD;
pub const VkPipelineCompilerControlFlagsAMD = VkFlags;
pub const struct_VkPipelineCompilerControlCreateInfoAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    compilerControlFlags: VkPipelineCompilerControlFlagsAMD,
};
pub const VkPipelineCompilerControlCreateInfoAMD = struct_VkPipelineCompilerControlCreateInfoAMD;
pub const VK_TIME_DOMAIN_DEVICE_EXT = @enumToInt(enum_VkTimeDomainEXT.VK_TIME_DOMAIN_DEVICE_EXT);
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = @enumToInt(enum_VkTimeDomainEXT.VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT);
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = @enumToInt(enum_VkTimeDomainEXT.VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT);
pub const VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = @enumToInt(enum_VkTimeDomainEXT.VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT);
pub const VK_TIME_DOMAIN_BEGIN_RANGE_EXT = @enumToInt(enum_VkTimeDomainEXT.VK_TIME_DOMAIN_BEGIN_RANGE_EXT);
pub const VK_TIME_DOMAIN_END_RANGE_EXT = @enumToInt(enum_VkTimeDomainEXT.VK_TIME_DOMAIN_END_RANGE_EXT);
pub const VK_TIME_DOMAIN_RANGE_SIZE_EXT = @enumToInt(enum_VkTimeDomainEXT.VK_TIME_DOMAIN_RANGE_SIZE_EXT);
pub const VK_TIME_DOMAIN_MAX_ENUM_EXT = @enumToInt(enum_VkTimeDomainEXT.VK_TIME_DOMAIN_MAX_ENUM_EXT);
pub const enum_VkTimeDomainEXT = extern enum(c_int) {
    VK_TIME_DOMAIN_DEVICE_EXT = 0,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
    VK_TIME_DOMAIN_BEGIN_RANGE_EXT = 0,
    VK_TIME_DOMAIN_END_RANGE_EXT = 3,
    VK_TIME_DOMAIN_RANGE_SIZE_EXT = 4,
    VK_TIME_DOMAIN_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkTimeDomainEXT = enum_VkTimeDomainEXT;
pub const struct_VkCalibratedTimestampInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    timeDomain: VkTimeDomainEXT,
};
pub const VkCalibratedTimestampInfoEXT = struct_VkCalibratedTimestampInfoEXT;
pub const PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = ?fn (VkPhysicalDevice, [*c]u32, [*c]VkTimeDomainEXT) callconv(.C) VkResult;
pub const PFN_vkGetCalibratedTimestampsEXT = ?fn (VkDevice, u32, [*c]const VkCalibratedTimestampInfoEXT, [*c]u64, [*c]u64) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice: VkPhysicalDevice, pTimeDomainCount: [*c]u32, pTimeDomains: [*c]VkTimeDomainEXT) VkResult;
pub extern fn vkGetCalibratedTimestampsEXT(device: VkDevice, timestampCount: u32, pTimestampInfos: [*c]const VkCalibratedTimestampInfoEXT, pTimestamps: [*c]u64, pMaxDeviation: [*c]u64) VkResult;
pub const struct_VkPhysicalDeviceShaderCorePropertiesAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shaderEngineCount: u32,
    shaderArraysPerEngineCount: u32,
    computeUnitsPerShaderArray: u32,
    simdPerComputeUnit: u32,
    wavefrontsPerSimd: u32,
    wavefrontSize: u32,
    sgprsPerSimd: u32,
    minSgprAllocation: u32,
    maxSgprAllocation: u32,
    sgprAllocationGranularity: u32,
    vgprsPerSimd: u32,
    minVgprAllocation: u32,
    maxVgprAllocation: u32,
    vgprAllocationGranularity: u32,
};
pub const VkPhysicalDeviceShaderCorePropertiesAMD = struct_VkPhysicalDeviceShaderCorePropertiesAMD;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = @enumToInt(enum_VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD);
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = @enumToInt(enum_VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD);
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = @enumToInt(enum_VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD);
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_BEGIN_RANGE_AMD = @enumToInt(enum_VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_BEGIN_RANGE_AMD);
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_END_RANGE_AMD = @enumToInt(enum_VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_END_RANGE_AMD);
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_RANGE_SIZE_AMD = @enumToInt(enum_VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_RANGE_SIZE_AMD);
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = @enumToInt(enum_VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD);
pub const enum_VkMemoryOverallocationBehaviorAMD = extern enum(c_int) {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_BEGIN_RANGE_AMD = 0,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_END_RANGE_AMD = 2,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_RANGE_SIZE_AMD = 3,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 2147483647,
    _,
};
pub const VkMemoryOverallocationBehaviorAMD = enum_VkMemoryOverallocationBehaviorAMD;
pub const struct_VkDeviceMemoryOverallocationCreateInfoAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD,
};
pub const VkDeviceMemoryOverallocationCreateInfoAMD = struct_VkDeviceMemoryOverallocationCreateInfoAMD;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    maxVertexAttribDivisor: u32,
};
pub const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
pub const struct_VkVertexInputBindingDivisorDescriptionEXT = extern struct {
    binding: u32,
    divisor: u32,
};
pub const VkVertexInputBindingDivisorDescriptionEXT = struct_VkVertexInputBindingDivisorDescriptionEXT;
pub const struct_VkPipelineVertexInputDivisorStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    vertexBindingDivisorCount: u32,
    pVertexBindingDivisors: [*c]const VkVertexInputBindingDivisorDescriptionEXT,
};
pub const VkPipelineVertexInputDivisorStateCreateInfoEXT = struct_VkPipelineVertexInputDivisorStateCreateInfoEXT;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    vertexAttributeInstanceRateDivisor: VkBool32,
    vertexAttributeInstanceRateZeroDivisor: VkBool32,
};
pub const VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;
pub const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = @enumToInt(enum_VkPipelineCreationFeedbackFlagBitsEXT.VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT);
pub const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = @enumToInt(enum_VkPipelineCreationFeedbackFlagBitsEXT.VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT);
pub const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = @enumToInt(enum_VkPipelineCreationFeedbackFlagBitsEXT.VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT);
pub const VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT = @enumToInt(enum_VkPipelineCreationFeedbackFlagBitsEXT.VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT);
pub const enum_VkPipelineCreationFeedbackFlagBitsEXT = extern enum(c_int) {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1,
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2,
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4,
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkPipelineCreationFeedbackFlagBitsEXT = enum_VkPipelineCreationFeedbackFlagBitsEXT;
pub const VkPipelineCreationFeedbackFlagsEXT = VkFlags;
pub const struct_VkPipelineCreationFeedbackEXT = extern struct {
    flags: VkPipelineCreationFeedbackFlagsEXT,
    duration: u64,
};
pub const VkPipelineCreationFeedbackEXT = struct_VkPipelineCreationFeedbackEXT;
pub const struct_VkPipelineCreationFeedbackCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    pPipelineCreationFeedback: [*c]VkPipelineCreationFeedbackEXT,
    pipelineStageCreationFeedbackCount: u32,
    pPipelineStageCreationFeedbacks: [*c]VkPipelineCreationFeedbackEXT,
};
pub const VkPipelineCreationFeedbackCreateInfoEXT = struct_VkPipelineCreationFeedbackCreateInfoEXT;
pub const struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    computeDerivativeGroupQuads: VkBool32,
    computeDerivativeGroupLinear: VkBool32,
};
pub const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
pub const struct_VkPhysicalDeviceMeshShaderFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    taskShader: VkBool32,
    meshShader: VkBool32,
};
pub const VkPhysicalDeviceMeshShaderFeaturesNV = struct_VkPhysicalDeviceMeshShaderFeaturesNV;
pub const struct_VkPhysicalDeviceMeshShaderPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    maxDrawMeshTasksCount: u32,
    maxTaskWorkGroupInvocations: u32,
    maxTaskWorkGroupSize: [3]u32,
    maxTaskTotalMemorySize: u32,
    maxTaskOutputCount: u32,
    maxMeshWorkGroupInvocations: u32,
    maxMeshWorkGroupSize: [3]u32,
    maxMeshTotalMemorySize: u32,
    maxMeshOutputVertices: u32,
    maxMeshOutputPrimitives: u32,
    maxMeshMultiviewViewCount: u32,
    meshOutputPerVertexGranularity: u32,
    meshOutputPerPrimitiveGranularity: u32,
};
pub const VkPhysicalDeviceMeshShaderPropertiesNV = struct_VkPhysicalDeviceMeshShaderPropertiesNV;
pub const struct_VkDrawMeshTasksIndirectCommandNV = extern struct {
    taskCount: u32,
    firstTask: u32,
};
pub const VkDrawMeshTasksIndirectCommandNV = struct_VkDrawMeshTasksIndirectCommandNV;
pub const PFN_vkCmdDrawMeshTasksNV = ?fn (VkCommandBuffer, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectNV = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectCountNV = ?fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectCountNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    fragmentShaderBarycentric: VkBool32,
};
pub const VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;
pub const struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    imageFootprint: VkBool32,
};
pub const VkPhysicalDeviceShaderImageFootprintFeaturesNV = struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV;
pub const struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    exclusiveScissorCount: u32,
    pExclusiveScissors: [*c]const VkRect2D,
};
pub const VkPipelineViewportExclusiveScissorStateCreateInfoNV = struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV;
pub const struct_VkPhysicalDeviceExclusiveScissorFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    exclusiveScissor: VkBool32,
};
pub const VkPhysicalDeviceExclusiveScissorFeaturesNV = struct_VkPhysicalDeviceExclusiveScissorFeaturesNV;
pub const PFN_vkCmdSetExclusiveScissorNV = ?fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub extern fn vkCmdSetExclusiveScissorNV(commandBuffer: VkCommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: [*c]const VkRect2D) void;
pub const struct_VkQueueFamilyCheckpointPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    checkpointExecutionStageMask: VkPipelineStageFlags,
};
pub const VkQueueFamilyCheckpointPropertiesNV = struct_VkQueueFamilyCheckpointPropertiesNV;
pub const struct_VkCheckpointDataNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    stage: VkPipelineStageFlagBits,
    pCheckpointMarker: ?*c_void,
};
pub const VkCheckpointDataNV = struct_VkCheckpointDataNV;
pub const PFN_vkCmdSetCheckpointNV = ?fn (VkCommandBuffer, ?*const c_void) callconv(.C) void;
pub const PFN_vkGetQueueCheckpointDataNV = ?fn (VkQueue, [*c]u32, [*c]VkCheckpointDataNV) callconv(.C) void;
pub extern fn vkCmdSetCheckpointNV(commandBuffer: VkCommandBuffer, pCheckpointMarker: ?*const c_void) void;
pub extern fn vkGetQueueCheckpointDataNV(queue: VkQueue, pCheckpointDataCount: [*c]u32, pCheckpointData: [*c]VkCheckpointDataNV) void;
pub const struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shaderIntegerFunctions2: VkBool32,
};
pub const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
pub const struct_VkPerformanceConfigurationINTEL_T = @OpaqueType();
pub const VkPerformanceConfigurationINTEL = ?*struct_VkPerformanceConfigurationINTEL_T;
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = @enumToInt(enum_VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL);
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_BEGIN_RANGE_INTEL = @enumToInt(enum_VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_BEGIN_RANGE_INTEL);
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_END_RANGE_INTEL = @enumToInt(enum_VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_END_RANGE_INTEL);
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_RANGE_SIZE_INTEL = @enumToInt(enum_VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_RANGE_SIZE_INTEL);
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = @enumToInt(enum_VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL);
pub const enum_VkPerformanceConfigurationTypeINTEL = extern enum(c_int) {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
    VK_PERFORMANCE_CONFIGURATION_TYPE_BEGIN_RANGE_INTEL = 0,
    VK_PERFORMANCE_CONFIGURATION_TYPE_END_RANGE_INTEL = 0,
    VK_PERFORMANCE_CONFIGURATION_TYPE_RANGE_SIZE_INTEL = 1,
    VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 2147483647,
    _,
};
pub const VkPerformanceConfigurationTypeINTEL = enum_VkPerformanceConfigurationTypeINTEL;
pub const VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = @enumToInt(enum_VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL);
pub const VK_QUERY_POOL_SAMPLING_MODE_BEGIN_RANGE_INTEL = @enumToInt(enum_VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_BEGIN_RANGE_INTEL);
pub const VK_QUERY_POOL_SAMPLING_MODE_END_RANGE_INTEL = @enumToInt(enum_VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_END_RANGE_INTEL);
pub const VK_QUERY_POOL_SAMPLING_MODE_RANGE_SIZE_INTEL = @enumToInt(enum_VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_RANGE_SIZE_INTEL);
pub const VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = @enumToInt(enum_VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL);
pub const enum_VkQueryPoolSamplingModeINTEL = extern enum(c_int) {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
    VK_QUERY_POOL_SAMPLING_MODE_BEGIN_RANGE_INTEL = 0,
    VK_QUERY_POOL_SAMPLING_MODE_END_RANGE_INTEL = 0,
    VK_QUERY_POOL_SAMPLING_MODE_RANGE_SIZE_INTEL = 1,
    VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 2147483647,
    _,
};
pub const VkQueryPoolSamplingModeINTEL = enum_VkQueryPoolSamplingModeINTEL;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = @enumToInt(enum_VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL);
pub const VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = @enumToInt(enum_VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL);
pub const VK_PERFORMANCE_OVERRIDE_TYPE_BEGIN_RANGE_INTEL = @enumToInt(enum_VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_BEGIN_RANGE_INTEL);
pub const VK_PERFORMANCE_OVERRIDE_TYPE_END_RANGE_INTEL = @enumToInt(enum_VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_END_RANGE_INTEL);
pub const VK_PERFORMANCE_OVERRIDE_TYPE_RANGE_SIZE_INTEL = @enumToInt(enum_VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_RANGE_SIZE_INTEL);
pub const VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = @enumToInt(enum_VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL);
pub const enum_VkPerformanceOverrideTypeINTEL = extern enum(c_int) {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
    VK_PERFORMANCE_OVERRIDE_TYPE_BEGIN_RANGE_INTEL = 0,
    VK_PERFORMANCE_OVERRIDE_TYPE_END_RANGE_INTEL = 1,
    VK_PERFORMANCE_OVERRIDE_TYPE_RANGE_SIZE_INTEL = 2,
    VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 2147483647,
    _,
};
pub const VkPerformanceOverrideTypeINTEL = enum_VkPerformanceOverrideTypeINTEL;
pub const VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = @enumToInt(enum_VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL);
pub const VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = @enumToInt(enum_VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL);
pub const VK_PERFORMANCE_PARAMETER_TYPE_BEGIN_RANGE_INTEL = @enumToInt(enum_VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_BEGIN_RANGE_INTEL);
pub const VK_PERFORMANCE_PARAMETER_TYPE_END_RANGE_INTEL = @enumToInt(enum_VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_END_RANGE_INTEL);
pub const VK_PERFORMANCE_PARAMETER_TYPE_RANGE_SIZE_INTEL = @enumToInt(enum_VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_RANGE_SIZE_INTEL);
pub const VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = @enumToInt(enum_VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL);
pub const enum_VkPerformanceParameterTypeINTEL = extern enum(c_int) {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
    VK_PERFORMANCE_PARAMETER_TYPE_BEGIN_RANGE_INTEL = 0,
    VK_PERFORMANCE_PARAMETER_TYPE_END_RANGE_INTEL = 1,
    VK_PERFORMANCE_PARAMETER_TYPE_RANGE_SIZE_INTEL = 2,
    VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 2147483647,
    _,
};
pub const VkPerformanceParameterTypeINTEL = enum_VkPerformanceParameterTypeINTEL;
pub const VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = @enumToInt(enum_VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL);
pub const VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = @enumToInt(enum_VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL);
pub const VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = @enumToInt(enum_VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL);
pub const VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = @enumToInt(enum_VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL);
pub const VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = @enumToInt(enum_VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL);
pub const VK_PERFORMANCE_VALUE_TYPE_BEGIN_RANGE_INTEL = @enumToInt(enum_VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_BEGIN_RANGE_INTEL);
pub const VK_PERFORMANCE_VALUE_TYPE_END_RANGE_INTEL = @enumToInt(enum_VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_END_RANGE_INTEL);
pub const VK_PERFORMANCE_VALUE_TYPE_RANGE_SIZE_INTEL = @enumToInt(enum_VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_RANGE_SIZE_INTEL);
pub const VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = @enumToInt(enum_VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL);
pub const enum_VkPerformanceValueTypeINTEL = extern enum(c_int) {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
    VK_PERFORMANCE_VALUE_TYPE_BEGIN_RANGE_INTEL = 0,
    VK_PERFORMANCE_VALUE_TYPE_END_RANGE_INTEL = 4,
    VK_PERFORMANCE_VALUE_TYPE_RANGE_SIZE_INTEL = 5,
    VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 2147483647,
    _,
};
pub const VkPerformanceValueTypeINTEL = enum_VkPerformanceValueTypeINTEL;
pub const union_VkPerformanceValueDataINTEL = extern union {
    value32: u32,
    value64: u64,
    valueFloat: f32,
    valueBool: VkBool32,
    valueString: [*c]const u8,
};
pub const VkPerformanceValueDataINTEL = union_VkPerformanceValueDataINTEL;
pub const struct_VkPerformanceValueINTEL = extern struct {
    type: VkPerformanceValueTypeINTEL,
    data: VkPerformanceValueDataINTEL,
};
pub const VkPerformanceValueINTEL = struct_VkPerformanceValueINTEL;
pub const struct_VkInitializePerformanceApiInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    pUserData: ?*c_void,
};
pub const VkInitializePerformanceApiInfoINTEL = struct_VkInitializePerformanceApiInfoINTEL;
pub const struct_VkQueryPoolCreateInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL,
};
pub const VkQueryPoolCreateInfoINTEL = struct_VkQueryPoolCreateInfoINTEL;
pub const struct_VkPerformanceMarkerInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    marker: u64,
};
pub const VkPerformanceMarkerInfoINTEL = struct_VkPerformanceMarkerInfoINTEL;
pub const struct_VkPerformanceStreamMarkerInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    marker: u32,
};
pub const VkPerformanceStreamMarkerInfoINTEL = struct_VkPerformanceStreamMarkerInfoINTEL;
pub const struct_VkPerformanceOverrideInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    type: VkPerformanceOverrideTypeINTEL,
    enable: VkBool32,
    parameter: u64,
};
pub const VkPerformanceOverrideInfoINTEL = struct_VkPerformanceOverrideInfoINTEL;
pub const struct_VkPerformanceConfigurationAcquireInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    type: VkPerformanceConfigurationTypeINTEL,
};
pub const VkPerformanceConfigurationAcquireInfoINTEL = struct_VkPerformanceConfigurationAcquireInfoINTEL;
pub const PFN_vkInitializePerformanceApiINTEL = ?fn (VkDevice, [*c]const VkInitializePerformanceApiInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkUninitializePerformanceApiINTEL = ?fn (VkDevice) callconv(.C) void;
pub const PFN_vkCmdSetPerformanceMarkerINTEL = ?fn (VkCommandBuffer, [*c]const VkPerformanceMarkerInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkCmdSetPerformanceStreamMarkerINTEL = ?fn (VkCommandBuffer, [*c]const VkPerformanceStreamMarkerInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkCmdSetPerformanceOverrideINTEL = ?fn (VkCommandBuffer, [*c]const VkPerformanceOverrideInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkAcquirePerformanceConfigurationINTEL = ?fn (VkDevice, [*c]const VkPerformanceConfigurationAcquireInfoINTEL, [*c]VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkReleasePerformanceConfigurationINTEL = ?fn (VkDevice, VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkQueueSetPerformanceConfigurationINTEL = ?fn (VkQueue, VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkGetPerformanceParameterINTEL = ?fn (VkDevice, VkPerformanceParameterTypeINTEL, [*c]VkPerformanceValueINTEL) callconv(.C) VkResult;
pub extern fn vkInitializePerformanceApiINTEL(device: VkDevice, pInitializeInfo: [*c]const VkInitializePerformanceApiInfoINTEL) VkResult;
pub extern fn vkUninitializePerformanceApiINTEL(device: VkDevice) void;
pub extern fn vkCmdSetPerformanceMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkPerformanceMarkerInfoINTEL) VkResult;
pub extern fn vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkPerformanceStreamMarkerInfoINTEL) VkResult;
pub extern fn vkCmdSetPerformanceOverrideINTEL(commandBuffer: VkCommandBuffer, pOverrideInfo: [*c]const VkPerformanceOverrideInfoINTEL) VkResult;
pub extern fn vkAcquirePerformanceConfigurationINTEL(device: VkDevice, pAcquireInfo: [*c]const VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: [*c]VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkReleasePerformanceConfigurationINTEL(device: VkDevice, configuration: VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkQueueSetPerformanceConfigurationINTEL(queue: VkQueue, configuration: VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkGetPerformanceParameterINTEL(device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: [*c]VkPerformanceValueINTEL) VkResult;
pub const struct_VkPhysicalDevicePCIBusInfoPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    pciDomain: u32,
    pciBus: u32,
    pciDevice: u32,
    pciFunction: u32,
};
pub const VkPhysicalDevicePCIBusInfoPropertiesEXT = struct_VkPhysicalDevicePCIBusInfoPropertiesEXT;
pub const struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    localDimmingSupport: VkBool32,
};
pub const VkDisplayNativeHdrSurfaceCapabilitiesAMD = struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD;
pub const struct_VkSwapchainDisplayNativeHdrCreateInfoAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    localDimmingEnable: VkBool32,
};
pub const VkSwapchainDisplayNativeHdrCreateInfoAMD = struct_VkSwapchainDisplayNativeHdrCreateInfoAMD;
pub const PFN_vkSetLocalDimmingAMD = ?fn (VkDevice, VkSwapchainKHR, VkBool32) callconv(.C) void;
pub extern fn vkSetLocalDimmingAMD(device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32) void;
pub const struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    fragmentDensityMap: VkBool32,
    fragmentDensityMapDynamic: VkBool32,
    fragmentDensityMapNonSubsampledImages: VkBool32,
};
pub const VkPhysicalDeviceFragmentDensityMapFeaturesEXT = struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    minFragmentDensityTexelSize: VkExtent2D,
    maxFragmentDensityTexelSize: VkExtent2D,
    fragmentDensityInvocations: VkBool32,
};
pub const VkPhysicalDeviceFragmentDensityMapPropertiesEXT = struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
pub const struct_VkRenderPassFragmentDensityMapCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    fragmentDensityMapAttachment: VkAttachmentReference,
};
pub const VkRenderPassFragmentDensityMapCreateInfoEXT = struct_VkRenderPassFragmentDensityMapCreateInfoEXT;
pub const struct_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    scalarBlockLayout: VkBool32,
};
pub const VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = struct_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;
pub const struct_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    subgroupSizeControl: VkBool32,
    computeFullSubgroups: VkBool32,
};
pub const VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = struct_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT;
pub const struct_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    minSubgroupSize: u32,
    maxSubgroupSize: u32,
    maxComputeWorkgroupSubgroups: u32,
    requiredSubgroupSizeStages: VkShaderStageFlags,
};
pub const VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = struct_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT;
pub const struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    requiredSubgroupSize: u32,
};
pub const VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;
pub const VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = @enumToInt(enum_VkShaderCorePropertiesFlagBitsAMD.VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD);
pub const enum_VkShaderCorePropertiesFlagBitsAMD = extern enum(c_int) {
    VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 2147483647,
    _,
};
pub const VkShaderCorePropertiesFlagBitsAMD = enum_VkShaderCorePropertiesFlagBitsAMD;
pub const VkShaderCorePropertiesFlagsAMD = VkFlags;
pub const struct_VkPhysicalDeviceShaderCoreProperties2AMD = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD,
    activeComputeUnitCount: u32,
};
pub const VkPhysicalDeviceShaderCoreProperties2AMD = struct_VkPhysicalDeviceShaderCoreProperties2AMD;
pub const struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    deviceCoherentMemory: VkBool32,
};
pub const VkPhysicalDeviceCoherentMemoryFeaturesAMD = struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD;
pub const struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    heapBudget: [16]VkDeviceSize,
    heapUsage: [16]VkDeviceSize,
};
pub const VkPhysicalDeviceMemoryBudgetPropertiesEXT = struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT;
pub const struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    memoryPriority: VkBool32,
};
pub const VkPhysicalDeviceMemoryPriorityFeaturesEXT = struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT;
pub const struct_VkMemoryPriorityAllocateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    priority: f32,
};
pub const VkMemoryPriorityAllocateInfoEXT = struct_VkMemoryPriorityAllocateInfoEXT;
pub const struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    dedicatedAllocationImageAliasing: VkBool32,
};
pub const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
pub const VkDeviceAddress = u64;
pub const struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
};
pub const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const struct_VkBufferDeviceAddressInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    buffer: VkBuffer,
};
pub const VkBufferDeviceAddressInfoEXT = struct_VkBufferDeviceAddressInfoEXT;
pub const struct_VkBufferDeviceAddressCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    deviceAddress: VkDeviceAddress,
};
pub const VkBufferDeviceAddressCreateInfoEXT = struct_VkBufferDeviceAddressCreateInfoEXT;
pub const PFN_vkGetBufferDeviceAddressEXT = ?fn (VkDevice, [*c]const VkBufferDeviceAddressInfoEXT) callconv(.C) VkDeviceAddress;
pub extern fn vkGetBufferDeviceAddressEXT(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfoEXT) VkDeviceAddress;
pub const struct_VkImageStencilUsageCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    stencilUsage: VkImageUsageFlags,
};
pub const VkImageStencilUsageCreateInfoEXT = struct_VkImageStencilUsageCreateInfoEXT;
pub const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = @enumToInt(enum_VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT);
pub const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = @enumToInt(enum_VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT);
pub const VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = @enumToInt(enum_VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT);
pub const VK_VALIDATION_FEATURE_ENABLE_BEGIN_RANGE_EXT = @enumToInt(enum_VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_BEGIN_RANGE_EXT);
pub const VK_VALIDATION_FEATURE_ENABLE_END_RANGE_EXT = @enumToInt(enum_VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_END_RANGE_EXT);
pub const VK_VALIDATION_FEATURE_ENABLE_RANGE_SIZE_EXT = @enumToInt(enum_VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_RANGE_SIZE_EXT);
pub const VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = @enumToInt(enum_VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT);
pub const enum_VkValidationFeatureEnableEXT = extern enum(c_int) {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
    VK_VALIDATION_FEATURE_ENABLE_BEGIN_RANGE_EXT = 0,
    VK_VALIDATION_FEATURE_ENABLE_END_RANGE_EXT = 2,
    VK_VALIDATION_FEATURE_ENABLE_RANGE_SIZE_EXT = 3,
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkValidationFeatureEnableEXT = enum_VkValidationFeatureEnableEXT;
pub const VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = @enumToInt(enum_VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_ALL_EXT);
pub const VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = @enumToInt(enum_VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT);
pub const VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = @enumToInt(enum_VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT);
pub const VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = @enumToInt(enum_VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT);
pub const VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = @enumToInt(enum_VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT);
pub const VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = @enumToInt(enum_VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT);
pub const VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = @enumToInt(enum_VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT);
pub const VK_VALIDATION_FEATURE_DISABLE_BEGIN_RANGE_EXT = @enumToInt(enum_VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_BEGIN_RANGE_EXT);
pub const VK_VALIDATION_FEATURE_DISABLE_END_RANGE_EXT = @enumToInt(enum_VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_END_RANGE_EXT);
pub const VK_VALIDATION_FEATURE_DISABLE_RANGE_SIZE_EXT = @enumToInt(enum_VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_RANGE_SIZE_EXT);
pub const VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = @enumToInt(enum_VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT);
pub const enum_VkValidationFeatureDisableEXT = extern enum(c_int) {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
    VK_VALIDATION_FEATURE_DISABLE_BEGIN_RANGE_EXT = 0,
    VK_VALIDATION_FEATURE_DISABLE_END_RANGE_EXT = 6,
    VK_VALIDATION_FEATURE_DISABLE_RANGE_SIZE_EXT = 7,
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkValidationFeatureDisableEXT = enum_VkValidationFeatureDisableEXT;
pub const struct_VkValidationFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    enabledValidationFeatureCount: u32,
    pEnabledValidationFeatures: [*c]const VkValidationFeatureEnableEXT,
    disabledValidationFeatureCount: u32,
    pDisabledValidationFeatures: [*c]const VkValidationFeatureDisableEXT,
};
pub const VkValidationFeaturesEXT = struct_VkValidationFeaturesEXT;
pub const VK_COMPONENT_TYPE_FLOAT16_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_FLOAT16_NV);
pub const VK_COMPONENT_TYPE_FLOAT32_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_FLOAT32_NV);
pub const VK_COMPONENT_TYPE_FLOAT64_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_FLOAT64_NV);
pub const VK_COMPONENT_TYPE_SINT8_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_SINT8_NV);
pub const VK_COMPONENT_TYPE_SINT16_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_SINT16_NV);
pub const VK_COMPONENT_TYPE_SINT32_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_SINT32_NV);
pub const VK_COMPONENT_TYPE_SINT64_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_SINT64_NV);
pub const VK_COMPONENT_TYPE_UINT8_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_UINT8_NV);
pub const VK_COMPONENT_TYPE_UINT16_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_UINT16_NV);
pub const VK_COMPONENT_TYPE_UINT32_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_UINT32_NV);
pub const VK_COMPONENT_TYPE_UINT64_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_UINT64_NV);
pub const VK_COMPONENT_TYPE_BEGIN_RANGE_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_BEGIN_RANGE_NV);
pub const VK_COMPONENT_TYPE_END_RANGE_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_END_RANGE_NV);
pub const VK_COMPONENT_TYPE_RANGE_SIZE_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_RANGE_SIZE_NV);
pub const VK_COMPONENT_TYPE_MAX_ENUM_NV = @enumToInt(enum_VkComponentTypeNV.VK_COMPONENT_TYPE_MAX_ENUM_NV);
pub const enum_VkComponentTypeNV = extern enum(c_int) {
    VK_COMPONENT_TYPE_FLOAT16_NV = 0,
    VK_COMPONENT_TYPE_FLOAT32_NV = 1,
    VK_COMPONENT_TYPE_FLOAT64_NV = 2,
    VK_COMPONENT_TYPE_SINT8_NV = 3,
    VK_COMPONENT_TYPE_SINT16_NV = 4,
    VK_COMPONENT_TYPE_SINT32_NV = 5,
    VK_COMPONENT_TYPE_SINT64_NV = 6,
    VK_COMPONENT_TYPE_UINT8_NV = 7,
    VK_COMPONENT_TYPE_UINT16_NV = 8,
    VK_COMPONENT_TYPE_UINT32_NV = 9,
    VK_COMPONENT_TYPE_UINT64_NV = 10,
    VK_COMPONENT_TYPE_BEGIN_RANGE_NV = 0,
    VK_COMPONENT_TYPE_END_RANGE_NV = 10,
    VK_COMPONENT_TYPE_RANGE_SIZE_NV = 11,
    VK_COMPONENT_TYPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkComponentTypeNV = enum_VkComponentTypeNV;
pub const VK_SCOPE_DEVICE_NV = @enumToInt(enum_VkScopeNV.VK_SCOPE_DEVICE_NV);
pub const VK_SCOPE_WORKGROUP_NV = @enumToInt(enum_VkScopeNV.VK_SCOPE_WORKGROUP_NV);
pub const VK_SCOPE_SUBGROUP_NV = @enumToInt(enum_VkScopeNV.VK_SCOPE_SUBGROUP_NV);
pub const VK_SCOPE_QUEUE_FAMILY_NV = @enumToInt(enum_VkScopeNV.VK_SCOPE_QUEUE_FAMILY_NV);
pub const VK_SCOPE_BEGIN_RANGE_NV = @enumToInt(enum_VkScopeNV.VK_SCOPE_BEGIN_RANGE_NV);
pub const VK_SCOPE_END_RANGE_NV = @enumToInt(enum_VkScopeNV.VK_SCOPE_END_RANGE_NV);
pub const VK_SCOPE_RANGE_SIZE_NV = @enumToInt(enum_VkScopeNV.VK_SCOPE_RANGE_SIZE_NV);
pub const VK_SCOPE_MAX_ENUM_NV = @enumToInt(enum_VkScopeNV.VK_SCOPE_MAX_ENUM_NV);
pub const enum_VkScopeNV = extern enum(c_int) {
    VK_SCOPE_DEVICE_NV = 1,
    VK_SCOPE_WORKGROUP_NV = 2,
    VK_SCOPE_SUBGROUP_NV = 3,
    VK_SCOPE_QUEUE_FAMILY_NV = 5,
    VK_SCOPE_BEGIN_RANGE_NV = 1,
    VK_SCOPE_END_RANGE_NV = 5,
    VK_SCOPE_RANGE_SIZE_NV = 5,
    VK_SCOPE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkScopeNV = enum_VkScopeNV;
pub const struct_VkCooperativeMatrixPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    MSize: u32,
    NSize: u32,
    KSize: u32,
    AType: VkComponentTypeNV,
    BType: VkComponentTypeNV,
    CType: VkComponentTypeNV,
    DType: VkComponentTypeNV,
    scope: VkScopeNV,
};
pub const VkCooperativeMatrixPropertiesNV = struct_VkCooperativeMatrixPropertiesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    cooperativeMatrix: VkBool32,
    cooperativeMatrixRobustBufferAccess: VkBool32,
};
pub const VkPhysicalDeviceCooperativeMatrixFeaturesNV = struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    cooperativeMatrixSupportedStages: VkShaderStageFlags,
};
pub const VkPhysicalDeviceCooperativeMatrixPropertiesNV = struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV;
pub const PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = ?fn (VkPhysicalDevice, [*c]u32, [*c]VkCooperativeMatrixPropertiesNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkCooperativeMatrixPropertiesNV) VkResult;
pub const VK_COVERAGE_REDUCTION_MODE_MERGE_NV = @enumToInt(enum_VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_MERGE_NV);
pub const VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = @enumToInt(enum_VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV);
pub const VK_COVERAGE_REDUCTION_MODE_BEGIN_RANGE_NV = @enumToInt(enum_VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_BEGIN_RANGE_NV);
pub const VK_COVERAGE_REDUCTION_MODE_END_RANGE_NV = @enumToInt(enum_VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_END_RANGE_NV);
pub const VK_COVERAGE_REDUCTION_MODE_RANGE_SIZE_NV = @enumToInt(enum_VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_RANGE_SIZE_NV);
pub const VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = @enumToInt(enum_VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV);
pub const enum_VkCoverageReductionModeNV = extern enum(c_int) {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
    VK_COVERAGE_REDUCTION_MODE_BEGIN_RANGE_NV = 0,
    VK_COVERAGE_REDUCTION_MODE_END_RANGE_NV = 1,
    VK_COVERAGE_REDUCTION_MODE_RANGE_SIZE_NV = 2,
    VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 2147483647,
    _,
};
pub const VkCoverageReductionModeNV = enum_VkCoverageReductionModeNV;
pub const VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    coverageReductionMode: VkBool32,
};
pub const VkPhysicalDeviceCoverageReductionModeFeaturesNV = struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV;
pub const struct_VkPipelineCoverageReductionStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkPipelineCoverageReductionStateCreateFlagsNV,
    coverageReductionMode: VkCoverageReductionModeNV,
};
pub const VkPipelineCoverageReductionStateCreateInfoNV = struct_VkPipelineCoverageReductionStateCreateInfoNV;
pub const struct_VkFramebufferMixedSamplesCombinationNV = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    coverageReductionMode: VkCoverageReductionModeNV,
    rasterizationSamples: VkSampleCountFlagBits,
    depthStencilSamples: VkSampleCountFlags,
    colorSamples: VkSampleCountFlags,
};
pub const VkFramebufferMixedSamplesCombinationNV = struct_VkFramebufferMixedSamplesCombinationNV;
pub const PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = ?fn (VkPhysicalDevice, [*c]u32, [*c]VkFramebufferMixedSamplesCombinationNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice: VkPhysicalDevice, pCombinationCount: [*c]u32, pCombinations: [*c]VkFramebufferMixedSamplesCombinationNV) VkResult;
pub const struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    fragmentShaderSampleInterlock: VkBool32,
    fragmentShaderPixelInterlock: VkBool32,
    fragmentShaderShadingRateInterlock: VkBool32,
};
pub const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;
pub const struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    ycbcrImageArrays: VkBool32,
};
pub const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;
pub const VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
pub const struct_VkHeadlessSurfaceCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    flags: VkHeadlessSurfaceCreateFlagsEXT,
};
pub const VkHeadlessSurfaceCreateInfoEXT = struct_VkHeadlessSurfaceCreateInfoEXT;
pub const PFN_vkCreateHeadlessSurfaceEXT = ?fn (VkInstance, [*c]const VkHeadlessSurfaceCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkSurfaceKHR) callconv(.C) VkResult;
pub extern fn vkCreateHeadlessSurfaceEXT(instance: VkInstance, pCreateInfo: [*c]const VkHeadlessSurfaceCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pSurface: [*c]VkSurfaceKHR) VkResult;
pub const VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = @enumToInt(enum_VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT);
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = @enumToInt(enum_VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT);
pub const VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = @enumToInt(enum_VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT);
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = @enumToInt(enum_VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT);
pub const VK_LINE_RASTERIZATION_MODE_BEGIN_RANGE_EXT = @enumToInt(enum_VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_BEGIN_RANGE_EXT);
pub const VK_LINE_RASTERIZATION_MODE_END_RANGE_EXT = @enumToInt(enum_VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_END_RANGE_EXT);
pub const VK_LINE_RASTERIZATION_MODE_RANGE_SIZE_EXT = @enumToInt(enum_VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_RANGE_SIZE_EXT);
pub const VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = @enumToInt(enum_VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT);
pub const enum_VkLineRasterizationModeEXT = extern enum(c_int) {
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
    VK_LINE_RASTERIZATION_MODE_BEGIN_RANGE_EXT = 0,
    VK_LINE_RASTERIZATION_MODE_END_RANGE_EXT = 3,
    VK_LINE_RASTERIZATION_MODE_RANGE_SIZE_EXT = 4,
    VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647,
    _,
};
pub const VkLineRasterizationModeEXT = enum_VkLineRasterizationModeEXT;
pub const struct_VkPhysicalDeviceLineRasterizationFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    rectangularLines: VkBool32,
    bresenhamLines: VkBool32,
    smoothLines: VkBool32,
    stippledRectangularLines: VkBool32,
    stippledBresenhamLines: VkBool32,
    stippledSmoothLines: VkBool32,
};
pub const VkPhysicalDeviceLineRasterizationFeaturesEXT = struct_VkPhysicalDeviceLineRasterizationFeaturesEXT;
pub const struct_VkPhysicalDeviceLineRasterizationPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    lineSubPixelPrecisionBits: u32,
};
pub const VkPhysicalDeviceLineRasterizationPropertiesEXT = struct_VkPhysicalDeviceLineRasterizationPropertiesEXT;
pub const struct_VkPipelineRasterizationLineStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const c_void,
    lineRasterizationMode: VkLineRasterizationModeEXT,
    stippledLineEnable: VkBool32,
    lineStippleFactor: u32,
    lineStipplePattern: u16,
};
pub const VkPipelineRasterizationLineStateCreateInfoEXT = struct_VkPipelineRasterizationLineStateCreateInfoEXT;
pub const PFN_vkCmdSetLineStippleEXT = ?fn (VkCommandBuffer, u32, u16) callconv(.C) void;
pub extern fn vkCmdSetLineStippleEXT(commandBuffer: VkCommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16) void;
pub const struct_VkPhysicalDeviceHostQueryResetFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    hostQueryReset: VkBool32,
};
pub const VkPhysicalDeviceHostQueryResetFeaturesEXT = struct_VkPhysicalDeviceHostQueryResetFeaturesEXT;
pub const PFN_vkResetQueryPoolEXT = ?fn (VkDevice, VkQueryPool, u32, u32) callconv(.C) void;
pub extern fn vkResetQueryPoolEXT(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) void;
pub const struct_VkPhysicalDeviceIndexTypeUint8FeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    indexTypeUint8: VkBool32,
};
pub const VkPhysicalDeviceIndexTypeUint8FeaturesEXT = struct_VkPhysicalDeviceIndexTypeUint8FeaturesEXT;
pub const struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    shaderDemoteToHelperInvocation: VkBool32,
};
pub const VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;
pub const struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    texelBufferAlignment: VkBool32,
};
pub const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;
pub const struct_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*c_void,
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
};
pub const VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = struct_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;
pub const GLFWglproc = ?fn () callconv(.C) void;
pub const GLFWvkproc = ?fn () callconv(.C) void;
pub const struct_GLFWmonitor = @OpaqueType();
pub const GLFWmonitor = struct_GLFWmonitor;
pub const struct_GLFWwindow = @OpaqueType();
pub const GLFWwindow = struct_GLFWwindow;
pub const struct_GLFWcursor = @OpaqueType();
pub const GLFWcursor = struct_GLFWcursor;
pub const GLFWerrorfun = ?fn (c_int, [*c]const u8) callconv(.C) void;
pub const GLFWwindowposfun = ?fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowsizefun = ?fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowclosefun = ?fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowrefreshfun = ?fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowfocusfun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowiconifyfun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowmaximizefun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWframebuffersizefun = ?fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowcontentscalefun = ?fn (?*GLFWwindow, f32, f32) callconv(.C) void;
pub const GLFWmousebuttonfun = ?fn (?*GLFWwindow, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcursorposfun = ?fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWcursorenterfun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWscrollfun = ?fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWkeyfun = ?fn (?*GLFWwindow, c_int, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcharfun = ?fn (?*GLFWwindow, c_uint) callconv(.C) void;
pub const GLFWcharmodsfun = ?fn (?*GLFWwindow, c_uint, c_int) callconv(.C) void;
pub const GLFWdropfun = ?fn (?*GLFWwindow, c_int, [*c][*c]const u8) callconv(.C) void;
pub const GLFWmonitorfun = ?fn (?*GLFWmonitor, c_int) callconv(.C) void;
pub const GLFWjoystickfun = ?fn (c_int, c_int) callconv(.C) void;
pub const struct_GLFWvidmode = extern struct {
    width: c_int,
    height: c_int,
    redBits: c_int,
    greenBits: c_int,
    blueBits: c_int,
    refreshRate: c_int,
};
pub const GLFWvidmode = struct_GLFWvidmode;
pub const struct_GLFWgammaramp = extern struct {
    red: [*c]c_ushort,
    green: [*c]c_ushort,
    blue: [*c]c_ushort,
    size: c_uint,
};
pub const GLFWgammaramp = struct_GLFWgammaramp;
pub const struct_GLFWimage = extern struct {
    width: c_int,
    height: c_int,
    pixels: [*c]u8,
};
pub const GLFWimage = struct_GLFWimage;
pub const struct_GLFWgamepadstate = extern struct {
    buttons: [15]u8,
    axes: [6]f32,
};
pub const GLFWgamepadstate = struct_GLFWgamepadstate;
pub extern fn glfwInit() c_int;
pub extern fn glfwTerminate() void;
pub extern fn glfwInitHint(hint: c_int, value: c_int) void;
pub extern fn glfwGetVersion(major: [*c]c_int, minor: [*c]c_int, rev: [*c]c_int) void;
pub extern fn glfwGetVersionString() [*c]const u8;
pub extern fn glfwGetError(description: [*c][*c]const u8) c_int;
pub extern fn glfwSetErrorCallback(callback: GLFWerrorfun) GLFWerrorfun;
pub extern fn glfwGetMonitors(count: [*c]c_int) [*c]?*GLFWmonitor;
pub extern fn glfwGetPrimaryMonitor() ?*GLFWmonitor;
pub extern fn glfwGetMonitorPos(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwGetMonitorWorkarea(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetMonitorPhysicalSize(monitor: ?*GLFWmonitor, widthMM: [*c]c_int, heightMM: [*c]c_int) void;
pub extern fn glfwGetMonitorContentScale(monitor: ?*GLFWmonitor, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetMonitorName(monitor: ?*GLFWmonitor) [*c]const u8;
pub extern fn glfwSetMonitorUserPointer(monitor: ?*GLFWmonitor, pointer: ?*c_void) void;
pub extern fn glfwGetMonitorUserPointer(monitor: ?*GLFWmonitor) ?*c_void;
pub extern fn glfwSetMonitorCallback(callback: GLFWmonitorfun) GLFWmonitorfun;
pub extern fn glfwGetVideoModes(monitor: ?*GLFWmonitor, count: [*c]c_int) [*c]const GLFWvidmode;
pub extern fn glfwGetVideoMode(monitor: ?*GLFWmonitor) [*c]const GLFWvidmode;
pub extern fn glfwSetGamma(monitor: ?*GLFWmonitor, gamma: f32) void;
pub extern fn glfwGetGammaRamp(monitor: ?*GLFWmonitor) [*c]const GLFWgammaramp;
pub extern fn glfwSetGammaRamp(monitor: ?*GLFWmonitor, ramp: [*c]const GLFWgammaramp) void;
pub extern fn glfwDefaultWindowHints() void;
pub extern fn glfwWindowHint(hint: c_int, value: c_int) void;
pub extern fn glfwWindowHintString(hint: c_int, value: [*c]const u8) void;
pub extern fn glfwCreateWindow(width: c_int, height: c_int, title: [*c]const u8, monitor: ?*GLFWmonitor, share: ?*GLFWwindow) ?*GLFWwindow;
pub extern fn glfwDestroyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwWindowShouldClose(window: ?*GLFWwindow) c_int;
pub extern fn glfwSetWindowShouldClose(window: ?*GLFWwindow, value: c_int) void;
pub extern fn glfwSetWindowTitle(window: ?*GLFWwindow, title: [*c]const u8) void;
pub extern fn glfwSetWindowIcon(window: ?*GLFWwindow, count: c_int, images: [*c]const GLFWimage) void;
pub extern fn glfwGetWindowPos(window: ?*GLFWwindow, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwSetWindowPos(window: ?*GLFWwindow, xpos: c_int, ypos: c_int) void;
pub extern fn glfwGetWindowSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwSetWindowSizeLimits(window: ?*GLFWwindow, minwidth: c_int, minheight: c_int, maxwidth: c_int, maxheight: c_int) void;
pub extern fn glfwSetWindowAspectRatio(window: ?*GLFWwindow, numer: c_int, denom: c_int) void;
pub extern fn glfwSetWindowSize(window: ?*GLFWwindow, width: c_int, height: c_int) void;
pub extern fn glfwGetFramebufferSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetWindowFrameSize(window: ?*GLFWwindow, left: [*c]c_int, top: [*c]c_int, right: [*c]c_int, bottom: [*c]c_int) void;
pub extern fn glfwGetWindowContentScale(window: ?*GLFWwindow, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetWindowOpacity(window: ?*GLFWwindow) f32;
pub extern fn glfwSetWindowOpacity(window: ?*GLFWwindow, opacity: f32) void;
pub extern fn glfwIconifyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRestoreWindow(window: ?*GLFWwindow) void;
pub extern fn glfwMaximizeWindow(window: ?*GLFWwindow) void;
pub extern fn glfwShowWindow(window: ?*GLFWwindow) void;
pub extern fn glfwHideWindow(window: ?*GLFWwindow) void;
pub extern fn glfwFocusWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRequestWindowAttention(window: ?*GLFWwindow) void;
pub extern fn glfwGetWindowMonitor(window: ?*GLFWwindow) ?*GLFWmonitor;
pub extern fn glfwSetWindowMonitor(window: ?*GLFWwindow, monitor: ?*GLFWmonitor, xpos: c_int, ypos: c_int, width: c_int, height: c_int, refreshRate: c_int) void;
pub extern fn glfwGetWindowAttrib(window: ?*GLFWwindow, attrib: c_int) c_int;
pub extern fn glfwSetWindowAttrib(window: ?*GLFWwindow, attrib: c_int, value: c_int) void;
pub extern fn glfwSetWindowUserPointer(window: ?*GLFWwindow, pointer: ?*c_void) void;
pub extern fn glfwGetWindowUserPointer(window: ?*GLFWwindow) ?*c_void;
pub extern fn glfwSetWindowPosCallback(window: ?*GLFWwindow, callback: GLFWwindowposfun) GLFWwindowposfun;
pub extern fn glfwSetWindowSizeCallback(window: ?*GLFWwindow, callback: GLFWwindowsizefun) GLFWwindowsizefun;
pub extern fn glfwSetWindowCloseCallback(window: ?*GLFWwindow, callback: GLFWwindowclosefun) GLFWwindowclosefun;
pub extern fn glfwSetWindowRefreshCallback(window: ?*GLFWwindow, callback: GLFWwindowrefreshfun) GLFWwindowrefreshfun;
pub extern fn glfwSetWindowFocusCallback(window: ?*GLFWwindow, callback: GLFWwindowfocusfun) GLFWwindowfocusfun;
pub extern fn glfwSetWindowIconifyCallback(window: ?*GLFWwindow, callback: GLFWwindowiconifyfun) GLFWwindowiconifyfun;
pub extern fn glfwSetWindowMaximizeCallback(window: ?*GLFWwindow, callback: GLFWwindowmaximizefun) GLFWwindowmaximizefun;
pub extern fn glfwSetFramebufferSizeCallback(window: ?*GLFWwindow, callback: GLFWframebuffersizefun) GLFWframebuffersizefun;
pub extern fn glfwSetWindowContentScaleCallback(window: ?*GLFWwindow, callback: GLFWwindowcontentscalefun) GLFWwindowcontentscalefun;
pub extern fn glfwPollEvents() void;
pub extern fn glfwWaitEvents() void;
pub extern fn glfwWaitEventsTimeout(timeout: f64) void;
pub extern fn glfwPostEmptyEvent() void;
pub extern fn glfwGetInputMode(window: ?*GLFWwindow, mode: c_int) c_int;
pub extern fn glfwSetInputMode(window: ?*GLFWwindow, mode: c_int, value: c_int) void;
pub extern fn glfwRawMouseMotionSupported() c_int;
pub extern fn glfwGetKeyName(key: c_int, scancode: c_int) [*c]const u8;
pub extern fn glfwGetKeyScancode(key: c_int) c_int;
pub extern fn glfwGetKey(window: ?*GLFWwindow, key: c_int) c_int;
pub extern fn glfwGetMouseButton(window: ?*GLFWwindow, button: c_int) c_int;
pub extern fn glfwGetCursorPos(window: ?*GLFWwindow, xpos: [*c]f64, ypos: [*c]f64) void;
pub extern fn glfwSetCursorPos(window: ?*GLFWwindow, xpos: f64, ypos: f64) void;
pub extern fn glfwCreateCursor(image: [*c]const GLFWimage, xhot: c_int, yhot: c_int) ?*GLFWcursor;
pub extern fn glfwCreateStandardCursor(shape: c_int) ?*GLFWcursor;
pub extern fn glfwDestroyCursor(cursor: ?*GLFWcursor) void;
pub extern fn glfwSetCursor(window: ?*GLFWwindow, cursor: ?*GLFWcursor) void;
pub extern fn glfwSetKeyCallback(window: ?*GLFWwindow, callback: GLFWkeyfun) GLFWkeyfun;
pub extern fn glfwSetCharCallback(window: ?*GLFWwindow, callback: GLFWcharfun) GLFWcharfun;
pub extern fn glfwSetCharModsCallback(window: ?*GLFWwindow, callback: GLFWcharmodsfun) GLFWcharmodsfun;
pub extern fn glfwSetMouseButtonCallback(window: ?*GLFWwindow, callback: GLFWmousebuttonfun) GLFWmousebuttonfun;
pub extern fn glfwSetCursorPosCallback(window: ?*GLFWwindow, callback: GLFWcursorposfun) GLFWcursorposfun;
pub extern fn glfwSetCursorEnterCallback(window: ?*GLFWwindow, callback: GLFWcursorenterfun) GLFWcursorenterfun;
pub extern fn glfwSetScrollCallback(window: ?*GLFWwindow, callback: GLFWscrollfun) GLFWscrollfun;
pub extern fn glfwSetDropCallback(window: ?*GLFWwindow, callback: GLFWdropfun) GLFWdropfun;
pub extern fn glfwJoystickPresent(jid: c_int) c_int;
pub extern fn glfwGetJoystickAxes(jid: c_int, count: [*c]c_int) [*c]const f32;
pub extern fn glfwGetJoystickButtons(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickHats(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickName(jid: c_int) [*c]const u8;
pub extern fn glfwGetJoystickGUID(jid: c_int) [*c]const u8;
pub extern fn glfwSetJoystickUserPointer(jid: c_int, pointer: ?*c_void) void;
pub extern fn glfwGetJoystickUserPointer(jid: c_int) ?*c_void;
pub extern fn glfwJoystickIsGamepad(jid: c_int) c_int;
pub extern fn glfwSetJoystickCallback(callback: GLFWjoystickfun) GLFWjoystickfun;
pub extern fn glfwUpdateGamepadMappings(string: [*c]const u8) c_int;
pub extern fn glfwGetGamepadName(jid: c_int) [*c]const u8;
pub extern fn glfwGetGamepadState(jid: c_int, state: [*c]GLFWgamepadstate) c_int;
pub extern fn glfwSetClipboardString(window: ?*GLFWwindow, string: [*c]const u8) void;
pub extern fn glfwGetClipboardString(window: ?*GLFWwindow) [*c]const u8;
pub extern fn glfwGetTime() f64;
pub extern fn glfwSetTime(time: f64) void;
pub extern fn glfwGetTimerValue() u64;
pub extern fn glfwGetTimerFrequency() u64;
pub extern fn glfwMakeContextCurrent(window: ?*GLFWwindow) void;
pub extern fn glfwGetCurrentContext() ?*GLFWwindow;
pub extern fn glfwSwapBuffers(window: ?*GLFWwindow) void;
pub extern fn glfwSwapInterval(interval: c_int) void;
pub extern fn glfwExtensionSupported(extension: [*c]const u8) c_int;
pub extern fn glfwGetProcAddress(procname: [*c]const u8) GLFWglproc;
pub extern fn glfwVulkanSupported() c_int;
pub extern fn glfwGetRequiredInstanceExtensions(count: [*c]u32) [*c][*c]const u8;
pub extern fn glfwGetInstanceProcAddress(instance: VkInstance, procname: [*c]const u8) GLFWvkproc;
pub extern fn glfwGetPhysicalDevicePresentationSupport(instance: VkInstance, device: VkPhysicalDevice, queuefamily: u32) c_int;
pub extern fn glfwCreateWindowSurface(instance: VkInstance, window: ?*GLFWwindow, allocator: [*c]const VkAllocationCallbacks, surface: [*c]VkSurfaceKHR) VkResult;
pub const __INTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const __UINTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const __PTRDIFF_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const __INTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const __SIZE_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const __WCHAR_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_short = void }");
pub const __WINT_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_short = void }");
pub const __CHAR16_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_short = void }");
pub const __CHAR32_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_int = void }");
pub const __UINTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const __INT8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_signed = void }");
pub const __INT64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const __UINT8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_char = void }");
pub const __UINT16_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_short = void }");
pub const __UINT32_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_int = void }");
pub const __UINT64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const __INT_LEAST8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_signed = void }");
pub const __UINT_LEAST8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_char = void }");
pub const __UINT_LEAST16_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_short = void }");
pub const __UINT_LEAST32_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_int = void }");
pub const __INT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const __UINT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const __INT_FAST8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_signed = void }");
pub const __UINT_FAST8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_char = void }");
pub const __UINT_FAST16_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_short = void }");
pub const __UINT_FAST32_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_int = void }");
pub const __INT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const __UINT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_long = void }");
pub const NULL = @compileError("unable to translate C expr: expected ')'' here");
pub const __stdint_join3 = @compileError("unable to translate C expr: unexpected token Id{ .HashHash = void }");
pub const __int_c_join = @compileError("unable to translate C expr: unexpected token Id{ .HashHash = void }");
pub const __uint_c = @compileError("unable to translate C expr: expected ',' or ')'");
pub const VK_DEFINE_HANDLE = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_typedef = void }");
pub const VK_DEFINE_NON_DISPATCHABLE_HANDLE = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_typedef = void }");
pub const __SIZEOF_WCHAR_T__ = 2;
pub const VK_EXT_direct_mode_display = 1;
pub const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = 2;
pub const GLFW_KEY_BACKSPACE = 259;
pub const __UINT64_FMTX__ = "llX";
pub const __SSE4_2__ = 1;
pub const VK_KHR_MAINTENANCE2_SPEC_VERSION = 1;
pub const VK_EXT_post_depth_coverage = 1;
pub const __INT_LEAST16_MIN = INT64_MIN;
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image";
pub const VK_NV_geometry_shader_passthrough = 1;
pub const __STDC_UTF_16__ = 1;
pub const __LDBL_HAS_DENORM__ = 1;
pub const __FMA__ = 1;
pub const GLAPIENTRY = APIENTRY;
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT32_MAX__ = @as(c_uint, 4294967295);
pub const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask";
pub const GLFW_KEY_LEFT_SHIFT = 340;
pub const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = 1;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __INT_FAST16_FMTd__ = "hd";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT8_FMTu__ = "hhu";
pub const GLFW_IBEAM_CURSOR = 0x00036002;
pub const __INVPCID__ = 1;
pub const VK_QUEUE_FAMILY_EXTERNAL = ~@as(c_uint, 0) - 1;
pub const __UINT8_FMTX__ = "hhX";
pub const INT_FAST32_MAX = __INT_LEAST32_MAX;
pub const VKAPI_CALL = __stdcall;
pub const VK_NV_viewport_array2 = 1;
pub const VK_EXT_vertex_attribute_divisor = 1;
pub const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = 1;
pub const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = 1;
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = 1;
pub const _WIN32 = 1;
pub const __DBL_HAS_DENORM__ = 1;
pub const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation";
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __SSSE3__ = 1;
pub const VK_KHR_display_swapchain = 1;
pub const __UINT_FAST16_FMTu__ = "hu";
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const __clang_patchlevel__ = 0;
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
pub const GLFW_KEY_F15 = 304;
pub const VK_VERSION_1_0 = 1;
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control";
pub const INT_FAST32_MIN = __INT_LEAST32_MIN;
pub const __LDBL_DIG__ = 15;
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const VK_AMD_negative_viewport_height = 1;
pub const __int_least8_t = int64_t;
pub const VK_EXT_debug_report = 1;
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = 2;
pub const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string";
pub const GLFW_HAT_UP = 1;
pub const __MMX__ = 1;
pub const GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = 4;
pub const __SIZEOF_WINT_T__ = 2;
pub const VK_EXT_sampler_filter_minmax = 1;
pub const __UINTMAX_C_SUFFIX__ = ULL;
pub const VK_LOD_CLAMP_NONE = @as(f32, 1000.0);
pub const __VERSION__ = "Clang 9.0.0 (tags/RELEASE_900/final)";
pub const __DBL_HAS_INFINITY__ = 1;
pub const GLFW_KEY_F = 70;
pub const VK_NV_fragment_shader_barycentric = 1;
pub const VK_API_VERSION_1_1 = VK_MAKE_VERSION(1, 1, 0);
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod";
pub const __corei7 = 1;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const __UINT_FAST32_FMTu__ = "u";
pub const WCHAR_MIN = __UINTN_C(__WCHAR_WIDTH__, 0);
pub const VK_EXT_validation_features = 1;
pub const GLFW_KEY_KP_4 = 324;
pub const GLFW_NATIVE_CONTEXT_API = 0x00036001;
pub const VK_AMD_display_native_hdr = 1;
pub const __pic__ = 2;
pub const GLFW_KEY_APOSTROPHE = 39;
pub const GLFW_HAT_LEFT_UP = GLFW_HAT_LEFT | GLFW_HAT_UP;
pub const UINT_FAST32_MAX = __UINT_LEAST32_MAX;
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = 1;
pub const __ADX__ = 1;
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints";
pub const INT8_MAX = INT8_C(127);
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays";
pub const __UINT_LEAST32_MAX__ = @as(c_uint, 4294967295);
pub const VK_KHR_BIND_MEMORY_2_SPEC_VERSION = 1;
pub const GLFW_VISIBLE = 0x00020004;
pub const __uint_least16_t = uint64_t;
pub const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = 1;
pub const __clang_version__ = "9.0.0 (tags/RELEASE_900/final)";
pub const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = 1;
pub const VK_NULL_HANDLE = 0;
pub const GLFW_JOYSTICK_1 = 0;
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float";
pub inline fn __INTN_C(n: anytype, v: anytype) @TypeOf(__stdint_join3(INT, n, _C(v))) {
    return __stdint_join3(INT, n, _C(v));
}
pub const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls";
pub const GLFW_STICKY_KEYS = 0x00033002;
pub const VK_KHR_display = 1;
pub const GLFW_GAMEPAD_BUTTON_START = 7;
pub const GLFW_FOCUSED = 0x00020001;
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 10;
pub const GLFW_LOCK_KEY_MODS = 0x00033004;
pub const __INT_LEAST32_FMTi__ = "i";
pub const VK_AMD_GCN_SHADER_SPEC_VERSION = 1;
pub const __WCHAR_WIDTH__ = 16;
pub const __UINT16_FMTX__ = "hX";
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = 1;
pub const _MSC_VER = 1924;
pub const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = 1;
pub const GLFW_KEY_CAPS_LOCK = 280;
pub const GLFW_MOD_SHIFT = 0x0001;
pub const GLFW_KEY_F4 = 293;
pub const APIENTRY = __stdcall;
pub const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = 1;
pub const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = 1;
pub const VK_INTEL_shader_integer_functions2 = 1;
pub const INT32_MAX = INT32_C(2147483647);
pub const GLFW_KEY_U = 85;
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = 2;
pub const VK_KHR_shader_draw_parameters = 1;
pub const INT16_MIN = -INT16_C(32767) - 1;
pub const __SSE2__ = 1;
pub const VK_KHR_image_format_list = 1;
pub const GLFW_KEY_DOWN = 264;
pub const GLFW_KEY_KP_DECIMAL = 330;
pub const VK_MAX_DRIVER_INFO_SIZE_KHR = 256;
pub const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = 2;
pub const __FSGSBASE__ = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties";
pub const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage";
pub const __INTPTR_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = 64;
pub const GLFW_KEY_NUM_LOCK = 282;
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = 1;
pub const GLFW_KEY_KP_EQUAL = 336;
pub const VK_EXT_VALIDATION_CACHE_SPEC_VERSION = 1;
pub const GLFW_JOYSTICK_16 = 15;
pub const GLFW_OPENGL_API = 0x00030001;
pub const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8";
pub const GLFW_CURSOR = 0x00033001;
pub const __INT8_FMTd__ = "hhd";
pub const GLFW_KEY_J = 74;
pub const __UINT8_MAX__ = 255;
pub const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling";
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const __clang_minor__ = 0;
pub const __LDBL_DECIMAL_DIG__ = 17;
pub const VK_NV_glsl_shader = 1;
pub const GLFW_KEY_K = 75;
pub const INT_LEAST64_MIN = __INT_LEAST64_MIN;
pub const VK_EXT_index_type_uint8 = 1;
pub const GLFW_MOD_SUPER = 0x0008;
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = 1;
pub const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list";
pub const VK_NV_shader_sm_builtins = 1;
pub const GLFW_AUX_BUFFERS = 0x0002100B;
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image";
pub const __UINTMAX_FMTu__ = "llu";
pub const GLFW_CONTEXT_CREATION_API = 0x0002200B;
pub const VK_AMD_shader_explicit_vertex_parameter = 1;
pub const GLFW_DECORATED = 0x00020005;
pub const VK_AMD_shader_fragment_mask = 1;
pub const __uint_least8_t = uint64_t;
pub const VK_EXT_display_control = 1;
pub const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = 1;
pub const VK_AMD_gcn_shader = 1;
pub const __INT64_C_SUFFIX__ = LL;
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing";
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const VK_KHR_external_semaphore = 1;
pub const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display";
pub const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = 1;
pub const VK_KHR_surface_protected_capabilities = 1;
pub const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode";
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge";
pub const VK_AMD_SHADER_INFO_SPEC_VERSION = 1;
pub const GLFW_KEY_1 = 49;
pub const VK_KHR_imageless_framebuffer = 1;
pub const GLFW_FORMAT_UNAVAILABLE = 0x00010009;
pub const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = 1;
pub const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = 1;
pub const VK_KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group";
pub const VK_KHR_bind_memory2 = 1;
pub const VK_EXT_MEMORY_BUDGET_SPEC_VERSION = 1;
pub const VK_QUEUE_FAMILY_EXTERNAL_KHR = VK_QUEUE_FAMILY_EXTERNAL;
pub const __INT_LEAST8_MAX = INT64_MAX;
pub const VK_KHR_8BIT_STORAGE_SPEC_VERSION = 1;
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace";
pub inline fn INT32_C(v: anytype) @TypeOf(__int_c(v, __int32_c_suffix)) {
    return __int_c(v, __int32_c_suffix);
}
pub const GLFW_HAT_RIGHT = 2;
pub const __STDC_UTF_32__ = 1;
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = 14;
pub const UINT32_MAX = UINT32_C(4294967295);
pub const VK_AMD_SHADER_BALLOT_SPEC_VERSION = 1;
pub const VK_EXT_pipeline_creation_feedback = 1;
pub const GLFW_HAT_RIGHT_UP = GLFW_HAT_RIGHT | GLFW_HAT_UP;
pub const GLFW_KEY_F23 = 312;
pub const __DBL_DIG__ = 15;
pub const GLFW_CONTEXT_REVISION = 0x00022004;
pub const GLFW_JOYSTICK_3 = 2;
pub const VK_NVX_multiview_per_view_attributes = 1;
pub const __INT32_FMTd__ = "d";
pub const GLFW_STICKY_MOUSE_BUTTONS = 0x00033003;
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = 2;
pub const GLFW_KEY_RIGHT_CONTROL = 345;
pub const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = 2;
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation";
pub const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order";
pub const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = 1;
pub const __FLT_DIG__ = 6;
pub const VK_WHOLE_SIZE = ~@as(c_ulonglong, 0);
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const GLFW_KEY_E = 69;
pub const GLFW_KEY_KP_7 = 327;
pub const __SIZEOF_LONG_LONG__ = 8;
pub const INT_LEAST64_MAX = __INT_LEAST64_MAX;
pub const __INT32_TYPE__ = c_int;
pub const GLFW_MOUSE_BUTTON_1 = 0;
pub const __DBL_MIN_EXP__ = -1021;
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = 1;
pub const GLFW_NOT_INITIALIZED = 0x00010001;
pub const VK_MAX_EXTENSION_NAME_SIZE = 256;
pub const INT_LEAST32_MAX = __INT_LEAST32_MAX;
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = 1;
pub const GLFW_OPENGL_DEBUG_CONTEXT = 0x00022007;
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric";
pub const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = 1;
pub const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget";
pub const VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader";
pub const VK_KHR_external_fence = 1;
pub const VK_KHR_get_physical_device_properties2 = 1;
pub const GLFW_KEY_F13 = 302;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = 4;
pub const GLFW_KEY_LEFT_CONTROL = 341;
pub const __UINT_LEAST32_FMTX__ = "X";
pub const GLFW_MAXIMIZED = 0x00020008;
pub const VK_KHR_shader_atomic_int64 = 1;
pub const __SSE_MATH__ = 1;
pub const GLFW_MOD_CAPS_LOCK = 0x0010;
pub const SIG_ATOMIC_MAX = __INTN_MAX(__SIG_ATOMIC_WIDTH__);
pub const VK_ATTACHMENT_UNUSED = ~@as(c_uint, 0);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const VK_KHR_external_memory_fd = 1;
pub const __INT16_TYPE__ = c_short;
pub const __PCLMUL__ = 1;
pub const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = 1;
pub const VK_KHR_external_memory_capabilities = 1;
pub const INT_LEAST8_MAX = __INT_LEAST8_MAX;
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock";
pub const __int8_c_suffix = __INT64_C_SUFFIX__;
pub const __UINTPTR_FMTo__ = "llo";
pub const VK_KHR_MAINTENANCE2_EXTENSION_NAME = "VK_KHR_maintenance2";
pub const GLFW_GAMEPAD_BUTTON_GUIDE = 8;
pub const __INT32_MAX__ = 2147483647;
pub const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache";
pub const VK_NV_shading_rate_image = 1;
pub const __INTPTR_FMTd__ = "lld";
pub const GLFW_KEY_LAST = GLFW_KEY_MENU;
pub const VK_AMD_gpu_shader_half_float = 1;
pub const GLFW_MOD_NUM_LOCK = 0x0020;
pub const GLFW_MOUSE_BUTTON_5 = 4;
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot";
pub inline fn INTMAX_C(v: anytype) @TypeOf(__int_c(v, __INTMAX_C_SUFFIX__)) {
    return __int_c(v, __INTMAX_C_SUFFIX__);
}
pub const __MOVBE__ = 1;
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities";
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = 2;
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
pub const VK_NV_shader_image_footprint = 1;
pub const SIG_ATOMIC_MIN = __INTN_MIN(__SIG_ATOMIC_WIDTH__);
pub const GLFW_KEY_HOME = 268;
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion";
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment";
pub const __UINTPTR_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST32_FMTx__ = "x";
pub const VK_NV_sample_mask_override_coverage = 1;
pub const __PTRDIFF_FMTd__ = "lld";
pub inline fn UINT8_C(v: anytype) @TypeOf(__uint_c(v, __int8_c_suffix)) {
    return __uint_c(v, __int8_c_suffix);
}
pub const GLFW_KEY_RIGHT_BRACKET = 93;
pub const GLFW_JOYSTICK_HAT_BUTTONS = 0x00050001;
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = 1;
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = 1;
pub const GLFW_KEY_B = 66;
pub const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = 2;
pub const VK_EXT_global_priority = 1;
pub const __x86_64__ = 1;
pub const GLFW_GAMEPAD_BUTTON_LEFT_THUMB = 9;
pub const VK_KHR_relaxed_block_layout = 1;
pub const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority";
pub const __SIZEOF_DOUBLE__ = 8;
pub const VK_NV_framebuffer_mixed_samples = 1;
pub const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = 1;
pub const __SIZEOF_FLOAT__ = 4;
pub const GLFW_KEY_EQUAL = 61;
pub const VK_KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview";
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const GLFW_KEY_Q = 81;
pub const VK_KHR_storage_buffer_storage_class = 1;
pub const __NO_MATH_INLINES = 1;
pub const GLFW_KEY_WORLD_2 = 162;
pub const VK_NV_dedicated_allocation = 1;
pub const VK_AMD_shader_info = 1;
pub const __UINT_FAST16_MAX__ = 65535;
pub const __ATOMIC_ACQUIRE = 2;
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = 1;
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const VK_EXT_image_drm_format_modifier = 1;
pub const GLFW_KEY_KP_ADD = 334;
pub const GLFW_KEY_F21 = 310;
pub const VK_FALSE = 0;
pub const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced";
pub const VK_HEADER_VERSION = 121;
pub const __DBL_MIN_10_EXP__ = -307;
pub const VK_KHR_device_group_creation = 1;
pub const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod";
pub const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = 3;
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const VK_KHR_dedicated_allocation = 1;
pub const __DBL_MAX_10_EXP__ = 308;
pub const __PTRDIFF_FMTi__ = "lli";
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = 1;
pub const VK_AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info";
pub const __SIZEOF_LONG__ = 4;
pub const GLFW_KEY_RIGHT_SHIFT = 344;
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const VK_NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle";
pub const __FLT_EVAL_METHOD__ = 0;
pub const VK_NV_corner_sampled_image = 1;
pub const VK_IMG_FILTER_CUBIC_SPEC_VERSION = 1;
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2";
pub const VK_EXT_debug_marker = 1;
pub const __FLT_MAX_EXP__ = 128;
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = 1;
pub const UINT8_MAX = UINT8_C(255);
pub const VK_EXT_queue_family_foreign = 1;
pub const __UINT_FAST8_FMTX__ = "hhX";
pub inline fn VK_VERSION_MINOR(version: anytype) @TypeOf(if (@typeId(@TypeOf(version)) == .Pointer) @ptrCast(uint32_t, version) else if (@typeId(@TypeOf(version)) == .Int) @intToPtr(uint32_t, version) else @as(uint32_t, version) >> 12 & 0x3ff) {
    return if (@typeId(@TypeOf(version)) == .Pointer) @ptrCast(uint32_t, version) else if (@typeId(@TypeOf(version)) == .Int) @intToPtr(uint32_t, version) else @as(uint32_t, version) >> 12 & 0x3ff;
}
pub const VK_EXT_shader_stencil_export = 1;
pub const GLFW_KEY_G = 71;
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage";
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = "VK_NV_viewport_array2";
pub const VK_KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage";
pub const __WCHAR_UNSIGNED__ = 1;
pub const UINT_FAST64_MAX = __UINT_LEAST64_MAX;
pub const VK_KHR_SURFACE_SPEC_VERSION = 25;
pub const VK_EXT_buffer_device_address = 1;
pub const __SIZEOF_SHORT__ = 2;
pub const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore";
pub const VK_EXT_shader_subgroup_ballot = 1;
pub const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote";
pub const VK_SHADER_UNUSED_NV = ~@as(c_uint, 0);
pub const __INTMAX_C_SUFFIX__ = LL;
pub const GLFW_HRESIZE_CURSOR = 0x00036005;
pub const VK_KHR_depth_stencil_resolve = 1;
pub const GLFW_GAMEPAD_BUTTON_LAST = GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2";
pub const VK_EXT_validation_flags = 1;
pub const GLFW_GAMEPAD_AXIS_LEFT_Y = 1;
pub const GLFW_MOUSE_BUTTON_4 = 3;
pub const GLFW_NO_RESET_NOTIFICATION = 0x00031001;
pub const __UINT32_FMTx__ = "x";
pub const WINT_MIN = __UINTN_C(__WINT_WIDTH__, 0);
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior";
pub const GLFW_KEY_KP_0 = 320;
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const GLFW_KEY_F16 = 305;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = 1;
pub const __INT_LEAST32_MAX = INT64_MAX;
pub const __UINTPTR_FMTu__ = "llu";
pub const GLFW_KEY_F7 = 296;
pub const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = 1;
pub const __INT_FAST32_TYPE__ = c_int;
pub const UINTPTR_MAX = __UINTPTR_MAX__;
pub const __UINT16_FMTx__ = "hx";
pub const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters";
pub const VK_NV_RAY_TRACING_SPEC_VERSION = 3;
pub const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1;
pub const __int_least32_t = int64_t;
pub const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 1;
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const GLFW_KEY_KP_ENTER = 335;
pub const __SIZE_FMTu__ = "llu";
pub const __SIZE_FMTX__ = "llX";
pub const GLFW_MOUSE_BUTTON_3 = 2;
pub const __INT16_FMTd__ = "hd";
pub const VK_KHR_multiview = 1;
pub const INT_FAST16_MIN = __INT_LEAST16_MIN;
pub const GLFW_EGL_CONTEXT_API = 0x00036002;
pub const GLFW_JOYSTICK_9 = 8;
pub const GLFW_KEY_P = 80;
pub const INT32_MIN = -INT32_C(2147483647) - 1;
pub const GLFW_ARROW_CURSOR = 0x00036001;
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = 1;
pub const GLFW_DEPTH_BITS = 0x00021005;
pub const GLFW_KEY_MENU = 348;
pub const VK_NV_clip_space_w_scaling = 1;
pub const VK_AMD_shader_core_properties = 1;
pub const VK_EXT_DEBUG_UTILS_SPEC_VERSION = 1;
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address";
pub const __UINTPTR_WIDTH__ = 64;
pub const GLFW_KEY_8 = 56;
pub const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present";
pub const VK_EXT_memory_priority = 1;
pub const INTMAX_MIN = -__INTMAX_MAX__ - 1;
pub const GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = 12;
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = 1;
pub const VK_NV_representative_fragment_test = 1;
pub const GLFW_HOVERED = 0x0002000B;
pub const GLFW_KEY_X = 88;
pub const GLFW_INCLUDE_NONE = 1;
pub const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2";
pub const __UINT_LEAST32_MAX = UINT64_MAX;
pub const __ATOMIC_RELAXED = 0;
pub const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image";
pub const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax";
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = 2;
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = 1;
pub const VK_EXT_shader_viewport_index_layer = 1;
pub const VK_INTEL_performance_query = 1;
pub const __UINT_LEAST16_MAX = UINT64_MAX;
pub const VK_IMG_format_pvrtc = 1;
pub const GLFW_KEY_I = 73;
pub const __UINT64_C_SUFFIX__ = ULL;
pub const GLFW_RELEASE_BEHAVIOR_FLUSH = 0x00035001;
pub const VK_MAX_MEMORY_HEAPS = 16;
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = 1;
pub const __CHAR_BIT__ = 8;
pub const __DBL_DECIMAL_DIG__ = 17;
pub inline fn VK_VERSION_MAJOR(version: anytype) @TypeOf(if (@typeId(@TypeOf(version)) == .Pointer) @ptrCast(uint32_t, version) else if (@typeId(@TypeOf(version)) == .Int) @intToPtr(uint32_t, version) else @as(uint32_t, version) >> 22) {
    return if (@typeId(@TypeOf(version)) == .Pointer) @ptrCast(uint32_t, version) else if (@typeId(@TypeOf(version)) == .Int) @intToPtr(uint32_t, version) else @as(uint32_t, version) >> 22;
}
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot";
pub const VK_MAX_DRIVER_NAME_SIZE_KHR = 256;
pub const GLFW_VERSION_UNAVAILABLE = 0x00010007;
pub const VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";
pub const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = 2;
pub const GLFW_REFRESH_RATE = 0x0002100F;
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const VK_EXT_texel_buffer_alignment = 1;
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const VK_EXT_transform_feedback = 1;
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout";
pub const GLFW_ACCUM_BLUE_BITS = 0x00021009;
pub const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles";
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = 2;
pub const VK_EXT_separate_stencil_usage = 1;
pub const VK_NV_GLSL_SHADER_SPEC_VERSION = 1;
pub const VK_NV_ray_tracing = 1;
pub const __XSAVEOPT__ = 1;
pub const GLFW_KEY_2 = 50;
pub const __UINTMAX_FMTX__ = "llX";
pub const __AVX2__ = 1;
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax";
pub const __uint_least32_t = uint64_t;
pub const INTPTR_MIN = -__INTPTR_MAX__ - 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map";
pub const GLFW_HAT_LEFT = 8;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __INT_LEAST8_MIN = INT64_MIN;
pub const GLFW_KEY_F6 = 295;
pub const VK_KHR_DISPLAY_SPEC_VERSION = 23;
pub const VK_KHR_swapchain = 1;
pub const GLFW_STENCIL_BITS = 0x00021006;
pub const __POPCNT__ = 1;
pub const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = 3;
pub const __ATOMIC_ACQ_REL = 4;
pub const __UINT_LEAST32_FMTx__ = "x";
pub const VK_NV_scissor_exclusive = 1;
pub const GLFW_COCOA_GRAPHICS_SWITCHING = 0x00023003;
pub const GLFW_CURSOR_DISABLED = 0x00034003;
pub const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties";
pub const GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = 5;
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = 1;
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = 1;
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities";
pub const VK_KHR_external_fence_fd = 1;
pub const GLFW_SAMPLES = 0x0002100D;
pub const GLFW_KEY_5 = 53;
pub const UINT_FAST16_MAX = __UINT_LEAST16_MAX;
pub const VK_MAX_MEMORY_TYPES = 32;
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const VK_KHR_MAINTENANCE1_EXTENSION_NAME = "VK_KHR_maintenance1";
pub const VK_EXT_headless_surface = 1;
pub const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = 1;
pub const GLFW_KEY_RIGHT_ALT = 346;
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const VK_EXT_FILTER_CUBIC_SPEC_VERSION = 2;
pub const GLFW_KEY_BACKSLASH = 92;
pub const GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = 10;
pub const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = 1;
pub const GLFW_KEY_F20 = 309;
pub const VK_KHR_16BIT_STORAGE_SPEC_VERSION = 1;
pub const VK_KHR_DEVICE_GROUP_SPEC_VERSION = 4;
pub const __DBL_MANT_DIG__ = 53;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 3;
pub const __UINT32_FMTX__ = "X";
pub const __SHRT_MAX__ = 32767;
pub const VK_EXT_discard_rectangles = 1;
pub const VK_EXT_DEBUG_MARKER_SPEC_VERSION = 4;
pub const VK_KHR_MAINTENANCE1_SPEC_VERSION = 2;
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = 1;
pub const __UINT_FAST16_FMTX__ = "hX";
pub const VK_AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker";
pub const GLFW_GAMEPAD_BUTTON_SQUARE = GLFW_GAMEPAD_BUTTON_X;
pub const __FLT_DECIMAL_DIG__ = 9;
pub inline fn UINT64_C(v: anytype) @TypeOf(__uint_c(v, __int64_c_suffix)) {
    return __uint_c(v, __int64_c_suffix);
}
pub const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count";
pub const __UINT8_FMTo__ = "hho";
pub const VK_KHR_variable_pointers = 1;
pub const __FLT_HAS_DENORM__ = 1;
pub const VK_EXT_shader_demote_to_helper_invocation = 1;
pub const VK_NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader";
pub const INTMAX_MAX = __INTMAX_MAX__;
pub const INT_LEAST16_MIN = __INT_LEAST16_MIN;
pub const __int_least64_t = int64_t;
pub const GLFW_KEY_INSERT = 260;
pub const VK_MAX_DEVICE_GROUP_SIZE = 32;
pub const VK_EXT_subgroup_size_control = 1;
pub const GLFW_X11_CLASS_NAME = 0x00024001;
pub const VK_AMD_memory_overallocation_behavior = 1;
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = 1;
pub const GLFW_KEY_GRAVE_ACCENT = 96;
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = 1;
pub const VK_EXT_external_memory_host = 1;
pub const GLFW_KEY_Z = 90;
pub const GLFW_CROSSHAIR_CURSOR = 0x00036003;
pub const __INT_LEAST64_MAX = INT64_MAX;
pub const __UINT_FAST64_FMTx__ = "llx";
pub const INTPTR_MAX = __INTPTR_MAX__;
pub const __UINT_LEAST8_MAX__ = 255;
pub const UINT16_MAX = UINT16_C(65535);
pub const VK_QUEUE_FAMILY_FOREIGN_EXT = ~@as(c_uint, 0) - 2;
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = 1;
pub const INT_FAST64_MIN = __INT_LEAST64_MIN;
pub const __UINT_LEAST16_MAX__ = 65535;
pub const VK_EXT_fragment_density_map = 1;
pub const VK_KHR_create_renderpass2 = 1;
pub const VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker";
pub const __DBL_MAX_EXP__ = 1024;
pub const VK_NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing";
pub const VK_KHR_driver_properties = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = 1;
pub const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface";
pub const __PTRDIFF_MAX__ = @as(c_longlong, 9223372036854775807);
pub const GLFW_KEY_KP_3 = 323;
pub const GLFW_COCOA_RETINA_FRAMEBUFFER = 0x00023001;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const GLFW_JOYSTICK_6 = 5;
pub const GLFW_CONTEXT_VERSION_MINOR = 0x00022003;
pub const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering";
pub const __UINT_FAST32_MAX__ = @as(c_uint, 4294967295);
pub const GLFW_KEY_F25 = 314;
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities";
pub const VK_EXT_descriptor_indexing = 1;
pub const CALLBACK = __stdcall;
pub const GLFW_KEY_H = 72;
pub const __WINT_MAX__ = 65535;
pub const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags";
pub const GLFW_GAMEPAD_BUTTON_A = 0;
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color";
pub const GLFW_CONTEXT_RELEASE_BEHAVIOR = 0x00022009;
pub const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage";
pub const VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";
pub const GLFW_ACCUM_RED_BITS = 0x00021007;
pub const VK_QUEUE_FAMILY_IGNORED = ~@as(c_uint, 0);
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities";
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities";
pub const VK_EXT_filter_cubic = 1;
pub const __UINT_FAST16_FMTo__ = "ho";
pub const VK_AMD_device_coherent_memory = 1;
pub inline fn UINT16_C(v: anytype) @TypeOf(__uint_c(v, __int16_c_suffix)) {
    return __uint_c(v, __int16_c_suffix);
}
pub const GLFW_ACCUM_GREEN_BITS = 0x00021008;
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough";
pub inline fn offsetof(t: anytype, d: anytype) @TypeOf(__builtin_offsetof(t, d)) {
    return __builtin_offsetof(t, d);
}
pub const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model";
pub const INT_LEAST32_MIN = __INT_LEAST32_MIN;
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2";
pub const VK_REMAINING_MIP_LEVELS = ~@as(c_uint, 0);
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives";
pub const __XSAVEC__ = 1;
pub const VK_KHR_pipeline_executable_properties = 1;
pub const INT8_MIN = -INT8_C(127) - 1;
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = 1;
pub const GLFW_KEY_LEFT_ALT = 342;
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor";
pub const __UINT_FAST8_MAX__ = 255;
pub const __SIZEOF_SIZE_T__ = 8;
pub const __BMI2__ = 1;
pub const __STDC_VERSION__ = @as(c_long, 201112);
pub const VK_NV_mesh_shader = 1;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub const GLFW_OPENGL_CORE_PROFILE = 0x00032001;
pub const GLFW_KEY_KP_5 = 325;
pub const GLFW_KEY_KP_6 = 326;
pub const __UINT32_C_SUFFIX__ = U;
pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = 1;
pub inline fn INT8_C(v: anytype) @TypeOf(__int_c(v, __int8_c_suffix)) {
    return __int_c(v, __int8_c_suffix);
}
pub const VK_EXT_fragment_shader_interlock = 1;
pub const GLFW_KEY_SLASH = 47;
pub const GLFW_COCOA_FRAME_NAME = 0x00023002;
pub const VK_NVX_device_generated_commands = 1;
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template";
pub const VK_API_VERSION_1_0 = VK_MAKE_VERSION(1, 0, 0);
pub const __FINITE_MATH_ONLY__ = 0;
pub const VK_AMD_shader_core_properties2 = 1;
pub const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = 1;
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = 1;
pub const __tune_corei7__ = 1;
pub const VK_EXT_debug_utils = 1;
pub const GLFW_KEY_F17 = 306;
pub const VK_NV_FILL_RECTANGLE_SPEC_VERSION = 1;
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const VK_KHR_shared_presentable_image = 1;
pub const __INT_FAST32_FMTd__ = "d";
pub const GLFW_FLOATING = 0x00020007;
pub const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = 1;
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = 1;
pub const __INTMAX_FMTi__ = "lli";
pub const GLFW_X11_INSTANCE_NAME = 0x00024002;
pub const VK_EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic";
pub const __INT_MAX__ = 2147483647;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const VK_KHR_8bit_storage = 1;
pub const __SIZEOF_INT128__ = 16;
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const GLFW_CONNECTED = 0x00040001;
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = 1;
pub const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export";
pub inline fn INT64_C(v: anytype) @TypeOf(__int_c(v, __int64_c_suffix)) {
    return __int_c(v, __int64_c_suffix);
}
pub const __INT_FAST16_MAX__ = 32767;
pub const GLFW_CURSOR_HIDDEN = 0x00034002;
pub const __SIZE_FMTx__ = "llx";
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf";
pub const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = 2;
pub const __CLFLUSHOPT__ = 1;
pub const GLFW_JOYSTICK_13 = 12;
pub const VK_REMAINING_ARRAY_LAYERS = ~@as(c_uint, 0);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const GLFW_REPEAT = 2;
pub const GLFW_KEY_SEMICOLON = 59;
pub const GLFW_KEY_UNKNOWN = -1;
pub const VK_EXT_ycbcr_image_arrays = 1;
pub const VKAPI_PTR = VKAPI_CALL;
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = 1;
pub const VK_KHR_sampler_ycbcr_conversion = 1;
pub const GLFW_VERSION_MINOR = 4;
pub const __UINT64_FMTu__ = "llu";
pub const GLFW_KEY_T = 84;
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2";
pub const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = 1;
pub const GLFW_HAND_CURSOR = 0x00036004;
pub inline fn __INTN_MAX(n: anytype) @TypeOf(__stdint_join3(INT, n, _MAX)) {
    return __stdint_join3(INT, n, _MAX);
}
pub const GLFW_GAMEPAD_AXIS_RIGHT_Y = 3;
pub const GLFW_CURSOR_NORMAL = 0x00034001;
pub const VK_KHR_MULTIVIEW_SPEC_VERSION = 1;
pub const _M_X64 = 100;
pub const GLFW_JOYSTICK_10 = 9;
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter";
pub const VK_KHR_get_display_properties2 = 1;
pub const VK_KHR_get_memory_requirements2 = 1;
pub const GLFW_KEY_LEFT = 263;
pub const __INT_FAST8_FMTd__ = "hhd";
pub const GLFW_JOYSTICK_12 = 11;
pub const VK_NV_dedicated_allocation_image_aliasing = 1;
pub const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = 2;
pub const __NO_INLINE__ = 1;
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted";
pub const _MSC_FULL_VER = 192428316;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const __LITTLE_ENDIAN__ = 1;
pub const VK_KHR_incremental_present = 1;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle";
pub const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive";
pub const VK_AMD_pipeline_compiler_control = 1;
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1;
pub const __INT_LEAST16_MAX__ = 32767;
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = 2;
pub const GLFW_API_UNAVAILABLE = 0x00010006;
pub const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation";
pub const INT_LEAST16_MAX = __INT_LEAST16_MAX;
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __RTM__ = 1;
pub const __FLT_HAS_INFINITY__ = 1;
pub const VK_AMD_texture_gather_bias_lod = 1;
pub const _MSC_EXTENSIONS = 1;
pub const GLFW_KEY_KP_1 = 321;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const GLFW_CONTEXT_VERSION_MAJOR = 0x00022002;
pub const GLFW_MOUSE_BUTTON_6 = 5;
pub const GLFW_KEY_PRINT_SCREEN = 283;
pub const GLFW_JOYSTICK_11 = 10;
pub const GLFW_GAMEPAD_BUTTON_DPAD_LEFT = 14;
pub const __UINT_LEAST32_FMTo__ = "o";
pub inline fn __INTN_MIN(n: anytype) @TypeOf(__stdint_join3(INT, n, _MIN)) {
    return __stdint_join3(INT, n, _MIN);
}
pub const UINT_FAST8_MAX = __UINT_LEAST8_MAX;
pub const VK_AMD_draw_indirect_count = 1;
pub const VK_GOOGLE_display_timing = 1;
pub const VK_LUID_SIZE_KHR = VK_LUID_SIZE;
pub const GLFW_COCOA_CHDIR_RESOURCES = 0x00051001;
pub const GLFW_NO_ERROR = 0;
pub const __INTMAX_FMTd__ = "lld";
pub const __SEG_FS = 1;
pub const VK_KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage";
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr";
pub const __UINT_FAST8_FMTo__ = "hho";
pub inline fn VK_MAKE_VERSION(major: anytype, minor: anytype, patch: anytype) @TypeOf(major << 22 | minor << 12 | patch) {
    return major << 22 | minor << 12 | patch;
}
pub const GLFW_JOYSTICK_7 = 6;
pub const VK_MAX_DESCRIPTION_SIZE = 256;
pub const UINT_LEAST8_MAX = __UINT_LEAST8_MAX;
pub const VK_EXT_shader_subgroup_vote = 1;
pub const __INT_LEAST16_TYPE__ = c_short;
pub const VK_AMD_shader_ballot = 1;
pub const __SSE3__ = 1;
pub const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle";
pub const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query";
pub const INT_FAST8_MAX = __INT_LEAST8_MAX;
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = 1;
pub const _M_AMD64 = 100;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const GLFW_JOYSTICK_LAST = GLFW_JOYSTICK_16;
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const GLFW_KEY_F11 = 300;
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = 4;
pub const GLFW_KEY_PAGE_DOWN = 267;
pub const VK_KHR_SWAPCHAIN_SPEC_VERSION = 70;
pub const GLFW_KEY_F8 = 297;
pub const VK_EXT_inline_uniform_block = 1;
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes";
pub const GLFW_KEY_COMMA = 44;
pub const GLFW_KEY_O = 79;
pub const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset";
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout";
pub const GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = 5;
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NVX_device_generated_commands";
pub const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = 1;
pub const GLFW_VERSION_REVISION = 0;
pub const __x86_64 = 1;
pub const GLFW_KEY_N = 78;
pub const VK_EXT_blend_operation_advanced = 1;
pub const __UINTMAX_WIDTH__ = 64;
pub const GLFW_KEY_F22 = 311;
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties";
pub const GLFW_KEY_F19 = 308;
pub const VK_SUBPASS_EXTERNAL = ~@as(c_uint, 0);
pub const __SSE4_1__ = 1;
pub const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode";
pub inline fn VK_VERSION_PATCH(version: anytype) @TypeOf(if (@typeId(@TypeOf(version)) == .Pointer) @ptrCast(uint32_t, version) else if (@typeId(@TypeOf(version)) == .Int) @intToPtr(uint32_t, version) else @as(uint32_t, version) & 0xfff) {
    return if (@typeId(@TypeOf(version)) == .Pointer) @ptrCast(uint32_t, version) else if (@typeId(@TypeOf(version)) == .Int) @intToPtr(uint32_t, version) else @as(uint32_t, version) & 0xfff;
}
pub const __INT_FAST64_FMTd__ = "lld";
pub const _MSC_BUILD = 1;
pub const GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = 4;
pub const VK_EXT_external_memory_dma_buf = 1;
pub const __INT16_FMTi__ = "hi";
pub const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = 1;
pub const GLFW_GAMEPAD_BUTTON_DPAD_DOWN = 13;
pub const __LDBL_MIN_EXP__ = -1021;
pub const __PRFCHW__ = 1;
pub const GLFW_RELEASE = 0;
pub const VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata";
pub const __UINT32_FMTu__ = "u";
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization";
pub const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = 1;
pub const VK_EXT_DEBUG_REPORT_SPEC_VERSION = 9;
pub const __amd64__ = 1;
pub const GLFW_VRESIZE_CURSOR = 0x00036006;
pub inline fn INT16_C(v: anytype) @TypeOf(__int_c(v, __int16_c_suffix)) {
    return __int_c(v, __int16_c_suffix);
}
pub const GLFW_HAT_CENTERED = 0;
pub const VK_KHR_maintenance1 = 1;
pub const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins";
pub const __UINT64_FMTx__ = "llx";
pub const VK_EXT_memory_budget = 1;
pub const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = 1;
pub const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2";
pub const VK_EXT_hdr_metadata = 1;
pub const __INT_FAST32_FMTi__ = "i";
pub const GLFW_KEY_A = 65;
pub const __seg_gs = __attribute__(address_space(256));
pub const GLFW_OUT_OF_MEMORY = 0x00010005;
pub const __int_least16_t = int64_t;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __uint_least64_t = uint64_t;
pub const VULKAN_CORE_H_ = 1;
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2";
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = 1;
pub const GLFW_KEY_END = 269;
pub const __INT_LEAST32_MIN = INT64_MIN;
pub const GLFW_KEY_F5 = 294;
pub const GLFW_KEY_D = 68;
pub inline fn __int_c(v: anytype, suffix: anytype) @TypeOf(__int_c_join(v, suffix)) {
    return __int_c_join(v, suffix);
}
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = 1;
pub const GLFW_KEY_7 = 55;
pub const __UINT16_FMTu__ = "hu";
pub const INT_LEAST8_MIN = __INT_LEAST8_MIN;
pub const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps";
pub const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable";
pub const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = 1;
pub const VK_KHR_MAINTENANCE3_EXTENSION_NAME = "VK_KHR_maintenance3";
pub const VK_EXT_host_query_reset = 1;
pub const GLFW_TRUE = 1;
pub const VK_LUID_SIZE = 8;
pub const __INT_LEAST32_FMTd__ = "d";
pub const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation";
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = 1;
pub const GLFW_GAMEPAD_BUTTON_Y = 3;
pub const __INTPTR_FMTi__ = "lli";
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples";
pub const VK_KHR_uniform_buffer_standard_layout = 1;
pub const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = 1;
pub const VK_NV_fragment_coverage_to_color = 1;
pub const GLFW_KEY_RIGHT = 262;
pub const __UINTPTR_FMTX__ = "llX";
pub const __SIZEOF_LONG_DOUBLE__ = 8;
pub const GLFW_KEY_F12 = 301;
pub const __INT_LEAST64_MIN = INT64_MIN;
pub const VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __INT64_FMTi__ = "lli";
pub const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = 1;
pub const VK_AMD_shader_image_load_store_lod = 1;
pub const GLFW_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_1;
pub const GLFW_KEY_LEFT_BRACKET = 91;
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = 1;
pub const GLFW_KEY_Y = 89;
pub const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = 1;
pub const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = 1;
pub const __LDBL_HAS_INFINITY__ = 1;
pub const VK_KHR_external_fence_capabilities = 1;
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const GLFW_GAMEPAD_AXIS_LAST = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;
pub const GLFW_JOYSTICK_4 = 3;
pub const GLFW_KEY_V = 86;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const GLFW_INVALID_VALUE = 0x00010004;
pub const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor";
pub const VK_AMD_buffer_marker = 1;
pub const GLFW_KEY_LEFT_SUPER = 343;
pub const VK_GOOGLE_decorate_string = 1;
pub const GLFW_LOSE_CONTEXT_ON_RESET = 0x00031002;
pub const VK_EXT_calibrated_timestamps = 1;
pub const __UINTPTR_FMTx__ = "llx";
pub const VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 3;
pub const VK_AMD_shader_trinary_minmax = 1;
pub const GLFW_JOYSTICK_5 = 4;
pub const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64";
pub const __AES__ = 1;
pub const VK_AMD_gpu_shader_int16 = 1;
pub const __FLT_RADIX__ = 2;
pub const __amd64 = 1;
pub const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory";
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign";
pub const __UINT_LEAST8_MAX = UINT64_MAX;
pub inline fn __UINTN_C(n: anytype, v: anytype) @TypeOf(__stdint_join3(UINT, n, _C(v))) {
    return __stdint_join3(UINT, n, _C(v));
}
pub const __INT_FAST32_MAX__ = 2147483647;
pub const GLFW_JOYSTICK_15 = 14;
pub const VK_EXT_line_rasterization = 1;
pub const GLFW_JOYSTICK_8 = 7;
pub const GLFW_HAT_DOWN = 4;
pub const __INT32_FMTi__ = "i";
pub const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix";
pub const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = 0;
pub const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = 1;
pub const __INT_LEAST32_TYPE__ = c_int;
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = 1;
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer";
pub const UINT_LEAST16_MAX = __UINT_LEAST16_MAX;
pub const __SIZE_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const VK_EXT_conditional_rendering = 1;
pub const GLFW_GAMEPAD_BUTTON_CIRCLE = GLFW_GAMEPAD_BUTTON_B;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = 1;
pub const VK_NV_compute_shader_derivatives = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const GLFW_FOCUS_ON_SHOW = 0x0002000C;
pub const __WCHAR_MAX__ = 65535;
pub const __ATOMIC_SEQ_CST = 5;
pub const GLFW_KEY_KP_DIVIDE = 331;
pub const VK_NV_device_diagnostic_checkpoints = 1;
pub const VK_NV_viewport_swizzle = 1;
pub const UINTMAX_MAX = __UINTMAX_MAX__;
pub const VK_EXT_swapchain_colorspace = 1;
pub const GLFW_KEY_ENTER = 257;
pub const __BMI__ = 1;
pub const __FLT_MANT_DIG__ = 24;
pub const __SIZE_FMTo__ = "llo";
pub const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr";
pub const GLFW_KEY_M = 77;
pub const __int32_c_suffix = __INT64_C_SUFFIX__;
pub const GLFW_FALSE = 0;
pub const __SEG_GS = 1;
pub const INT_FAST64_MAX = __INT_LEAST64_MAX;
pub const GLFW_TRANSPARENT_FRAMEBUFFER = 0x0002000A;
pub const __INT_FAST8_MAX__ = 127;
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = 1;
pub const VK_AMD_BUFFER_MARKER_SPEC_VERSION = 1;
pub const __SSE__ = 1;
pub const VK_EXT_PCI_BUS_INFO_SPEC_VERSION = 2;
pub const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = 2;
pub const GLFW_KEY_F14 = 303;
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples";
pub const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = 1;
pub const GLFW_OPENGL_COMPAT_PROFILE = 0x00032002;
pub const GLFW_RELEASE_BEHAVIOR_NONE = 0x00035002;
pub const VK_IMG_filter_cubic = 1;
pub const VK_KHR_shader_float_controls = 1;
pub const GLFW_VERSION_MAJOR = 3;
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint";
pub const GLFW_KEY_DELETE = 261;
pub const INT_FAST8_MIN = __INT_LEAST8_MIN;
pub const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback";
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const GLFW_CENTER_CURSOR = 0x00020009;
pub const GLFW_INCLUDE_VULKAN = 1;
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = 1;
pub const VK_KHR_maintenance3 = 1;
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback";
pub const VK_AMD_mixed_attachment_samples = 1;
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2";
pub const VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic";
pub const __LDBL_MIN_10_EXP__ = -307;
pub const __LDBL_MAX_10_EXP__ = 308;
pub const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd";
pub const VK_NV_MESH_SHADER_SPEC_VERSION = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd";
pub const GLFW_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_3;
pub const __FLT_MIN_EXP__ = -125;
pub const GLFW_AUTO_ICONIFY = 0x00020006;
pub const GLFW_MOUSE_BUTTON_7 = 6;
pub const GLFW_MOD_ALT = 0x0004;
pub const INT_FAST16_MAX = __INT_LEAST16_MAX;
pub const VK_KHR_device_group = 1;
pub const GLFW_NO_WINDOW_CONTEXT = 0x0001000A;
pub const __UINTMAX_FMTx__ = "llx";
pub const __code_model_small_ = 1;
pub const VK_KHR_descriptor_update_template = 1;
pub const __WINT_UNSIGNED__ = 1;
pub const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory";
pub const SIZE_MAX = __SIZE_MAX__;
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __UINT_FAST32_FMTX__ = "X";
pub const __LZCNT__ = 1;
pub const __int64_c_suffix = __INT64_C_SUFFIX__;
pub const GLFW_OPENGL_ANY_PROFILE = 0;
pub const VK_EXT_display_surface_counter = 1;
pub const GLFW_KEY_KP_SUBTRACT = 333;
pub const GLFW_MOUSE_BUTTON_8 = 7;
pub const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc";
pub const GLFW_KEY_F9 = 298;
pub const GLFW_GAMEPAD_AXIS_RIGHT_X = 2;
pub const __MPX__ = 1;
pub const VK_EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils";
pub const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = 1;
pub const VK_EXT_conservative_rasterization = 1;
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const VK_KHR_surface = 1;
pub const VK_KHR_sampler_mirror_clamp_to_edge = 1;
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const VK_EXT_validation_cache = 1;
pub const GLFW_KEY_6 = 54;
pub const GLFW_GAMEPAD_BUTTON_DPAD_UP = 11;
pub const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = 1;
pub const INT16_MAX = INT16_C(32767);
pub const GLFW_KEY_L = 76;
pub const GLFW_KEY_SPACE = 32;
pub const __SCHAR_MAX__ = 127;
pub const __UINT8_FMTx__ = "hhx";
pub const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence";
pub const GLFW_ACCUM_ALPHA_BITS = 0x0002100A;
pub const VK_EXT_pci_bus_info = 1;
pub const INT64_MIN = -INT64_C(9223372036854775807) - 1;
pub const __clang__ = 1;
pub const VK_EXT_HDR_METADATA_SPEC_VERSION = 2;
pub const GLFW_HAT_LEFT_DOWN = GLFW_HAT_LEFT | GLFW_HAT_DOWN;
pub const GLFW_GAMEPAD_BUTTON_TRIANGLE = GLFW_GAMEPAD_BUTTON_Y;
pub const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing";
pub const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16";
pub const GLFW_RAW_MOUSE_MOTION = 0x00033005;
pub const VK_KHR_external_semaphore_fd = 1;
pub const GLFW_RED_BITS = 0x00021001;
pub const __FLT_MIN_10_EXP__ = -37;
pub const GLFW_KEY_PAGE_UP = 266;
pub const GLFW_KEY_UP = 265;
pub const __SIZEOF_POINTER__ = 8;
pub inline fn UINT32_C(v: anytype) @TypeOf(__uint_c(v, __int32_c_suffix)) {
    return __uint_c(v, __int32_c_suffix);
}
pub const GLFW_GAMEPAD_BUTTON_BACK = 6;
pub const __ATOMIC_RELEASE = 3;
pub const GLFW_SRGB_CAPABLE = 0x0002100E;
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const WINT_MAX = __UINTN_MAX(__WINT_WIDTH__);
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height";
pub const __WINT_WIDTH__ = 16;
pub const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = 1;
pub const __FLT_MAX_10_EXP__ = 38;
pub const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = 1;
pub const _DEBUG = 1;
pub const GLFW_NO_ROBUSTNESS = 0;
pub const GLFW_HAT_RIGHT_DOWN = GLFW_HAT_RIGHT | GLFW_HAT_DOWN;
pub const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = 3;
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = 1;
pub const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = 1;
pub const GLFW_KEY_KP_2 = 322;
pub const VK_KHR_push_descriptor = 1;
pub const PTRDIFF_MIN = -__PTRDIFF_MAX__ - 1;
pub const INT64_MAX = INT64_C(9223372036854775807);
pub const GLFW_NO_API = 0;
pub const __INT64_FMTd__ = "lld";
pub const GLFW_CONTEXT_ROBUSTNESS = 0x00022005;
pub const __UINT16_MAX__ = 65535;
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = 1;
pub const GLFW_KEY_9 = 57;
pub const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count";
pub const GLFW_PRESS = 1;
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 2;
pub const GLFW_OPENGL_ES_API = 0x00030002;
pub const VK_NV_external_memory_capabilities = 1;
pub const __INT_FAST16_TYPE__ = c_short;
pub const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = 1;
pub const GLFW_GAMEPAD_BUTTON_CROSS = GLFW_GAMEPAD_BUTTON_A;
pub const GLFW_KEY_PERIOD = 46;
pub const VK_AMD_rasterization_order = 1;
pub const GLFW_KEY_F10 = 299;
pub const GLFW_RESIZABLE = 0x00020003;
pub const GLFW_KEY_F18 = 307;
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = 1;
pub const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features";
pub const GLFW_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_2;
pub const VULKAN_H_ = 1;
pub const GLFW_GAMEPAD_BUTTON_B = 1;
pub const GLFW_OSMESA_CONTEXT_API = 0x00036003;
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const GLFW_GAMEPAD_BUTTON_X = 2;
pub const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = 2;
pub const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info";
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const GLFW_INVALID_ENUM = 0x00010003;
pub const VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader";
pub const UINT_LEAST64_MAX = __UINT_LEAST64_MAX;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization";
pub const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control";
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout";
pub const __RDRND__ = 1;
pub const __seg_fs = __attribute__(address_space(257));
pub const __INT_LEAST16_MAX = INT64_MAX;
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = 1;
pub const GLFW_KEY_4 = 52;
pub const UINT64_MAX = UINT64_C(18446744073709551615);
pub const VK_EXT_depth_clip_enable = 1;
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const GLFW_KEY_S = 83;
pub const _INTEGRAL_MAX_BITS = 64;
pub const VK_NV_external_memory = 1;
pub const VK_UUID_SIZE = 16;
pub const __SSE2_MATH__ = 1;
pub const __SGX__ = 1;
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = 1;
pub const __POINTER_WIDTH__ = 64;
pub const GLFW_KEY_ESCAPE = 256;
pub const __STDC_HOSTED__ = 1;
pub const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing";
pub const GLFW_KEY_KP_9 = 329;
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned";
pub const __PIC__ = 2;
pub const __FXSR__ = 1;
pub const VK_GOOGLE_hlsl_functionality1 = 1;
pub const GLFW_KEY_TAB = 258;
pub const GLFW_ALPHA_BITS = 0x00021004;
pub const GLFW_KEY_0 = 48;
pub const GLFW_KEY_F2 = 291;
pub const GLFW_MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_8;
pub const __PTRDIFF_WIDTH__ = 64;
pub const GLFW_MOUSE_BUTTON_2 = 1;
pub const __SIZE_WIDTH__ = 64;
pub const GLFW_DISCONNECTED = 0x00040002;
pub const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority";
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const GLFW_KEY_MINUS = 45;
pub const __INT_LEAST64_FMTi__ = "lli";
pub const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = 1;
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 3;
pub const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = 1;
pub const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = 1;
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = 1;
pub const GLFW_JOYSTICK_2 = 1;
pub const __ATOMIC_CONSUME = 1;
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = 1;
pub const __INT_FAST16_FMTi__ = "hi";
pub const __INT8_MAX__ = 127;
pub const VK_EXT_scalar_block_layout = 1;
pub const VK_KHR_shader_float16_int8 = 1;
pub const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = 1;
pub const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory";
pub const __UINT32_FMTo__ = "o";
pub const VK_IMG_FORMAT_PVRTC_SPEC_VERSION = 1;
pub const GLFW_KEY_R = 82;
pub const VK_KHR_draw_indirect_count = 1;
pub const GLFW_BLUE_BITS = 0x00021003;
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const __INT8_FMTi__ = "hhi";
pub const VK_MAX_DEVICE_GROUP_SIZE_KHR = VK_MAX_DEVICE_GROUP_SIZE;
pub const GLFW_KEY_KP_8 = 328;
pub inline fn UINTMAX_C(v: anytype) @TypeOf(__int_c(v, __UINTMAX_C_SUFFIX__)) {
    return __int_c(v, __UINTMAX_C_SUFFIX__);
}
pub const GLFW_CONTEXT_NO_ERROR = 0x0002200A;
pub const GLFW_KEY_C = 67;
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = 1;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const __clang_major__ = 9;
pub const GLFW_KEY_PAUSE = 284;
pub const __INT16_MAX__ = 32767;
pub const GLFW_OPENGL_FORWARD_COMPAT = 0x00022006;
pub const VK_KHR_16bit_storage = 1;
pub const GLFW_CLIENT_API = 0x00022001;
pub const __UINT16_FMTo__ = "ho";
pub const VK_NV_cooperative_matrix = 1;
pub const VK_KHR_vulkan_memory_model = 1;
pub const __INT_FAST8_FMTi__ = "hhi";
pub const GLFW_KEY_SCROLL_LOCK = 281;
pub const GLFW_ANY_RELEASE_BEHAVIOR = 0;
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class";
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test";
pub const __XSAVES__ = 1;
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve";
pub const GLFW_ICONIFIED = 0x00020002;
pub const GLFW_DONT_CARE = -1;
pub const VK_KHR_external_memory = 1;
pub const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers";
pub const VK_NV_fill_rectangle = 1;
pub const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = 1;
pub const GLFW_KEY_RIGHT_SUPER = 347;
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const VK_EXT_astc_decode_mode = 1;
pub const __llvm__ = 1;
pub const VK_KHR_get_surface_capabilities2 = 1;
pub const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = 1;
pub const VK_EXT_sample_locations = 1;
pub const GLFW_NO_CURRENT_CONTEXT = 0x00010002;
pub const GLFW_KEY_KP_MULTIPLY = 332;
pub const __GCC_ASM_FLAG_OUTPUTS__ = 1;
pub const VK_NV_shader_subgroup_partitioned = 1;
pub const VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = 1;
pub const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block";
pub const GLFW_COCOA_MENUBAR = 0x00051002;
pub const __UINT_LEAST64_MAX = UINT64_MAX;
pub const __LDBL_MAX_EXP__ = 1024;
pub const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations";
pub const WINGDIAPI = __declspec(dllimport);
pub const VK_KHR_MAINTENANCE3_SPEC_VERSION = 1;
pub const GLFW_MOD_CONTROL = 0x0002;
pub const GLFW_OPENGL_PROFILE = 0x00022008;
pub const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host";
pub const GLFW_KEY_F3 = 292;
pub const VK_KHR_external_semaphore_capabilities = 1;
pub const VK_KHR_maintenance2 = 1;
pub const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = 1;
pub const GLFW_KEY_F24 = 313;
pub const __INTPTR_WIDTH__ = 64;
pub const __int16_c_suffix = __INT64_C_SUFFIX__;
pub const __XSAVE__ = 1;
pub const VK_EXT_depth_range_unrestricted = 1;
pub const GLFW_PLATFORM_ERROR = 0x00010008;
pub const GLFW_SCALE_TO_MONITOR = 0x0002200C;
pub const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = 2;
pub const __RDSEED__ = 1;
pub inline fn __UINTN_MAX(n: anytype) @TypeOf(__stdint_join3(UINT, n, _MAX)) {
    return __stdint_join3(UINT, n, _MAX);
}
pub const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8";
pub const PTRDIFF_MAX = __PTRDIFF_MAX__;
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = 1;
pub const GLFW_STEREO = 0x0002100C;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = 1;
pub const __corei7__ = 1;
pub const VK_TRUE = 1;
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const VK_NV_coverage_reduction_mode = 1;
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier";
pub const GLFW_KEY_3 = 51;
pub const VK_NVX_image_view_handle = 1;
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format";
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const GLFW_KEY_WORLD_1 = 161;
pub const __LDBL_MANT_DIG__ = 53;
pub const GLFW_KEY_F1 = 290;
pub const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd";
pub const UINT_LEAST32_MAX = __UINT_LEAST32_MAX;
pub const GLFW_JOYSTICK_14 = 13;
pub const GLFW_GAMEPAD_AXIS_LEFT_X = 0;
pub const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = 1;
pub const __F16C__ = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = 1;
pub const VK_VERSION_1_1 = 1;
pub const __SIZEOF_INT__ = 4;
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = 1;
pub const GLFW_GREEN_BITS = 0x00021002;
pub const GLFW_KEY_W = 87;
pub const __INT_LEAST8_MAX__ = 127;
pub const _WIN64 = 1;
pub const __UINTMAX_FMTo__ = "llo";
pub const GLFW_DOUBLEBUFFER = 0x00021010;
pub const VK_KHR_swapchain_mutable_format = 1;
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control";
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = 1;
pub const VK_EXT_texture_compression_astc_hdr = 1;
pub const __AVX__ = 1;
pub const VkInstance_T = struct_VkInstance_T;
pub const VkPhysicalDevice_T = struct_VkPhysicalDevice_T;
pub const VkDevice_T = struct_VkDevice_T;
pub const VkQueue_T = struct_VkQueue_T;
pub const VkSemaphore_T = struct_VkSemaphore_T;
pub const VkCommandBuffer_T = struct_VkCommandBuffer_T;
pub const VkFence_T = struct_VkFence_T;
pub const VkDeviceMemory_T = struct_VkDeviceMemory_T;
pub const VkBuffer_T = struct_VkBuffer_T;
pub const VkImage_T = struct_VkImage_T;
pub const VkEvent_T = struct_VkEvent_T;
pub const VkQueryPool_T = struct_VkQueryPool_T;
pub const VkBufferView_T = struct_VkBufferView_T;
pub const VkImageView_T = struct_VkImageView_T;
pub const VkShaderModule_T = struct_VkShaderModule_T;
pub const VkPipelineCache_T = struct_VkPipelineCache_T;
pub const VkPipelineLayout_T = struct_VkPipelineLayout_T;
pub const VkRenderPass_T = struct_VkRenderPass_T;
pub const VkPipeline_T = struct_VkPipeline_T;
pub const VkDescriptorSetLayout_T = struct_VkDescriptorSetLayout_T;
pub const VkSampler_T = struct_VkSampler_T;
pub const VkDescriptorPool_T = struct_VkDescriptorPool_T;
pub const VkDescriptorSet_T = struct_VkDescriptorSet_T;
pub const VkFramebuffer_T = struct_VkFramebuffer_T;
pub const VkCommandPool_T = struct_VkCommandPool_T;
pub const VkSamplerYcbcrConversion_T = struct_VkSamplerYcbcrConversion_T;
pub const VkDescriptorUpdateTemplate_T = struct_VkDescriptorUpdateTemplate_T;
pub const VkSurfaceKHR_T = struct_VkSurfaceKHR_T;
pub const VkSwapchainKHR_T = struct_VkSwapchainKHR_T;
pub const VkDisplayKHR_T = struct_VkDisplayKHR_T;
pub const VkDisplayModeKHR_T = struct_VkDisplayModeKHR_T;
pub const VkDebugReportCallbackEXT_T = struct_VkDebugReportCallbackEXT_T;
pub const VkObjectTableNVX_T = struct_VkObjectTableNVX_T;
pub const VkIndirectCommandsLayoutNVX_T = struct_VkIndirectCommandsLayoutNVX_T;
pub const VkDebugUtilsMessengerEXT_T = struct_VkDebugUtilsMessengerEXT_T;
pub const VkValidationCacheEXT_T = struct_VkValidationCacheEXT_T;
pub const VkAccelerationStructureNV_T = struct_VkAccelerationStructureNV_T;
pub const VkPerformanceConfigurationINTEL_T = struct_VkPerformanceConfigurationINTEL_T;
